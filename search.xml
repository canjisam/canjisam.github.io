<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统管理核心知识点详解</title>
      <link href="/2025/08/18/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/18/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统管理核心知识点详解"><a href="#Linux系统管理核心知识点详解" class="headerlink" title="Linux系统管理核心知识点详解"></a>Linux系统管理核心知识点详解</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3">常用命令详解</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">系统监控与性能分析</a></li><li><a href="#%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%AF%8A%E6%96%AD">故障排查与诊断</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE">服务管理与配置</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E8%AF%8A%E6%96%AD%E4%B8%8E%E4%BC%98%E5%8C%96">网络诊断与优化</a></li><li><a href="#%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">实战案例分析</a></li><li><a href="#%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98">高频面试题</a></li></ul><hr><h2 id="常用命令详解"><a href="#常用命令详解" class="headerlink" title="常用命令详解"></a>常用命令详解</h2><h3 id="1-grep命令-文本搜索利器"><a href="#1-grep命令-文本搜索利器" class="headerlink" title="1. grep命令 - 文本搜索利器"></a>1. grep命令 - 文本搜索利器</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 模式 <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li><code>-i</code>：忽略大小写</li><li><code>-v</code>：反向匹配</li><li><code>-n</code>：显示行号</li><li><code>-r</code>：递归搜索</li><li><code>-E</code>：使用扩展正则表达式</li><li><code>-A</code>：显示匹配行后N行</li><li><code>-B</code>：显示匹配行前N行</li></ul><h4 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索包含error的日志行</span><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"error"</span> /var/log/syslog<span class="token comment"># 搜索不包含debug的日志行</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"debug"</span> application.log<span class="token comment"># 使用正则表达式匹配IP地址</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;"</span> access.log<span class="token comment"># 搜索Java进程并排除grep自身</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token comment"># 搜索多个关键词</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"(error|exception|fatal)"</span> app.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高级正则表达式应用"><a href="#高级正则表达式应用" class="headerlink" title="高级正则表达式应用"></a>高级正则表达式应用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 匹配邮箱地址</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;"</span><span class="token comment"># 匹配手机号码</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"1[3-9][0-9]&#123;9&#125;"</span><span class="token comment"># 匹配URL</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"https?://[^[:space:]]+"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-find命令-文件查找专家"><a href="#2-find命令-文件查找专家" class="headerlink" title="2. find命令 - 文件查找专家"></a>2. find命令 - 文件查找专家</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token punctuation">[</span>路径<span class="token punctuation">]</span> <span class="token punctuation">[</span>表达式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li><code>-name</code>：按文件名查找</li><li><code>-type</code>：按文件类型查找</li><li><code>-mtime</code>：按修改时间查找</li><li><code>-size</code>：按文件大小查找</li><li><code>-perm</code>：按权限查找</li><li><code>-user</code>：按用户查找</li></ul><h4 id="实战技巧-1"><a href="#实战技巧-1" class="headerlink" title="实战技巧"></a>实战技巧</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找7天内修改的.log文件</span><span class="token function">find</span> /var/log <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-7</span><span class="token comment"># 查找大于100MB的文件</span><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M<span class="token comment"># 查找空文件并删除</span><span class="token function">find</span> /tmp <span class="token parameter variable">-type</span> f <span class="token parameter variable">-empty</span> <span class="token parameter variable">-delete</span><span class="token comment"># 查找权限为777的文件</span><span class="token function">find</span> /home <span class="token parameter variable">-type</span> f <span class="token parameter variable">-perm</span> <span class="token number">777</span><span class="token comment"># 查找并批量修改权限</span><span class="token function">find</span> /app <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.sh"</span> <span class="token parameter variable">-exec</span> <span class="token function">chmod</span> +x <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token comment"># 按时间范围查找</span><span class="token function">find</span> /data <span class="token parameter variable">-type</span> f <span class="token parameter variable">-newermt</span> <span class="token string">"2024-01-01"</span> <span class="token operator">!</span> <span class="token parameter variable">-newermt</span> <span class="token string">"2024-12-31"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂查找组合"><a href="#复杂查找组合" class="headerlink" title="复杂查找组合"></a>复杂查找组合</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找最近7天内修改的Java文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.java"</span> <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-7</span> <span class="token parameter variable">-type</span> f<span class="token comment"># 查找大于10MB小于100MB的文件</span><span class="token function">find</span> /var <span class="token parameter variable">-size</span> +10M <span class="token parameter variable">-size</span> <span class="token parameter variable">-100M</span> <span class="token parameter variable">-type</span> f<span class="token comment"># 查找并压缩7天前的日志</span><span class="token function">find</span> /var/log <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-mtime</span> +7 <span class="token parameter variable">-exec</span> <span class="token function">gzip</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-awk命令-文本处理神器"><a href="#3-awk命令-文本处理神器" class="headerlink" title="3. awk命令 - 文本处理神器"></a>3. awk命令 - 文本处理神器</h3><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'pattern &#123;action&#125;'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><ul><li><code>$0</code>：整行内容</li><li><code>$1-$n</code>：第1-n个字段</li><li><code>NF</code>：字段数量</li><li><code>NR</code>：行号</li><li><code>FS</code>：字段分隔符</li><li><code>OFS</code>：输出字段分隔符</li></ul><h4 id="实战技巧-2"><a href="#实战技巧-2" class="headerlink" title="实战技巧"></a>实战技巧</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打印第1列和第3列</span><span class="token function">awk</span> <span class="token string">'&#123;print $1, $3&#125;'</span> access.log<span class="token comment"># 按条件过滤并统计</span><span class="token function">awk</span> <span class="token string">'$9 == 200 &#123;count++&#125; END &#123;print count&#125;'</span> access.log<span class="token comment"># 计算平均响应时间</span><span class="token function">awk</span> <span class="token string">'&#123;sum+=$10&#125; END &#123;print "Average:", sum/NR&#125;'</span> access.log<span class="token comment"># 按状态码统计</span><span class="token function">awk</span> <span class="token string">'&#123;status[$9]++&#125; END &#123;for(s in status) print s, status[s]&#125;'</span> access.log<span class="token comment"># 处理CSV文件</span><span class="token function">awk</span> -F<span class="token string">','</span> <span class="token string">'&#123;print $1, $3&#125;'</span> data.csv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统计每个IP的访问次数</span><span class="token function">awk</span> <span class="token string">'&#123;ip[$1]++&#125; END &#123;for(i in ip) print i, ip[i]&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k2</span> <span class="token parameter variable">-nr</span><span class="token comment"># 找出访问最多的10个URL</span><span class="token function">awk</span> <span class="token string">'&#123;url[$7]++&#125; END &#123;for(u in url) print url[u], u&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span><span class="token comment"># 计算某时间段内的访问量</span><span class="token function">awk</span> <span class="token string">'$4 >= "[10/Oct/2024:09:00:00" &amp;&amp; $4 &lt;= "[10/Oct/2024:18:00:00" &#123;count++&#125; END &#123;print count&#125;'</span> access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-top命令-系统监控工具"><a href="#4-top命令-系统监控工具" class="headerlink" title="4. top命令 - 系统监控工具"></a>4. top命令 - 系统监控工具</h3><h4 id="界面解读"><a href="#界面解读" class="headerlink" title="界面解读"></a>界面解读</h4><pre class="line-numbers language-none"><code class="language-none">top - 15:30:45 up 2 days,  3:15,  2 users,  load average: 0.12, 0.08, 0.05Tasks: 225 total,   1 running, 224 sleeping,   0 stopped,   0 zombie%Cpu(s):  1.2 us,  0.5 sy,  0.0 ni, 98.0 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  8167848 total,  1234568 free,  2345678 used,  4587602 buff&#x2F;cacheKiB Swap:  2097148 total,  2097148 free,        0 used.  5432168 avail Mem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键指标解释"><a href="#关键指标解释" class="headerlink" title="关键指标解释"></a>关键指标解释</h4><ul><li><strong>load average</strong>：系统负载（1分钟、5分钟、15分钟平均值）</li><li><strong>%Cpu(s)</strong>：CPU使用率<ul><li>us：用户空间占用</li><li>sy：内核空间占用</li><li>id：空闲CPU百分比</li><li>wa：等待I&#x2F;O的CPU时间</li></ul></li><li><strong>KiB Mem</strong>：内存使用情况</li><li><strong>KiB Swap</strong>：交换空间使用情况</li></ul><h4 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h4><ul><li><code>P</code>：按CPU使用率排序</li><li><code>M</code>：按内存使用率排序</li><li><code>T</code>：按运行时间排序</li><li><code>k</code>：终止进程</li><li><code>r</code>：修改进程优先级</li><li><code>1</code>：显示每个CPU核心的使用情况</li></ul><h4 id="实战技巧-3"><a href="#实战技巧-3" class="headerlink" title="实战技巧"></a>实战技巧</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示特定用户的进程</span><span class="token function">top</span> <span class="token parameter variable">-u</span> username<span class="token comment"># 以批处理模式运行</span><span class="token function">top</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">></span> top_output.txt<span class="token comment"># 按内存排序</span><span class="token function">top</span> <span class="token parameter variable">-o</span> %MEM<span class="token comment"># 显示完整命令行</span><span class="token function">top</span> <span class="token parameter variable">-c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="系统监控与性能分析"><a href="#系统监控与性能分析" class="headerlink" title="系统监控与性能分析"></a>系统监控与性能分析</h2><h3 id="1-CPU性能分析"><a href="#1-CPU性能分析" class="headerlink" title="1. CPU性能分析"></a>1. CPU性能分析</h3><h4 id="使用top-htop监控CPU"><a href="#使用top-htop监控CPU" class="headerlink" title="使用top&#x2F;htop监控CPU"></a>使用top&#x2F;htop监控CPU</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装htop（更友好的top替代品）</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">htop</span>  <span class="token comment"># Ubuntu/Debian</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">htop</span>   <span class="token comment"># CentOS/RHEL</span><span class="token comment"># 使用htop</span><span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CPU使用率分析"><a href="#CPU使用率分析" class="headerlink" title="CPU使用率分析"></a>CPU使用率分析</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看CPU详细信息</span><span class="token function">cat</span> /proc/cpuinfo<span class="token comment"># 查看CPU使用率统计</span>sar <span class="token parameter variable">-u</span> <span class="token number">1</span> <span class="token number">5</span><span class="token comment"># 查看每个CPU核心的使用率</span>mpstat <span class="token parameter variable">-P</span> ALL <span class="token number">1</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高CPU占用排查步骤"><a href="#高CPU占用排查步骤" class="headerlink" title="高CPU占用排查步骤"></a>高CPU占用排查步骤</h4><ol><li><p><strong>使用top找出高CPU进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token parameter variable">-o</span> %CPU<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>查看进程详细信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-p</span> PID <span class="token parameter variable">-o</span> pid,ppid,cmd,%mem,%cpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>分析进程线程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-p</span> PID<span class="token function">ps</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-p</span> PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>使用strace跟踪系统调用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">strace</span> <span class="token parameter variable">-p</span> PID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-内存性能分析"><a href="#2-内存性能分析" class="headerlink" title="2. 内存性能分析"></a>2. 内存性能分析</h3><h4 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看内存使用情况</span><span class="token function">free</span> <span class="token parameter variable">-h</span><span class="token comment"># 查看内存详细信息</span><span class="token function">cat</span> /proc/meminfo<span class="token comment"># 查看进程内存使用</span><span class="token function">ps</span> aux <span class="token parameter variable">--sort</span><span class="token operator">=</span>-%mem <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存泄漏检测"><a href="#内存泄漏检测" class="headerlink" title="内存泄漏检测"></a>内存泄漏检测</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用valgrind检测内存泄漏</span>valgrind <span class="token parameter variable">--tool</span><span class="token operator">=</span>memcheck --leak-check<span class="token operator">=</span>full ./your_program<span class="token comment"># 使用pmap查看进程内存映射</span>pmap <span class="token parameter variable">-x</span> PID<span class="token comment"># 使用smem查看内存使用情况</span>smem <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存优化建议"><a href="#内存优化建议" class="headerlink" title="内存优化建议"></a>内存优化建议</h4><ol><li><p><strong>调整swappiness参数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前值</span><span class="token function">cat</span> /proc/sys/vm/swappiness<span class="token comment"># 临时修改（重启失效）</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 永久修改</span><span class="token builtin class-name">echo</span> <span class="token string">"vm.swappiness=10"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>清理缓存</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清理页缓存</span><span class="token function">sudo</span> <span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span class="token comment"># 清理目录项和inode缓存</span><span class="token function">sudo</span> <span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span class="token comment"># 清理所有缓存</span><span class="token function">sudo</span> <span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">3</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-磁盘I-O性能分析"><a href="#3-磁盘I-O性能分析" class="headerlink" title="3. 磁盘I&#x2F;O性能分析"></a>3. 磁盘I&#x2F;O性能分析</h3><h4 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看磁盘使用情况</span><span class="token function">df</span> <span class="token parameter variable">-h</span><span class="token comment"># 查看目录大小</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> /path/to/directory<span class="token comment"># 查看磁盘I/O统计</span>iostat <span class="token parameter variable">-x</span> <span class="token number">1</span> <span class="token number">5</span><span class="token comment"># 查看实时I/O</span>iotop <span class="token parameter variable">-o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="I-O性能优化"><a href="#I-O性能优化" class="headerlink" title="I&#x2F;O性能优化"></a>I&#x2F;O性能优化</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看磁盘调度算法</span><span class="token function">cat</span> /sys/block/sda/queue/scheduler<span class="token comment"># 修改磁盘调度算法（临时）</span><span class="token builtin class-name">echo</span> deadline <span class="token operator">></span> /sys/block/sda/queue/scheduler<span class="token comment"># 使用fio测试磁盘性能</span>fio <span class="token parameter variable">--name</span><span class="token operator">=</span>randread <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--rw</span><span class="token operator">=</span>randread <span class="token parameter variable">--bs</span><span class="token operator">=</span>4k <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--size</span><span class="token operator">=</span>1G <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">60</span> <span class="token parameter variable">--group_reporting</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="故障排查与诊断"><a href="#故障排查与诊断" class="headerlink" title="故障排查与诊断"></a>故障排查与诊断</h2><h3 id="1-系统日志分析"><a href="#1-系统日志分析" class="headerlink" title="1. 系统日志分析"></a>1. 系统日志分析</h3><h4 id="重要日志文件位置"><a href="#重要日志文件位置" class="headerlink" title="重要日志文件位置"></a>重要日志文件位置</h4><ul><li><code>/var/log/syslog</code>：系统日志（Ubuntu&#x2F;Debian）</li><li><code>/var/log/messages</code>：系统日志（CentOS&#x2F;RHEL）</li><li><code>/var/log/auth.log</code>：认证日志</li><li><code>/var/log/kern.log</code>：内核日志</li><li><code>/var/log/dmesg</code>：系统启动信息</li></ul><h4 id="日志分析技巧"><a href="#日志分析技巧" class="headerlink" title="日志分析技巧"></a>日志分析技巧</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看系统错误日志</span>journalctl <span class="token parameter variable">-p</span> err <span class="token parameter variable">-b</span><span class="token comment"># 查看特定服务的日志</span>journalctl <span class="token parameter variable">-u</span> nginx.service<span class="token comment"># 查看最近100行日志</span><span class="token function">tail</span> <span class="token parameter variable">-100</span> /var/log/syslog<span class="token comment"># 实时监控日志</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/nginx/error.log<span class="token comment"># 按时间范围查看日志</span>journalctl <span class="token parameter variable">--since</span> <span class="token string">"2024-01-01"</span> <span class="token parameter variable">--until</span> <span class="token string">"2024-01-31"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-OOM（内存溢出）场景分析"><a href="#2-OOM（内存溢出）场景分析" class="headerlink" title="2. OOM（内存溢出）场景分析"></a>2. OOM（内存溢出）场景分析</h3><h4 id="OOM-Killer机制"><a href="#OOM-Killer机制" class="headerlink" title="OOM Killer机制"></a>OOM Killer机制</h4><p>当系统内存不足时，Linux的OOM Killer会选择并终止占用内存最多的进程。</p><h4 id="OOM排查步骤"><a href="#OOM排查步骤" class="headerlink" title="OOM排查步骤"></a>OOM排查步骤</h4><ol><li><p><strong>检查OOM日志</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"killed process"</span> /var/log/syslog<span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"oom"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>分析OOM分数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看进程OOM分数</span><span class="token function">cat</span> /proc/PID/oom_score<span class="token comment"># 查看OOM调整值</span><span class="token function">cat</span> /proc/PID/oom_score_adj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>配置OOM保护</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 保护重要进程（-1000表示禁止OOM killer）</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-1000</span> <span class="token operator">></span> /proc/PID/oom_score_adj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="OOM预防策略"><a href="#OOM预防策略" class="headerlink" title="OOM预防策略"></a>OOM预防策略</h4><ul><li>合理配置JVM堆内存</li><li>使用内存监控工具</li><li>配置swap空间</li><li>优化应用程序内存使用</li></ul><h3 id="3-系统无响应排查"><a href="#3-系统无响应排查" class="headerlink" title="3. 系统无响应排查"></a>3. 系统无响应排查</h3><h4 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h4><ol><li><p><strong>检查系统负载</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span class="token function">cat</span> /proc/loadavg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>检查进程状态</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"(D|Z)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>检查I&#x2F;O等待</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat <span class="token parameter variable">-x</span> <span class="token number">1</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>检查网络连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tuln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"(CLOSE_WAIT|TIME_WAIT)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="服务管理与配置"><a href="#服务管理与配置" class="headerlink" title="服务管理与配置"></a>服务管理与配置</h2><h3 id="1-systemctl命令详解"><a href="#1-systemctl命令详解" class="headerlink" title="1. systemctl命令详解"></a>1. systemctl命令详解</h3><h4 id="基本服务管理"><a href="#基本服务管理" class="headerlink" title="基本服务管理"></a>基本服务管理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span><span class="token function">sudo</span> systemctl start nginx<span class="token comment"># 停止服务</span><span class="token function">sudo</span> systemctl stop nginx<span class="token comment"># 重启服务</span><span class="token function">sudo</span> systemctl restart nginx<span class="token comment"># 重新加载配置</span><span class="token function">sudo</span> systemctl reload nginx<span class="token comment"># 查看服务状态</span><span class="token function">sudo</span> systemctl status nginx<span class="token comment"># 设置开机启动</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> nginx<span class="token comment"># 禁用开机启动</span><span class="token function">sudo</span> systemctl disable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有运行中的服务</span>systemctl list-units <span class="token parameter variable">--type</span><span class="token operator">=</span>service <span class="token parameter variable">--state</span><span class="token operator">=</span>running<span class="token comment"># 查看服务日志</span>journalctl <span class="token parameter variable">-u</span> nginx.service <span class="token parameter variable">-f</span><span class="token comment"># 查看服务依赖关系</span>systemctl list-dependencies nginx<span class="token comment"># 检查服务配置</span><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-服务故障排查"><a href="#2-服务故障排查" class="headerlink" title="2. 服务故障排查"></a>2. 服务故障排查</h3><h4 id="服务启动失败排查"><a href="#服务启动失败排查" class="headerlink" title="服务启动失败排查"></a>服务启动失败排查</h4><ol><li><p><strong>检查服务状态</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status service_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>查看详细日志</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl <span class="token parameter variable">-u</span> service_name --no-pager <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>检查配置文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 不同服务的配置文件检查</span><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span>          <span class="token comment"># Nginx</span><span class="token function">sudo</span> apache2ctl <span class="token parameter variable">-t</span>   <span class="token comment"># Apache</span><span class="token function">sudo</span> php-fpm <span class="token parameter variable">-t</span>      <span class="token comment"># PHP-FPM</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>检查端口占用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tulnp</span> <span class="token operator">|</span> <span class="token function">grep</span> :80ss <span class="token parameter variable">-tulnp</span> <span class="token operator">|</span> <span class="token function">grep</span> :80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="服务性能监控"><a href="#服务性能监控" class="headerlink" title="服务性能监控"></a>服务性能监控</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用systemd-cgtop监控资源使用</span>systemd-cgtop<span class="token comment"># 查看服务资源限制</span>systemctl show service_name <span class="token parameter variable">--property</span><span class="token operator">=</span>MemoryMax,CPUQuotaPerSecUSec<span class="token comment"># 设置服务资源限制</span><span class="token function">sudo</span> systemctl set-property service_name <span class="token assign-left variable">MemoryMax</span><span class="token operator">=</span>1G <span class="token assign-left variable">CPUQuota</span><span class="token operator">=</span><span class="token number">50</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="网络诊断与优化"><a href="#网络诊断与优化" class="headerlink" title="网络诊断与优化"></a>网络诊断与优化</h2><h3 id="1-网络连接状态分析"><a href="#1-网络连接状态分析" class="headerlink" title="1. 网络连接状态分析"></a>1. 网络连接状态分析</h3><h4 id="netstat命令详解"><a href="#netstat命令详解" class="headerlink" title="netstat命令详解"></a>netstat命令详解</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有网络连接</span><span class="token function">netstat</span> <span class="token parameter variable">-tuln</span><span class="token comment"># 查看TCP连接</span><span class="token function">netstat</span> <span class="token parameter variable">-tlnp</span><span class="token comment"># 查看监听端口</span><span class="token function">netstat</span> <span class="token parameter variable">-lntp</span><span class="token comment"># 查看网络统计信息</span><span class="token function">netstat</span> <span class="token parameter variable">-s</span><span class="token comment"># 查看路由表</span><span class="token function">netstat</span> <span class="token parameter variable">-rn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ss命令（netstat替代品）"><a href="#ss命令（netstat替代品）" class="headerlink" title="ss命令（netstat替代品）"></a>ss命令（netstat替代品）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有连接</span>ss <span class="token parameter variable">-tuln</span><span class="token comment"># 查看TCP连接状态统计</span>ss <span class="token parameter variable">-s</span><span class="token comment"># 查看监听端口</span>ss <span class="token parameter variable">-lntp</span><span class="token comment"># 查看进程使用的端口</span>ss <span class="token parameter variable">-pl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网络连接状态解释"><a href="#网络连接状态解释" class="headerlink" title="网络连接状态解释"></a>网络连接状态解释</h4><ul><li><strong>ESTABLISHED</strong>：已建立的连接</li><li><strong>LISTEN</strong>：监听状态</li><li><strong>TIME_WAIT</strong>：连接关闭后等待</li><li><strong>CLOSE_WAIT</strong>：等待本地应用关闭</li><li><strong>SYN_SENT&#x2F;SYN_RECV</strong>：TCP握手过程</li></ul><h3 id="2-网络性能优化"><a href="#2-网络性能优化" class="headerlink" title="2. 网络性能优化"></a>2. 网络性能优化</h3><h4 id="网络带宽监控"><a href="#网络带宽监控" class="headerlink" title="网络带宽监控"></a>网络带宽监控</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用iftop监控实时流量</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> iftop<span class="token function">sudo</span> iftop <span class="token parameter variable">-i</span> eth0<span class="token comment"># 使用nload查看网络流量</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nload<span class="token function">sudo</span> nload<span class="token comment"># 使用vnstat统计网络流量</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> vnstat<span class="token function">sudo</span> vnstat <span class="token parameter variable">-i</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP性能调优"><a href="#TCP性能调优" class="headerlink" title="TCP性能调优"></a>TCP性能调优</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前TCP参数</span><span class="token function">sysctl</span> net.ipv4.tcp_congestion_control<span class="token comment"># 修改TCP拥塞控制算法</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_congestion_control</span><span class="token operator">=</span>bbr<span class="token comment"># 优化TCP缓冲区</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.rmem_max</span><span class="token operator">=</span><span class="token number">16777216</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.wmem_max</span><span class="token operator">=</span><span class="token number">16777216</span><span class="token comment"># 查看网络接口配置</span><span class="token function">ethtool</span> <span class="token parameter variable">-i</span> eth0<span class="token function">ethtool</span> <span class="token parameter variable">-S</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网络故障排查"><a href="#网络故障排查" class="headerlink" title="网络故障排查"></a>网络故障排查</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试网络连通性</span><span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">4</span> google.com<span class="token comment"># 路由跟踪</span><span class="token function">mtr</span> google.com<span class="token function">traceroute</span> google.com<span class="token comment"># DNS解析测试</span><span class="token function">nslookup</span> google.com<span class="token function">dig</span> google.com<span class="token comment"># 端口连通性测试</span>telnet <span class="token function">hostname</span> <span class="token number">80</span><span class="token function">nc</span> <span class="token parameter variable">-zv</span> <span class="token function">hostname</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="实战案例分析"><a href="#实战案例分析" class="headerlink" title="实战案例分析"></a>实战案例分析</h2><h3 id="案例1：Web服务器高负载排查"><a href="#案例1：Web服务器高负载排查" class="headerlink" title="案例1：Web服务器高负载排查"></a>案例1：Web服务器高负载排查</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>Web服务器响应缓慢，CPU使用率接近100%。</p><h4 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h4><ol><li><p><strong>查看系统负载</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span class="token function">top</span> <span class="token parameter variable">-o</span> %CPU<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>发现异常进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"(apache|nginx)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>分析访问日志</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统计IP访问次数</span><span class="token function">awk</span> <span class="token string">'&#123;ip[$1]++&#125; END &#123;for(i in ip) print ip[i], i&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span><span class="token comment"># 检查是否有异常User-Agent</span><span class="token function">awk</span> -F<span class="token string">'"'</span> <span class="token string">'&#123;ua[$6]++&#125; END &#123;for(u in ua) print ua[u], u&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>解决方案</strong></p><ul><li>配置防火墙限制IP访问频率</li><li>优化Web服务器配置</li><li>启用CDN减轻服务器压力</li></ul></li></ol><h3 id="案例2：内存泄漏排查"><a href="#案例2：内存泄漏排查" class="headerlink" title="案例2：内存泄漏排查"></a>案例2：内存泄漏排查</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>Java应用内存持续增长，最终导致OOM。</p><h4 id="排查过程-1"><a href="#排查过程-1" class="headerlink" title="排查过程"></a>排查过程</h4><ol><li><p><strong>监控内存使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token parameter variable">-p</span> JAVA_PIDjstat <span class="token parameter variable">-gc</span> JAVA_PID 1s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>生成堆转储</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>heap.hprof JAVA_PID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用MAT分析</strong></p><ul><li>导入heap.hprof文件</li><li>查找内存泄漏嫌疑对象</li><li>分析引用链</li></ul></li><li><p><strong>优化代码</strong></p><ul><li>修复资源未关闭问题</li><li>优化缓存策略</li><li>增加内存监控告警</li></ul></li></ol><h3 id="案例3：网络连接数过多"><a href="#案例3：网络连接数过多" class="headerlink" title="案例3：网络连接数过多"></a>案例3：网络连接数过多</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>服务器网络连接数达到上限，新连接被拒绝。</p><h4 id="排查过程-2"><a href="#排查过程-2" class="headerlink" title="排查过程"></a>排查过程</h4><ol><li><p><strong>查看连接状态</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^tcp/ &#123;state[$NF]++&#125; END &#123;for(key in state) print key, state[key]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>发现大量TIME_WAIT</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> TIME_WAIT <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>优化内核参数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 减少TIME_WAIT时间</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_fin_timeout</span><span class="token operator">=</span><span class="token number">30</span><span class="token comment"># 启用TIME_WAIT重用</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_tw_reuse</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 启用TIME_WAIT快速回收</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_tw_recycle</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h2><h3 id="1-grep命令相关"><a href="#1-grep命令相关" class="headerlink" title="1. grep命令相关"></a>1. grep命令相关</h3><p><strong>Q1：如何使用grep查找包含”error”但不包含”debug”的行？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"error"</span> file.log <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"debug"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Q2：如何在多个文件中递归查找包含特定字符串的文件？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token string">"search_string"</span> /path/to/directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Q3：如何使用正则表达式匹配邮箱地址？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;"</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-find命令相关"><a href="#2-find命令相关" class="headerlink" title="2. find命令相关"></a>2. find命令相关</h3><p><strong>Q1：如何查找7天内修改过的文件？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /path <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Q2：如何查找并删除大于100MB的文件？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /path <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M <span class="token parameter variable">-delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Q3：如何查找特定用户拥有的文件？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /path <span class="token parameter variable">-user</span> username <span class="token parameter variable">-type</span> f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-系统监控相关"><a href="#3-系统监控相关" class="headerlink" title="3. 系统监控相关"></a>3. 系统监控相关</h3><p><strong>Q1：top命令中的load average是什么意思？</strong></p><ul><li>load average表示系统的平均负载，分别是1分钟、5分钟、15分钟的平均值</li><li>理想情况下应该小于CPU核心数</li></ul><p><strong>Q2：如何排查CPU使用率过高的问题？</strong></p><ol><li>使用top命令找出高CPU进程</li><li>使用ps命令查看进程详细信息</li><li>使用strace跟踪系统调用</li><li>分析应用程序日志</li></ol><p><strong>Q3：如何检测内存泄漏？</strong></p><ul><li>使用valgrind工具</li><li>监控内存使用趋势</li><li>分析堆转储文件</li><li>检查资源是否正确释放</li></ul><h3 id="4-故障排查相关"><a href="#4-故障排查相关" class="headerlink" title="4. 故障排查相关"></a>4. 故障排查相关</h3><p><strong>Q1：系统OOM Killer触发了，如何分析？</strong></p><ol><li>查看&#x2F;var&#x2F;log&#x2F;syslog中的OOM日志</li><li>分析dmesg输出</li><li>检查进程的OOM分数</li><li>优化内存使用或增加内存</li></ol><p><strong>Q2：如何排查磁盘空间不足？</strong></p><ol><li>使用df -h查看磁盘使用情况</li><li>使用du -sh查找大文件</li><li>清理日志文件</li><li>删除不必要的文件</li></ol><h3 id="5-网络诊断相关"><a href="#5-网络诊断相关" class="headerlink" title="5. 网络诊断相关"></a>5. 网络诊断相关</h3><p><strong>Q1：如何查看端口是否被占用？</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tulnp</span> <span class="token operator">|</span> <span class="token function">grep</span> :80ss <span class="token parameter variable">-tulnp</span> <span class="token operator">|</span> <span class="token function">grep</span> :80<span class="token function">lsof</span> <span class="token parameter variable">-i</span> :80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Q2：如何分析大量TIME_WAIT连接？</strong></p><ul><li>调整tcp_fin_timeout参数</li><li>启用tcp_tw_reuse和tcp_tw_recycle</li><li>优化应用程序连接管理</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Linux系统管理是一项综合性的技能，需要掌握：</p><ol><li><strong>命令熟练度</strong>：熟练使用grep、find、awk等常用命令</li><li><strong>系统监控</strong>：能够使用各种工具监控CPU、内存、磁盘、网络等资源</li><li><strong>故障排查</strong>：具备系统性的故障排查思路和方法</li><li><strong>性能优化</strong>：能够根据实际情况进行系统调优</li><li><strong>实践经验</strong>：通过实际案例积累经验，形成自己的知识体系</li></ol><p>建议读者：</p><ul><li>多动手实践，在测试环境中验证各种命令和参数</li><li>建立系统化的排查思路，遇到问题时能够快速定位</li><li>关注系统日志，及时发现潜在问题</li><li>定期备份重要数据，避免数据丢失</li><li>持续学习新的工具和技术，跟上技术发展</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://man7.org/linux/man-pages/">Linux命令大全</a></li><li><a href="http://www.brendangregg.com/linuxperf.html">Linux Performance</a></li><li><a href="https://www.redhat.com/en/topics/linux/performance-tuning">系统性能调优指南</a></li><li><a href="https://www.kernel.org/doc/Documentation/">Linux故障排查手册</a></li><li><a href="https://www.tecmint.com/linux-network-commands/">网络诊断工具指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 命令行 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 故障排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络核心知识点详解</title>
      <link href="/2025/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络核心知识点详解"><a href="#计算机网络核心知识点详解" class="headerlink" title="计算机网络核心知识点详解"></a>计算机网络核心知识点详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机网络是现代软件系统的基石，理解网络协议和优化技术对于开发高性能、高可用的应用系统至关重要。本文将系统梳理HTTP&#x2F;HTTPS、TCP&#x2F;IP、DNS、负载均衡、网络优化等核心知识点，结合典型面试题型进行深入解析。</p><h2 id="第一章：HTTP-HTTPS协议详解"><a href="#第一章：HTTP-HTTPS协议详解" class="headerlink" title="第一章：HTTP&#x2F;HTTPS协议详解"></a>第一章：HTTP&#x2F;HTTPS协议详解</h2><h3 id="1-1-HTTP协议基础"><a href="#1-1-HTTP协议基础" class="headerlink" title="1.1 HTTP协议基础"></a>1.1 HTTP协议基础</h3><h4 id="1-1-1-HTTP协议概述"><a href="#1-1-1-HTTP协议概述" class="headerlink" title="1.1.1 HTTP协议概述"></a>1.1.1 HTTP协议概述</h4><p>HTTP（HyperText Transfer Protocol）是一种应用层协议，基于TCP&#x2F;IP协议栈，用于在Web浏览器和服务器之间传输超文本。</p><p><strong>HTTP协议特点：</strong></p><ul><li>无连接：每次请求都需要建立新的连接（HTTP&#x2F;1.1之前）</li><li>无状态：协议对事务处理没有记忆能力</li><li>灵活：可以传输任意类型的数据</li><li>简单快速：客户端向服务器请求服务时，只需传送请求方法和路径</li></ul><h4 id="1-1-2-HTTP请求报文结构"><a href="#1-1-2-HTTP请求报文结构" class="headerlink" title="1.1.2 HTTP请求报文结构"></a>1.1.2 HTTP请求报文结构</h4><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;index.html HTTP&#x2F;1.1Host: www.example.comUser-Agent: Mozilla&#x2F;5.0Accept: text&#x2F;html,application&#x2F;xhtml+xmlAccept-Language: zh-CN,zh;q&#x3D;0.9Accept-Encoding: gzip, deflateConnection: keep-alive请求体（可选）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请求报文组成：</strong></p><ol><li>请求行（Request Line）：方法 + URL + 协议版本</li><li>请求头（Headers）：键值对形式</li><li>空行：分隔请求头和请求体</li><li>请求体（可选）：POST请求的数据</li></ol><h4 id="1-1-3-HTTP响应报文结构"><a href="#1-1-3-HTTP响应报文结构" class="headerlink" title="1.1.3 HTTP响应报文结构"></a>1.1.3 HTTP响应报文结构</h4><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKDate: Mon, 19 Dec 2024 10:00:00 GMTContent-Type: text&#x2F;html; charset&#x3D;UTF-8Content-Length: 1234Server: Apache&#x2F;2.4.41Cache-Control: max-age&#x3D;3600&lt;html&gt;  &lt;body&gt;Hello World&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>响应报文组成：</strong></p><ol><li>状态行：协议版本 + 状态码 + 状态描述</li><li>响应头：服务器信息、内容类型等</li><li>空行：分隔响应头和响应体</li><li>响应体：实际返回的数据</li></ol><h3 id="1-2-HTTP状态码详解"><a href="#1-2-HTTP状态码详解" class="headerlink" title="1.2 HTTP状态码详解"></a>1.2 HTTP状态码详解</h3><h4 id="1-2-1-状态码分类"><a href="#1-2-1-状态码分类" class="headerlink" title="1.2.1 状态码分类"></a>1.2.1 状态码分类</h4><table><thead><tr><th>分类</th><th>范围</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>100-199</td><td>信息性状态码</td></tr><tr><td>2xx</td><td>200-299</td><td>成功状态码</td></tr><tr><td>3xx</td><td>300-399</td><td>重定向状态码</td></tr><tr><td>4xx</td><td>400-499</td><td>客户端错误状态码</td></tr><tr><td>5xx</td><td>500-599</td><td>服务器错误状态码</td></tr></tbody></table><h4 id="1-2-2-常见状态码"><a href="#1-2-2-常见状态码" class="headerlink" title="1.2.2 常见状态码"></a>1.2.2 常见状态码</h4><p><strong>2xx 成功</strong></p><ul><li>200 OK：请求成功</li><li>201 Created：资源创建成功</li><li>204 No Content：请求成功但无返回内容</li></ul><p><strong>3xx 重定向</strong></p><ul><li>301 Moved Permanently：永久重定向</li><li>302 Found：临时重定向</li><li>304 Not Modified：资源未修改，使用缓存</li></ul><p><strong>4xx 客户端错误</strong></p><ul><li>400 Bad Request：请求语法错误</li><li>401 Unauthorized：未授权</li><li>403 Forbidden：服务器拒绝请求</li><li>404 Not Found：资源不存在</li></ul><p><strong>5xx 服务器错误</strong></p><ul><li>500 Internal Server Error：服务器内部错误</li><li>502 Bad Gateway：网关错误</li><li>503 Service Unavailable：服务不可用</li></ul><h3 id="1-3-HTTP方法详解"><a href="#1-3-HTTP方法详解" class="headerlink" title="1.3 HTTP方法详解"></a>1.3 HTTP方法详解</h3><h4 id="1-3-1-常用HTTP方法"><a href="#1-3-1-常用HTTP方法" class="headerlink" title="1.3.1 常用HTTP方法"></a>1.3.1 常用HTTP方法</h4><table><thead><tr><th>方法</th><th>描述</th><th>幂等性</th><th>安全性</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>是</td><td>是</td></tr><tr><td>POST</td><td>创建资源</td><td>否</td><td>否</td></tr><tr><td>PUT</td><td>更新资源</td><td>是</td><td>否</td></tr><tr><td>DELETE</td><td>删除资源</td><td>是</td><td>否</td></tr><tr><td>HEAD</td><td>获取响应头</td><td>是</td><td>是</td></tr><tr><td>OPTIONS</td><td>获取支持的方法</td><td>是</td><td>是</td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>否</td><td>否</td></tr></tbody></table><h4 id="1-3-2-GET-vs-POST区别"><a href="#1-3-2-GET-vs-POST区别" class="headerlink" title="1.3.2 GET vs POST区别"></a>1.3.2 GET vs POST区别</h4><table><thead><tr><th>特性</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>参数位置</td><td>URL中</td><td>请求体中</td></tr><tr><td>数据长度</td><td>受URL长度限制</td><td>无限制</td></tr><tr><td>安全性</td><td>参数可见</td><td>参数不可见</td></tr><tr><td>幂等性</td><td>是</td><td>否</td></tr><tr><td>缓存</td><td>可被缓存</td><td>不可缓存</td></tr><tr><td>历史记录</td><td>保留在浏览器历史</td><td>不保留</td></tr></tbody></table><h3 id="1-4-HTTP版本演进"><a href="#1-4-HTTP版本演进" class="headerlink" title="1.4 HTTP版本演进"></a>1.4 HTTP版本演进</h3><h4 id="1-4-1-HTTP-1-0-vs-HTTP-1-1"><a href="#1-4-1-HTTP-1-0-vs-HTTP-1-1" class="headerlink" title="1.4.1 HTTP&#x2F;1.0 vs HTTP&#x2F;1.1"></a>1.4.1 HTTP&#x2F;1.0 vs HTTP&#x2F;1.1</h4><p><strong>HTTP&#x2F;1.0特点：</strong></p><ul><li>每次请求都需要建立新的TCP连接</li><li>不支持持久连接</li><li>不支持管道化</li></ul><p><strong>HTTP&#x2F;1.1改进：</strong></p><ul><li>默认支持持久连接（Connection: keep-alive）</li><li>支持管道化（Pipelining）</li><li>支持分块传输编码</li><li>支持虚拟主机</li><li>增加了缓存控制机制</li></ul><h4 id="1-4-2-HTTP-2特性"><a href="#1-4-2-HTTP-2特性" class="headerlink" title="1.4.2 HTTP&#x2F;2特性"></a>1.4.2 HTTP&#x2F;2特性</h4><p><strong>HTTP&#x2F;2核心特性：</strong></p><ul><li>二进制分帧：将数据分割为更小的帧进行传输</li><li>多路复用：在一个连接上并发多个请求</li><li>头部压缩：使用HPACK算法压缩头部</li><li>服务器推送：服务器可以主动向客户端推送资源</li><li>优先级和依赖：可以为请求设置优先级</li></ul><h4 id="1-4-3-HTTP-3特性"><a href="#1-4-3-HTTP-3特性" class="headerlink" title="1.4.3 HTTP&#x2F;3特性"></a>1.4.3 HTTP&#x2F;3特性</h4><p><strong>HTTP&#x2F;3核心特性：</strong></p><ul><li>基于QUIC协议（基于UDP）</li><li>内置加密（TLS 1.3）</li><li>连接迁移：网络切换时连接不中断</li><li>0-RTT恢复：更快的连接建立</li><li>无队头阻塞：解决HTTP&#x2F;2的队头阻塞问题</li></ul><h3 id="1-5-HTTPS协议详解"><a href="#1-5-HTTPS协议详解" class="headerlink" title="1.5 HTTPS协议详解"></a>1.5 HTTPS协议详解</h3><h4 id="1-5-1-HTTPS工作原理"><a href="#1-5-1-HTTPS工作原理" class="headerlink" title="1.5.1 HTTPS工作原理"></a>1.5.1 HTTPS工作原理</h4><p>HTTPS（HTTP Secure）是HTTP的安全版本，在HTTP和TCP之间加入了SSL&#x2F;TLS协议层，提供加密、身份认证和数据完整性保护。</p><p><strong>HTTPS通信过程：</strong></p><ol><li><strong>TCP三次握手</strong>：建立TCP连接</li><li><strong>SSL&#x2F;TLS握手</strong>：协商加密参数</li><li><strong>证书验证</strong>：验证服务器身份</li><li><strong>密钥交换</strong>：生成会话密钥</li><li><strong>加密通信</strong>：使用对称加密传输数据</li></ol><h4 id="1-5-2-SSL-TLS握手过程"><a href="#1-5-2-SSL-TLS握手过程" class="headerlink" title="1.5.2 SSL&#x2F;TLS握手过程"></a>1.5.2 SSL&#x2F;TLS握手过程</h4><p><strong>TLS 1.2握手过程：</strong></p><pre class="line-numbers language-none"><code class="language-none">Client                                               Server------                                               ------1. Client Hello      ----------------------------&gt;                      (支持的TLS版本、随机数、加密套件)2.                   &lt;----------------------------  Server Hello                      (选择的TLS版本、随机数、加密套件)3.                   &lt;----------------------------  Certificate                      (服务器证书链)4.                   &lt;----------------------------  Server Key Exchange                      (可选，用于ECDHE等密钥交换)5.                   &lt;----------------------------  Server Hello Done6. Client Key Exchange ----------------------------&gt;                      (预主密钥，用服务器公钥加密)7. Change Cipher Spec ----------------------------&gt;                      (通知启用加密)8. Finished          ----------------------------&gt;                      (握手消息完整性校验)9.                   &lt;----------------------------  Change Cipher Spec10.                  &lt;----------------------------  Finished                      (握手消息完整性校验)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TLS 1.3改进：</strong></p><ul><li>减少握手次数（从2-RTT到1-RTT）</li><li>更强的加密算法</li><li>前向保密性增强</li><li>移除不安全的算法</li></ul><h4 id="1-5-3-证书体系"><a href="#1-5-3-证书体系" class="headerlink" title="1.5.3 证书体系"></a>1.5.3 证书体系</h4><p><strong>证书类型：</strong></p><ul><li><strong>DV证书</strong>：域名验证，验证域名所有权</li><li><strong>OV证书</strong>：组织验证，验证组织身份</li><li><strong>EV证书</strong>：扩展验证，最严格的验证</li></ul><p><strong>证书链验证：</strong></p><pre class="line-numbers language-none"><code class="language-none">根证书CA    ↓中间证书CA    ↓服务器证书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-4-HTTPS性能优化"><a href="#1-5-4-HTTPS性能优化" class="headerlink" title="1.5.4 HTTPS性能优化"></a>1.5.4 HTTPS性能优化</h4><p><strong>连接优化：</strong></p><ul><li><strong>会话复用</strong>：复用之前的TLS会话</li><li><strong>OCSP Stapling</strong>：服务器预先获取证书状态</li><li><strong>HSTS</strong>：强制使用HTTPS</li></ul><p><strong>证书优化：</strong></p><ul><li><strong>证书压缩</strong>：减少证书传输大小</li><li><strong>证书选择</strong>：选择合适的证书类型</li><li><strong>CDN证书</strong>：使用CDN提供的证书</li></ul><h2 id="第二章：TCP-IP协议详解"><a href="#第二章：TCP-IP协议详解" class="headerlink" title="第二章：TCP&#x2F;IP协议详解"></a>第二章：TCP&#x2F;IP协议详解</h2><h3 id="2-1-TCP-IP协议栈"><a href="#2-1-TCP-IP协议栈" class="headerlink" title="2.1 TCP&#x2F;IP协议栈"></a>2.1 TCP&#x2F;IP协议栈</h3><h4 id="2-1-1-协议栈分层"><a href="#2-1-1-协议栈分层" class="headerlink" title="2.1.1 协议栈分层"></a>2.1.1 协议栈分层</h4><table><thead><tr><th>层级</th><th>协议</th><th>数据单元</th><th>功能</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP, FTP, SMTP</td><td>报文</td><td>应用程序间通信</td></tr><tr><td>传输层</td><td>TCP, UDP</td><td>段&#x2F;数据报</td><td>端到端通信</td></tr><tr><td>网络层</td><td>IP, ICMP, ARP</td><td>数据包</td><td>路由和寻址</td></tr><tr><td>数据链路层</td><td>Ethernet, Wi-Fi</td><td>帧</td><td>物理网络传输</td></tr><tr><td>物理层</td><td>电缆, 光纤</td><td>比特</td><td>原始比特流传输</td></tr></tbody></table><h4 id="2-1-2-数据封装过程"><a href="#2-1-2-数据封装过程" class="headerlink" title="2.1.2 数据封装过程"></a>2.1.2 数据封装过程</h4><pre class="line-numbers language-none"><code class="language-none">应用层数据    ↓传输层首部 + 应用层数据 &#x3D; TCP段    ↓网络层首部 + TCP段 &#x3D; IP数据包    ↓数据链路层首部 + IP数据包 + 数据链路层尾部 &#x3D; 帧    ↓物理层比特流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-TCP协议详解"><a href="#2-2-TCP协议详解" class="headerlink" title="2.2 TCP协议详解"></a>2.2 TCP协议详解</h3><h4 id="2-2-1-TCP首部结构"><a href="#2-2-1-TCP首部结构" class="headerlink" title="2.2.1 TCP首部结构"></a>2.2.1 TCP首部结构</h4><pre class="line-numbers language-none"><code class="language-none"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|          Source Port          |       Destination Port        |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                        Sequence Number                        |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                    Acknowledgment Number                      |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|  Data |           |U|A|P|R|S|F|                               || Offset| Reserved  |R|C|S|S|Y|I|            Window             ||       |           |G|K|H|T|N|N|                               |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|           Checksum            |         Urgent Pointer        |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                    Options                    |    Padding    |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                             data                              |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-TCP三次握手"><a href="#2-2-2-TCP三次握手" class="headerlink" title="2.2.2 TCP三次握手"></a>2.2.2 TCP三次握手</h4><p><strong>三次握手过程：</strong></p><pre class="line-numbers language-none"><code class="language-none">Client                              Server------                              ------1. SYN&#x3D;1, seq&#x3D;x    ----------------&gt;                   (同步序列号)2.                 &lt;----------------  SYN&#x3D;1, ACK&#x3D;1, seq&#x3D;y, ack&#x3D;x+1                   (同步序列号，确认客户端序列号)3. ACK&#x3D;1, seq&#x3D;x+1, ack&#x3D;y+1 ----------------&gt;                   (确认服务器序列号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么是三次握手？</strong></p><ul><li>防止已失效的连接请求报文突然传送到服务器</li><li>确保双方收发能力正常</li><li>同步初始序列号</li></ul><p><strong>TCP连接状态：</strong></p><ul><li>CLOSED：初始状态</li><li>LISTEN：服务器等待连接</li><li>SYN-SENT：客户端发送SYN后</li><li>SYN-RECEIVED：服务器收到SYN并发送SYN+ACK</li><li>ESTABLISHED：连接建立成功</li></ul><h4 id="2-2-3-TCP四次挥手"><a href="#2-2-3-TCP四次挥手" class="headerlink" title="2.2.3 TCP四次挥手"></a>2.2.3 TCP四次挥手</h4><p><strong>四次挥手过程：</strong></p><pre class="line-numbers language-none"><code class="language-none">Client                              Server------                              ------1. FIN&#x3D;1, seq&#x3D;u    ----------------&gt;                   (客户端请求释放连接)2.                 &lt;----------------  ACK&#x3D;1, ack&#x3D;u+1                   (服务器确认收到释放请求)3.                 &lt;----------------  FIN&#x3D;1, seq&#x3D;v                   (服务器请求释放连接)4. ACK&#x3D;1, ack&#x3D;v+1 ----------------&gt;                   (客户端确认收到释放请求)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么是四次挥手？</strong></p><ul><li>TCP是全双工通信，需要分别关闭两个方向的连接</li><li>服务器可能还有数据需要发送</li><li>确保数据完整传输</li></ul><p><strong>TCP连接状态：</strong></p><ul><li>FIN-WAIT-1：客户端发送FIN后</li><li>FIN-WAIT-2：客户端收到ACK后</li><li>CLOSE-WAIT：服务器收到FIN后</li><li>LAST-ACK：服务器发送FIN后</li><li>TIME-WAIT：客户端收到FIN后等待2MSL</li><li>CLOSED：连接完全关闭</li></ul><h4 id="2-2-4-TCP可靠传输机制"><a href="#2-2-4-TCP可靠传输机制" class="headerlink" title="2.2.4 TCP可靠传输机制"></a>2.2.4 TCP可靠传输机制</h4><p><strong>1. 序列号和确认应答机制</strong></p><pre class="line-numbers language-none"><code class="language-none">发送方：为每个字节数据编号接收方：发送确认号表示期望收到的下一个字节序号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2. 超时重传机制</strong></p><ul><li>设置超时时间RTO（Retransmission Timeout）</li><li>自适应重传：根据网络状况动态调整RTO</li><li>快速重传：收到3个重复ACK立即重传</li></ul><p><strong>3. 流量控制机制</strong></p><ul><li>滑动窗口机制：接收方通过窗口大小告知发送方可接收的数据量</li><li>窗口探测：当接收方窗口为0时，发送方定期探测窗口大小</li></ul><p><strong>4. 拥塞控制机制</strong></p><ul><li>慢开始：指数增长拥塞窗口</li><li>拥塞避免：线性增长拥塞窗口</li><li>快重传：收到3个重复ACK时重传</li><li>快恢复：重传后进入快恢复阶段</li></ul><h4 id="2-2-5-TCP滑动窗口机制"><a href="#2-2-5-TCP滑动窗口机制" class="headerlink" title="2.2.5 TCP滑动窗口机制"></a>2.2.5 TCP滑动窗口机制</h4><p><strong>发送窗口：</strong></p><pre class="line-numbers language-none"><code class="language-none">已发送并确认 | 已发送未确认 | 允许发送 | 不允许发送     ↑            ↑           ↑         ↑   SND.UNA    SND.NXT     SND.UNA+SND.WND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>接收窗口：</strong></p><pre class="line-numbers language-none"><code class="language-none">已接收并确认 | 允许接收 | 不允许接收     ↑         ↑         ↑   RCV.NXT  RCV.NXT+RCV.WND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-TCP拥塞控制算法"><a href="#2-3-TCP拥塞控制算法" class="headerlink" title="2.3 TCP拥塞控制算法"></a>2.3 TCP拥塞控制算法</h3><h4 id="2-3-1-传统拥塞控制算法"><a href="#2-3-1-传统拥塞控制算法" class="headerlink" title="2.3.1 传统拥塞控制算法"></a>2.3.1 传统拥塞控制算法</h4><p><strong>1. 慢开始（Slow Start）</strong></p><ul><li>初始拥塞窗口cwnd &#x3D; 1 MSS</li><li>每收到一个ACK，cwnd增加1 MSS</li><li>当cwnd ≥ ssthresh时，进入拥塞避免</li></ul><p><strong>2. 拥塞避免（Congestion Avoidance）</strong></p><ul><li>每经过一个RTT，cwnd增加1 MSS</li><li>线性增长，避免拥塞</li></ul><p><strong>3. 快重传（Fast Retransmit）</strong></p><ul><li>收到3个重复ACK立即重传</li><li>不等待超时</li></ul><p><strong>4. 快恢复（Fast Recovery）</strong></p><ul><li>ssthresh &#x3D; cwnd&#x2F;2</li><li>cwnd &#x3D; ssthresh + 3 MSS</li><li>收到新ACK时，cwnd &#x3D; ssthresh</li></ul><h4 id="2-3-2-现代拥塞控制算法"><a href="#2-3-2-现代拥塞控制算法" class="headerlink" title="2.3.2 现代拥塞控制算法"></a>2.3.2 现代拥塞控制算法</h4><p><strong>1. BBR（Bottleneck Bandwidth and RTT）</strong></p><ul><li>Google开发的拥塞控制算法</li><li>基于带宽和RTT测量</li><li>更高的吞吐量和更低的延迟</li></ul><p><strong>2. Cubic</strong></p><ul><li>Linux默认拥塞控制算法</li><li>基于时间的窗口增长</li><li>适合高带宽延迟积网络</li></ul><h3 id="2-4-UDP协议详解"><a href="#2-4-UDP协议详解" class="headerlink" title="2.4 UDP协议详解"></a>2.4 UDP协议详解</h3><h4 id="2-4-1-UDP特点"><a href="#2-4-1-UDP特点" class="headerlink" title="2.4.1 UDP特点"></a>2.4.1 UDP特点</h4><ul><li>无连接：不需要建立连接</li><li>不可靠：不保证数据到达</li><li>面向报文：保留应用层报文边界</li><li>无拥塞控制：发送速率恒定</li><li>首部开销小：仅8字节</li></ul><h4 id="2-4-2-UDP首部结构"><a href="#2-4-2-UDP首部结构" class="headerlink" title="2.4.2 UDP首部结构"></a>2.4.2 UDP首部结构</h4><pre class="line-numbers language-none"><code class="language-none"> 0      7 8     15 16    23 24    31+--------+--------+--------+--------+|     Source      |   Destination   ||      Port       |      Port       |+--------+--------+--------+--------+|                 |                 ||     Length      |    Checksum     |+--------+--------+--------+--------+|                                   ||          Data Octets ...          |+-----------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-UDP-vs-TCP对比"><a href="#2-4-3-UDP-vs-TCP对比" class="headerlink" title="2.4.3 UDP vs TCP对比"></a>2.4.3 UDP vs TCP对比</h4><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠传输</td><td>不可靠传输</td></tr><tr><td>流量控制</td><td>有</td><td>无</td></tr><tr><td>拥塞控制</td><td>有</td><td>无</td></tr><tr><td>传输效率</td><td>较低</td><td>较高</td></tr><tr><td>首部开销</td><td>20-60字节</td><td>8字节</td></tr><tr><td>适用场景</td><td>文件传输、网页浏览</td><td>视频流、DNS查询</td></tr></tbody></table><h2 id="第三章：DNS系统详解"><a href="#第三章：DNS系统详解" class="headerlink" title="第三章：DNS系统详解"></a>第三章：DNS系统详解</h2><h3 id="3-1-DNS基础概念"><a href="#3-1-DNS基础概念" class="headerlink" title="3.1 DNS基础概念"></a>3.1 DNS基础概念</h3><h4 id="3-1-1-DNS系统架构"><a href="#3-1-1-DNS系统架构" class="headerlink" title="3.1.1 DNS系统架构"></a>3.1.1 DNS系统架构</h4><p><strong>DNS层级结构：</strong></p><pre class="line-numbers language-none"><code class="language-none">根域名服务器    ↓顶级域名服务器（.com, .org, .net等）    ↓权威域名服务器（example.com）    ↓本地DNS服务器（ISP提供）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-DNS记录类型"><a href="#3-1-2-DNS记录类型" class="headerlink" title="3.1.2 DNS记录类型"></a>3.1.2 DNS记录类型</h4><table><thead><tr><th>记录类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>A</td><td>IPv4地址记录</td><td>example.com → 93.184.216.34</td></tr><tr><td>AAAA</td><td>IPv6地址记录</td><td>example.com → 2606:2800:220:1:248:1893:25c8:1946</td></tr><tr><td>CNAME</td><td>别名记录</td><td><a href="http://www.example.com/">www.example.com</a> → example.com</td></tr><tr><td>MX</td><td>邮件交换记录</td><td>example.com → mail.example.com</td></tr><tr><td>TXT</td><td>文本记录</td><td>SPF、DKIM验证</td></tr><tr><td>NS</td><td>域名服务器记录</td><td>example.com → ns1.example.com</td></tr><tr><td>PTR</td><td>反向解析记录</td><td>34.216.184.93.in-addr.arpa → example.com</td></tr></tbody></table><h3 id="3-2-DNS解析过程"><a href="#3-2-DNS解析过程" class="headerlink" title="3.2 DNS解析过程"></a>3.2 DNS解析过程</h3><h4 id="3-2-1-完整解析流程"><a href="#3-2-1-完整解析流程" class="headerlink" title="3.2.1 完整解析流程"></a>3.2.1 完整解析流程</h4><p><strong>递归查询过程：</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 浏览器检查本地缓存2. 操作系统检查hosts文件3. 本地DNS服务器检查缓存4. 本地DNS服务器向根服务器查询5. 根服务器返回顶级域名服务器地址6. 本地DNS服务器向顶级域名服务器查询7. 顶级域名服务器返回权威域名服务器地址8. 本地DNS服务器向权威域名服务器查询9. 权威域名服务器返回IP地址10. 本地DNS服务器缓存结果并返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-DNS缓存机制"><a href="#3-2-2-DNS缓存机制" class="headerlink" title="3.2.2 DNS缓存机制"></a>3.2.2 DNS缓存机制</h4><p><strong>缓存层级：</strong></p><ul><li>浏览器缓存：Chrome默认缓存1分钟</li><li>操作系统缓存：Windows缓存15分钟</li><li>本地DNS服务器缓存：TTL决定缓存时间</li><li>递归DNS服务器缓存：ISP提供的缓存</li></ul><p><strong>TTL（Time To Live）：</strong></p><ul><li>指定DNS记录在缓存中的存活时间</li><li>平衡性能和一致性</li><li>短TTL：快速故障转移</li><li>长TTL：减少DNS查询开销</li></ul><h3 id="3-3-DNS安全机制"><a href="#3-3-DNS安全机制" class="headerlink" title="3.3 DNS安全机制"></a>3.3 DNS安全机制</h3><h4 id="3-3-1-DNS劫持攻击"><a href="#3-3-1-DNS劫持攻击" class="headerlink" title="3.3.1 DNS劫持攻击"></a>3.3.1 DNS劫持攻击</h4><p><strong>常见攻击类型：</strong></p><ul><li>DNS缓存投毒：向DNS缓存注入伪造记录</li><li>DNS劫持：重定向DNS查询到恶意服务器</li><li>中间人攻击：拦截和修改DNS响应</li></ul><h4 id="3-3-2-DNSSEC安全扩展"><a href="#3-3-2-DNSSEC安全扩展" class="headerlink" title="3.3.2 DNSSEC安全扩展"></a>3.3.2 DNSSEC安全扩展</h4><p><strong>DNSSEC功能：</strong></p><ul><li>数字签名：验证DNS响应的真实性</li><li>链式验证：从根到子域名的完整验证</li><li>防止缓存投毒：确保DNS记录未被篡改</li></ul><p><strong>DNSSEC记录类型：</strong></p><ul><li>DNSKEY：存储公钥</li><li>RRSIG：资源记录签名</li><li>DS：父域对子域的信任锚点</li><li>NSEC&#x2F;NSEC3：证明记录不存在</li></ul><h4 id="3-3-3-DoH和DoT"><a href="#3-3-3-DoH和DoT" class="headerlink" title="3.3.3 DoH和DoT"></a>3.3.3 DoH和DoT</h4><p><strong>DoH（DNS over HTTPS）：</strong></p><ul><li>通过HTTPS协议传输DNS查询</li><li>加密DNS流量，防止窃听和篡改</li><li>端口：443</li></ul><p><strong>DoT（DNS over TLS）：</strong></p><ul><li>通过TLS协议传输DNS查询</li><li>专用端口853</li><li>更好的性能优化</li></ul><h3 id="3-4-DNS负载均衡"><a href="#3-4-DNS负载均衡" class="headerlink" title="3.4 DNS负载均衡"></a>3.4 DNS负载均衡</h3><h4 id="3-4-1-基于DNS的负载均衡"><a href="#3-4-1-基于DNS的负载均衡" class="headerlink" title="3.4.1 基于DNS的负载均衡"></a>3.4.1 基于DNS的负载均衡</h4><p><strong>轮询DNS：</strong></p><pre class="line-numbers language-none"><code class="language-none">example.com → 192.168.1.1example.com → 192.168.1.2example.com → 192.168.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>地理位置负载均衡：</strong></p><ul><li>根据用户地理位置返回最近的服务器IP</li><li>使用EDNS0扩展获取客户端子网信息</li><li>CDN常用的负载均衡策略</li></ul><h4 id="3-4-2-健康检查机制"><a href="#3-4-2-健康检查机制" class="headerlink" title="3.4.2 健康检查机制"></a>3.4.2 健康检查机制</h4><p><strong>DNS健康检查：</strong></p><ul><li>定期检测服务器可用性</li><li>自动从DNS响应中移除故障服务器</li><li>支持多种检查方式：HTTP、TCP、ICMP</li></ul><h2 id="第四章：负载均衡详解"><a href="#第四章：负载均衡详解" class="headerlink" title="第四章：负载均衡详解"></a>第四章：负载均衡详解</h2><h3 id="4-1-负载均衡基础概念"><a href="#4-1-负载均衡基础概念" class="headerlink" title="4.1 负载均衡基础概念"></a>4.1 负载均衡基础概念</h3><h4 id="4-1-1-负载均衡类型"><a href="#4-1-1-负载均衡类型" class="headerlink" title="4.1.1 负载均衡类型"></a>4.1.1 负载均衡类型</h4><p><strong>按OSI分层：</strong></p><ul><li>L2负载均衡：基于MAC地址</li><li>L3负载均衡：基于IP地址</li><li>L4负载均衡：基于TCP&#x2F;UDP端口</li><li>L7负载均衡：基于应用层内容</li></ul><p><strong>按实现方式：</strong></p><ul><li>硬件负载均衡：F5、A10等专业设备</li><li>软件负载均衡：Nginx、HAProxy、LVS</li><li>云负载均衡：AWS ELB、阿里云SLB</li></ul><h3 id="4-2-负载均衡算法"><a href="#4-2-负载均衡算法" class="headerlink" title="4.2 负载均衡算法"></a>4.2 负载均衡算法</h3><h4 id="4-2-1-静态负载均衡算法"><a href="#4-2-1-静态负载均衡算法" class="headerlink" title="4.2.1 静态负载均衡算法"></a>4.2.1 静态负载均衡算法</h4><p><strong>1. 轮询（Round Robin）</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 加权轮询（Weighted Round Robin）</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080 weight=3</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080 weight=2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080 weight=1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. IP哈希（IP Hash）</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-动态负载均衡算法"><a href="#4-2-2-动态负载均衡算法" class="headerlink" title="4.2.2 动态负载均衡算法"></a>4.2.2 动态负载均衡算法</h4><p><strong>1. 最少连接（Least Connections）</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">least_conn</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 加权最少连接（Weighted Least Connections）</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">least_conn</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080 weight=3</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080 weight=2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080 weight=1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 响应时间（Response Time）</strong></p><ul><li>选择响应时间最短的服务器</li><li>需要实时监控服务器响应时间</li><li>适用于对延迟敏感的应用</li></ul><h3 id="4-3-Nginx负载均衡详解"><a href="#4-3-Nginx负载均衡详解" class="headerlink" title="4.3 Nginx负载均衡详解"></a>4.3 Nginx负载均衡详解</h3><h4 id="4-3-1-Nginx负载均衡配置"><a href="#4-3-1-Nginx负载均衡配置" class="headerlink" title="4.3.1 Nginx负载均衡配置"></a>4.3.1 Nginx负载均衡配置</h4><p><strong>基础配置：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-健康检查配置"><a href="#4-3-2-健康检查配置" class="headerlink" title="4.3.2 健康检查配置"></a>4.3.2 健康检查配置</h4><p><strong>被动健康检查：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080 backup</span><span class="token punctuation">;</span>  <span class="token comment"># 备用服务器</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主动健康检查（Nginx Plus）：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">zone</span> backend <span class="token number">64k</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.103:8080</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">health_check</span> interval=5s fails=3 passes=2 uri=/health</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-会话保持"><a href="#4-3-3-会话保持" class="headerlink" title="4.3.3 会话保持"></a>4.3.3 会话保持</h4><p><strong>IP哈希会话保持：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Cookie会话保持：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.102:8080</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">sticky</span> cookie srv_id expires=1h domain=.example.com path=/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-负载均衡高可用方案"><a href="#4-4-负载均衡高可用方案" class="headerlink" title="4.4 负载均衡高可用方案"></a>4.4 负载均衡高可用方案</h3><h4 id="4-4-1-Keepalived-Nginx"><a href="#4-4-1-Keepalived-Nginx" class="headerlink" title="4.4.1 Keepalived + Nginx"></a>4.4.1 Keepalived + Nginx</h4><p><strong>主备模式：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主节点配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state MASTER    interface eth0    virtual_router_id <span class="token number">51</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>        virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.100    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 备节点配置</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span>    state BACKUP    interface eth0    virtual_router_id <span class="token number">51</span>    priority <span class="token number">90</span>    advert_int <span class="token number">1</span>        virtual_ipaddress <span class="token punctuation">&#123;</span>        <span class="token number">192.168</span>.1.100    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-集群模式"><a href="#4-4-2-集群模式" class="headerlink" title="4.4.2 集群模式"></a>4.4.2 集群模式</h4><p><strong>LVS集群：</strong></p><ul><li><strong>LVS-NAT</strong>：网络地址转换</li><li><strong>LVS-DR</strong>：直接路由</li><li><strong>LVS-TUN</strong>：IP隧道</li></ul><h2 id="第五章：网络性能优化"><a href="#第五章：网络性能优化" class="headerlink" title="第五章：网络性能优化"></a>第五章：网络性能优化</h2><h3 id="5-1-网络性能指标"><a href="#5-1-网络性能指标" class="headerlink" title="5.1 网络性能指标"></a>5.1 网络性能指标</h3><h4 id="5-1-1-关键性能指标"><a href="#5-1-1-关键性能指标" class="headerlink" title="5.1.1 关键性能指标"></a>5.1.1 关键性能指标</h4><table><thead><tr><th>指标</th><th>定义</th><th>测量工具</th><th>优化方向</th></tr></thead><tbody><tr><td>带宽</td><td>数据传输速率</td><td>iperf, speedtest</td><td>升级链路、压缩数据</td></tr><tr><td>延迟</td><td>数据往返时间</td><td>ping, traceroute</td><td>CDN、就近部署</td></tr><tr><td>丢包率</td><td>数据包丢失比例</td><td>ping, mtr</td><td>网络质量、重传机制</td></tr><tr><td>抖动</td><td>延迟变化程度</td><td>ping -c 100</td><td>QoS、缓冲机制</td></tr><tr><td>吞吐量</td><td>实际传输速率</td><td>wget, curl</td><td>优化协议、并行传输</td></tr></tbody></table><h3 id="5-2-网络优化策略"><a href="#5-2-网络优化策略" class="headerlink" title="5.2 网络优化策略"></a>5.2 网络优化策略</h3><h4 id="5-2-1-CDN优化"><a href="#5-2-1-CDN优化" class="headerlink" title="5.2.1 CDN优化"></a>5.2.1 CDN优化</h4><p><strong>CDN工作原理：</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 用户访问www.example.com2. DNS解析到最近的CDN节点3. CDN节点检查缓存4. 缓存命中：直接返回内容5. 缓存未命中：回源获取内容并缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CDN优化技巧：</strong></p><ul><li><strong>缓存策略</strong>：设置合理的Cache-Control</li><li><strong>缓存预热</strong>：提前加载热门内容</li><li><strong>版本控制</strong>：使用版本号避免缓存污染</li><li><strong>域名分片</strong>：突破浏览器并发限制</li></ul><h4 id="5-2-2-网络协议优化"><a href="#5-2-2-网络协议优化" class="headerlink" title="5.2.2 网络协议优化"></a>5.2.2 网络协议优化</h4><p><strong>HTTP优化：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 启用gzip压缩</span><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_types</span> text/plain text/css application/json application/javascript</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1000</span></span><span class="token punctuation">;</span><span class="token comment"># 启用HTTP/2</span><span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span><span class="token comment"># 优化keepalive</span><span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">100</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TCP优化：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Linux内核参数优化</span><span class="token comment"># 增大TCP缓冲区</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">16777216</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">16777216</span><span class="token comment"># 启用TCP窗口缩放</span>net.ipv4.tcp_window_scaling <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 优化TCP拥塞控制</span>net.ipv4.tcp_congestion_control <span class="token operator">=</span> bbr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-前端网络优化"><a href="#5-2-3-前端网络优化" class="headerlink" title="5.2.3 前端网络优化"></a>5.2.3 前端网络优化</h4><p><strong>资源优化：</strong></p><ul><li><strong>压缩</strong>：Gzip、Brotli压缩</li><li><strong>合并</strong>：减少HTTP请求数</li><li><strong>雪碧图</strong>：合并小图标</li><li><strong>懒加载</strong>：延迟加载非关键资源</li></ul><p><strong>缓存优化：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 静态资源缓存</span><span class="token directive"><span class="token keyword">location</span> ~* \.(jpg|jpeg|png|gif|ico|css|js)$</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">expires</span> <span class="token number">1y</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">"public, immutable"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># HTML不缓存</span><span class="token directive"><span class="token keyword">location</span> ~* \.html$</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">expires</span> -1</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">"no-cache, no-store, must-revalidate"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-网络监控与诊断"><a href="#5-3-网络监控与诊断" class="headerlink" title="5.3 网络监控与诊断"></a>5.3 网络监控与诊断</h3><h4 id="5-3-1-网络监控工具"><a href="#5-3-1-网络监控工具" class="headerlink" title="5.3.1 网络监控工具"></a>5.3.1 网络监控工具</h4><p><strong>基础监控：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 连通性测试</span><span class="token function">ping</span> www.example.com<span class="token comment"># 路由跟踪</span><span class="token function">traceroute</span> www.example.com<span class="token function">mtr</span> www.example.com<span class="token comment"># 端口扫描</span>nmap <span class="token parameter variable">-p</span> <span class="token number">80,443</span> www.example.com<span class="token comment"># 带宽测试</span>iperf3 <span class="token parameter variable">-c</span> server_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>高级监控：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># TCP连接分析</span>ss <span class="token parameter variable">-tuln</span><span class="token function">netstat</span> <span class="token parameter variable">-tuln</span><span class="token comment"># 网络抓包</span>tcpdump <span class="token parameter variable">-i</span> eth0 port <span class="token number">80</span>wireshark<span class="token comment"># 应用层监控</span><span class="token function">curl</span> <span class="token parameter variable">-w</span> <span class="token string">"@curl-format.txt"</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-s</span> www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-性能分析工具"><a href="#5-3-2-性能分析工具" class="headerlink" title="5.3.2 性能分析工具"></a>5.3.2 性能分析工具</h4><p><strong>Web性能分析：</strong></p><ul><li><strong>WebPageTest</strong>：在线性能测试</li><li><strong>Lighthouse</strong>：Google性能审计工具</li><li><strong>GTmetrix</strong>：网站性能分析</li><li><strong>Pingdom</strong>：网站监控服务</li></ul><p><strong>网络性能分析：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 分析HTTP请求</span><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Accept-Encoding: gzip"</span> <span class="token parameter variable">-I</span> www.example.com<span class="token comment"># 测试SSL/TLS性能</span>openssl s_client <span class="token parameter variable">-connect</span> www.example.com:443<span class="token comment"># DNS性能测试</span><span class="token function">dig</span> www.example.com<span class="token function">nslookup</span> www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-高并发网络优化"><a href="#5-4-高并发网络优化" class="headerlink" title="5.4 高并发网络优化"></a>5.4 高并发网络优化</h3><h4 id="5-4-1-连接池优化"><a href="#5-4-1-连接池优化" class="headerlink" title="5.4.1 连接池优化"></a>5.4.1 连接池优化</h4><p><strong>数据库连接池：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HikariConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMinimumIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span><span class="token number">600000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxLifetime</span><span class="token punctuation">(</span><span class="token number">1800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>HTTP连接池：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PoolingHttpClientConnectionManager</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cm<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cm<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CloseableHttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-异步处理优化"><a href="#5-4-2-异步处理优化" class="headerlink" title="5.4.2 异步处理优化"></a>5.4.2 异步处理优化</h4><p><strong>NIO优化：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServerSocketChannel</span> serverChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理IO事件</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Netty优化：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerBootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六章：网络安全与优化"><a href="#第六章：网络安全与优化" class="headerlink" title="第六章：网络安全与优化"></a>第六章：网络安全与优化</h2><h3 id="6-1-网络安全威胁"><a href="#6-1-网络安全威胁" class="headerlink" title="6.1 网络安全威胁"></a>6.1 网络安全威胁</h3><h4 id="6-1-1-常见网络攻击"><a href="#6-1-1-常见网络攻击" class="headerlink" title="6.1.1 常见网络攻击"></a>6.1.1 常见网络攻击</h4><p><strong>DDoS攻击类型：</strong></p><ul><li><strong>SYN Flood</strong>：耗尽服务器连接队列</li><li><strong>UDP Flood</strong>：耗尽网络带宽</li><li><strong>HTTP Flood</strong>：耗尽应用资源</li><li><strong>DNS放大攻击</strong>：利用DNS响应放大攻击流量</li></ul><p><strong>防护策略：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 限制连接数</span><span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=api:10m rate=10r/s</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$binary_remote_addr</span> zone=addr:10m</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">limit_req</span> zone=api burst=20 nodelay</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">limit_conn</span> addr <span class="token number">10</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-安全优化措施"><a href="#6-2-安全优化措施" class="headerlink" title="6.2 安全优化措施"></a>6.2 安全优化措施</h3><h4 id="6-2-1-SSL-TLS优化"><a href="#6-2-1-SSL-TLS优化" class="headerlink" title="6.2.1 SSL&#x2F;TLS优化"></a>6.2.1 SSL&#x2F;TLS优化</h4><p><strong>安全配置：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 禁用不安全的协议和算法</span><span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span><span class="token comment"># 启用OCSP Stapling</span><span class="token directive"><span class="token keyword">ssl_stapling</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">ssl_stapling_verify</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment"># 启用HSTS</span><span class="token directive"><span class="token keyword">add_header</span> Strict-Transport-Security <span class="token string">"max-age=63072000"</span> always</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-WAF配置"><a href="#6-2-2-WAF配置" class="headerlink" title="6.2.2 WAF配置"></a>6.2.2 WAF配置</h4><p><strong>ModSecurity规则示例：</strong></p><pre class="line-numbers language-apache" data-language="apache"><code class="language-apache"># 防止SQL注入SecRule ARGS &quot;@detectSQLi&quot; \    &quot;id:1001,phase:2,block,msg:&#39;SQL Injection Attack Detected&#39;&quot;# 防止XSS攻击SecRule ARGS &quot;@detectXSS&quot; \    &quot;id:1002,phase:2,block,msg:&#39;XSS Attack Detected&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七章：实战案例分析"><a href="#第七章：实战案例分析" class="headerlink" title="第七章：实战案例分析"></a>第七章：实战案例分析</h2><h3 id="7-1-高并发网站架构"><a href="#7-1-高并发网站架构" class="headerlink" title="7.1 高并发网站架构"></a>7.1 高并发网站架构</h3><h4 id="7-1-1-电商网站架构"><a href="#7-1-1-电商网站架构" class="headerlink" title="7.1.1 电商网站架构"></a>7.1.1 电商网站架构</h4><p><strong>架构层次：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户 → CDN → 负载均衡器 → Web服务器 → 应用服务器 → 缓存层 → 数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>技术选型：</strong></p><ul><li><strong>CDN</strong>：阿里云CDN、腾讯云CDN</li><li><strong>负载均衡</strong>：Nginx、LVS、HAProxy</li><li><strong>Web服务器</strong>：Nginx、Apache</li><li><strong>应用服务器</strong>：Tomcat、Spring Boot</li><li><strong>缓存</strong>：Redis、Memcached</li><li><strong>数据库</strong>：MySQL、MongoDB</li></ul><h4 id="7-1-2-性能优化案例"><a href="#7-1-2-性能优化案例" class="headerlink" title="7.1.2 性能优化案例"></a>7.1.2 性能优化案例</h4><p><strong>案例：某电商大促优化</strong></p><p><strong>问题分析：</strong></p><ul><li>页面加载时间：8秒</li><li>并发连接数：5000</li><li>数据库QPS：20000</li></ul><p><strong>优化措施：</strong></p><ol><li><strong>CDN优化</strong>：静态资源CDN化，减少80%回源流量</li><li><strong>连接池优化</strong>：数据库连接池从50调整到200</li><li><strong>缓存优化</strong>：Redis缓存命中率提升到95%</li><li><strong>负载均衡</strong>：从轮询改为最少连接算法</li></ol><p><strong>优化结果：</strong></p><ul><li>页面加载时间：8秒 → 2秒</li><li>并发连接数：5000 → 20000</li><li>数据库QPS：20000 → 5000</li></ul><h3 id="7-2-微服务网络优化"><a href="#7-2-微服务网络优化" class="headerlink" title="7.2 微服务网络优化"></a>7.2 微服务网络优化</h3><h4 id="7-2-1-Service-Mesh架构"><a href="#7-2-1-Service-Mesh架构" class="headerlink" title="7.2.1 Service Mesh架构"></a>7.2.1 Service Mesh架构</h4><p><strong>Istio网络优化：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> productpage  <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>    <span class="token key atrule">connectionPool</span><span class="token punctuation">:</span>      <span class="token key atrule">tcp</span><span class="token punctuation">:</span>        <span class="token key atrule">maxConnections</span><span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">http1MaxPendingRequests</span><span class="token punctuation">:</span> <span class="token number">50</span>        <span class="token key atrule">maxRequestsPerConnection</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">consistentHash</span><span class="token punctuation">:</span>        <span class="token key atrule">httpCookie</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"session-affinity"</span>          <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 3600s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-2-服务网格性能监控"><a href="#7-2-2-服务网格性能监控" class="headerlink" title="7.2.2 服务网格性能监控"></a>7.2.2 服务网格性能监控</h4><p><strong>监控指标：</strong></p><ul><li>请求延迟：P50、P95、P99</li><li>错误率：4xx、5xx错误比例</li><li>吞吐量：RPS（Requests Per Second）</li><li>连接数：活跃连接数、连接池使用率</li></ul><h2 id="第八章：面试真题解析"><a href="#第八章：面试真题解析" class="headerlink" title="第八章：面试真题解析"></a>第八章：面试真题解析</h2><h3 id="8-1-HTTP-HTTPS高频面试题"><a href="#8-1-HTTP-HTTPS高频面试题" class="headerlink" title="8.1 HTTP&#x2F;HTTPS高频面试题"></a>8.1 HTTP&#x2F;HTTPS高频面试题</h3><h4 id="8-1-1-HTTPS握手过程"><a href="#8-1-1-HTTPS握手过程" class="headerlink" title="8.1.1 HTTPS握手过程"></a>8.1.1 HTTPS握手过程</h4><p><strong>详细步骤：</strong></p><ol><li>客户端发送Client Hello</li><li>服务器返回Server Hello + 证书</li><li>客户端验证证书</li><li>密钥交换（ECDHE）</li><li>生成会话密钥</li><li>完成握手</li></ol><p><strong>性能优化：</strong></p><ul><li>会话复用（Session Resumption）</li><li>OCSP Stapling</li><li>HSTS预加载</li><li>TLS 1.3（0-RTT）</li></ul><h4 id="8-1-2-HTTP-2-vs-HTTP-1-1"><a href="#8-1-2-HTTP-2-vs-HTTP-1-1" class="headerlink" title="8.1.2 HTTP&#x2F;2 vs HTTP&#x2F;1.1"></a>8.1.2 HTTP&#x2F;2 vs HTTP&#x2F;1.1</h4><p><strong>HTTP&#x2F;2优势：</strong></p><ul><li>二进制分帧：减少解析开销</li><li>多路复用：解决队头阻塞</li><li>头部压缩：HPACK算法</li><li>服务器推送：减少RTT</li></ul><p><strong>HTTP&#x2F;2限制：</strong></p><ul><li>队头阻塞依然存在（TCP层）</li><li>需要HTTPS支持</li><li>服务器推送可能浪费带宽</li></ul><h3 id="8-2-TCP-IP高频面试题"><a href="#8-2-TCP-IP高频面试题" class="headerlink" title="8.2 TCP&#x2F;IP高频面试题"></a>8.2 TCP&#x2F;IP高频面试题</h3><h4 id="8-2-1-TCP三次握手详解"><a href="#8-2-1-TCP三次握手详解" class="headerlink" title="8.2.1 TCP三次握手详解"></a>8.2.1 TCP三次握手详解</h4><p><strong>为什么需要三次握手？</strong></p><ol><li><strong>防止历史连接</strong>：避免已失效的连接请求</li><li><strong>同步序列号</strong>：确保双方初始序列号同步</li><li><strong>验证全双工</strong>：确认双方收发能力正常</li></ol><p><strong>SYN Flood攻击防护：</strong></p><ul><li>SYN Cookie：不分配资源直到收到ACK</li><li>SYN Cache：使用哈希表存储半连接</li><li>防火墙限速：限制SYN包频率</li></ul><h4 id="8-2-2-TCP滑动窗口机制"><a href="#8-2-2-TCP滑动窗口机制" class="headerlink" title="8.2.2 TCP滑动窗口机制"></a>8.2.2 TCP滑动窗口机制</h4><p><strong>窗口大小计算：</strong></p><pre class="line-numbers language-none"><code class="language-none">发送窗口 &#x3D; min(拥塞窗口, 接收窗口)拥塞窗口：发送方根据网络拥塞控制接收窗口：接收方根据缓冲区大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>窗口探测机制：</strong></p><ul><li>零窗口探测：当接收窗口为0时</li><li>窗口更新：接收方窗口变化时通知发送方</li></ul><h3 id="8-3-DNS与负载均衡面试题"><a href="#8-3-DNS与负载均衡面试题" class="headerlink" title="8.3 DNS与负载均衡面试题"></a>8.3 DNS与负载均衡面试题</h3><h4 id="8-3-1-DNS解析过程详解"><a href="#8-3-1-DNS解析过程详解" class="headerlink" title="8.3.1 DNS解析过程详解"></a>8.3.1 DNS解析过程详解</h4><p><strong>完整解析流程：</strong></p><pre class="line-numbers language-none"><code class="language-none">浏览器缓存 → 系统缓存 → hosts文件 → 本地DNS → 根服务器 → TLD服务器 → 权威服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>DNS优化策略：</strong></p><ul><li>DNS预解析：<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//example.com&quot;&gt;</code></li><li>减少域名数量：避免过多DNS查询</li><li>合理设置TTL：平衡性能和可用性</li></ul><h4 id="8-3-2-负载均衡算法对比"><a href="#8-3-2-负载均衡算法对比" class="headerlink" title="8.3.2 负载均衡算法对比"></a>8.3.2 负载均衡算法对比</h4><p><strong>算法选择场景：</strong></p><ul><li><strong>轮询</strong>：服务器性能相近</li><li><strong>加权轮询</strong>：服务器性能差异大</li><li><strong>最少连接</strong>：长连接应用</li><li><strong>IP哈希</strong>：需要会话保持</li><li><strong>一致性哈希</strong>：分布式缓存</li></ul><h3 id="8-4-网络优化面试题"><a href="#8-4-网络优化面试题" class="headerlink" title="8.4 网络优化面试题"></a>8.4 网络优化面试题</h3><h4 id="8-4-1-CDN优化策略"><a href="#8-4-1-CDN优化策略" class="headerlink" title="8.4.1 CDN优化策略"></a>8.4.1 CDN优化策略</h4><p><strong>CDN缓存策略：</strong></p><ul><li>静态资源：长时间缓存（1年）</li><li>HTML文件：短时间缓存或协商缓存</li><li>API接口：根据业务需求设置</li></ul><p><strong>CDN回源优化：</strong></p><ul><li>合并回源：减少回源请求数</li><li>预热机制：提前加载热门内容</li><li>智能压缩：Brotli、Gzip压缩</li></ul><h4 id="8-4-2-高并发网络优化"><a href="#8-4-2-高并发网络优化" class="headerlink" title="8.4.2 高并发网络优化"></a>8.4.2 高并发网络优化</h4><p><strong>连接优化：</strong></p><ul><li>连接池：复用TCP连接</li><li>HTTP&#x2F;2：多路复用减少连接数</li><li>域名分片：突破浏览器并发限制</li></ul><p><strong>传输优化：</strong></p><ul><li>压缩：Gzip、Brotli压缩文本</li><li>缓存：强缓存、协商缓存</li><li>预加载：关键资源提前加载</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>计算机网络是一个复杂的系统工程，涉及多个协议层级的协同工作。本文系统梳理了：</p><ol><li><strong>HTTP&#x2F;HTTPS</strong>：协议演进、握手过程、性能优化</li><li><strong>TCP&#x2F;IP</strong>：三次握手、四次挥手、拥塞控制</li><li><strong>DNS</strong>：解析过程、缓存机制、安全扩展</li><li><strong>负载均衡</strong>：算法选择、高可用方案、配置优化</li><li><strong>网络优化</strong>：CDN、协议优化、性能监控</li><li><strong>安全防护</strong>：DDoS防护、SSL优化、WAF配置</li></ol><p>掌握这些知识点不仅有助于技术面试，更重要的是能够构建高性能、高可用的网络系统。建议结合实际项目进行实践，通过工具进行性能测试和优化。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《计算机网络：自顶向下方法》- James F. Kurose &amp; Keith W. Ross</li><li>《HTTP权威指南》- David Gourley &amp; Brian Totty</li><li>《TCP&#x2F;IP详解》- W. Richard Stevens</li><li>《高性能网站建设指南》- Steve Souders</li><li>《Web性能权威指南》- Ilya Grigorik</li><li>Cloudflare网络优化最佳实践</li><li>AWS网络架构设计指南</li><li>Nginx官方文档</li></ol><hr><p><em>本文档持续更新，如有错误或建议，欢迎指正。</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> DNS </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 网络优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法笔试核心知识点详解</title>
      <link href="/2025/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法笔试核心知识点详解"><a href="#数据结构与算法笔试核心知识点详解" class="headerlink" title="数据结构与算法笔试核心知识点详解"></a>数据结构与算法笔试核心知识点详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构与算法是计算机科学的核心基础，也是技术笔试面试中的必考内容。本文将系统梳理链表、树、图、哈希表、排序算法等核心知识点，结合典型面试题型进行深入解析，帮助读者全面掌握笔试必备技能。</p><h2 id="第一章：链表（Linked-List）"><a href="#第一章：链表（Linked-List）" class="headerlink" title="第一章：链表（Linked List）"></a>第一章：链表（Linked List）</h2><h3 id="1-1-链表基础概念"><a href="#1-1-链表基础概念" class="headerlink" title="1.1 链表基础概念"></a>1.1 链表基础概念</h3><p>链表是一种线性数据结构，由一系列节点组成，每个节点包含数据域和指针域。相比数组，链表具有动态扩容、插入删除高效的优势。</p><h4 id="1-1-1-链表分类"><a href="#1-1-1-链表分类" class="headerlink" title="1.1.1 链表分类"></a>1.1.1 链表分类</h4><p><strong>单链表（Singly Linked List）</strong></p><ul><li>每个节点只有一个指向下一节点的指针</li><li>只能单向遍历</li><li>结构简单，内存占用少</li></ul><p><strong>双链表（Doubly Linked List）</strong></p><ul><li>每个节点有两个指针：prev和next</li><li>支持双向遍历</li><li>插入删除操作更灵活</li></ul><p><strong>循环链表（Circular Linked List）</strong></p><ul><li>尾节点指针指向头节点</li><li>可以循环遍历</li><li>常用于实现队列等数据结构</li></ul><h3 id="1-2-链表核心操作"><a href="#1-2-链表核心操作" class="headerlink" title="1.2 链表核心操作"></a>1.2 链表核心操作</h3><h4 id="1-2-1-单链表节点定义"><a href="#1-2-1-单链表节点定义" class="headerlink" title="1.2.1 单链表节点定义"></a>1.2.1 单链表节点定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-链表反转（经典面试题）"><a href="#1-2-2-链表反转（经典面试题）" class="headerlink" title="1.2.2 链表反转（经典面试题）"></a>1.2.2 链表反转（经典面试题）</h4><p><strong>迭代法实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> nextTemp <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>        curr <span class="token operator">=</span> nextTemp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归法实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseListRecursive</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> reversed <span class="token operator">=</span> <span class="token function">reverseListRecursive</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reversed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-链表环检测（快慢指针法）"><a href="#1-2-3-链表环检测（快慢指针法）" class="headerlink" title="1.2.3 链表环检测（快慢指针法）"></a>1.2.3 链表环检测（快慢指针法）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 找到环的入口</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 检测是否有环</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 找到环入口</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-合并两个有序链表"><a href="#1-2-4-合并两个有序链表" class="headerlink" title="1.2.4 合并两个有序链表"></a>1.2.4 合并两个有序链表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-链表高频面试题"><a href="#1-3-链表高频面试题" class="headerlink" title="1.3 链表高频面试题"></a>1.3 链表高频面试题</h3><ol><li><strong>删除链表的倒数第N个节点</strong></li><li><strong>链表的中间节点</strong></li><li><strong>回文链表判断</strong></li><li><strong>链表相交节点查找</strong></li><li><strong>复杂链表的复制</strong></li></ol><h2 id="第二章：树结构（Tree）"><a href="#第二章：树结构（Tree）" class="headerlink" title="第二章：树结构（Tree）"></a>第二章：树结构（Tree）</h2><h3 id="2-1-树结构基础概念"><a href="#2-1-树结构基础概念" class="headerlink" title="2.1 树结构基础概念"></a>2.1 树结构基础概念</h3><p>树是一种非线性数据结构，由节点和边组成，具有层次关系。在计算机科学中广泛应用，如文件系统、数据库索引等。</p><h4 id="2-1-1-二叉树分类"><a href="#2-1-1-二叉树分类" class="headerlink" title="2.1.1 二叉树分类"></a>2.1.1 二叉树分类</h4><p><strong>二叉树（Binary Tree）</strong></p><ul><li>每个节点最多有两个子节点</li><li>子节点分为左孩子和右孩子</li></ul><p><strong>二叉搜索树（BST）</strong></p><ul><li>左子树所有节点值小于根节点值</li><li>右子树所有节点值大于根节点值</li><li>中序遍历结果为有序序列</li></ul><p><strong>平衡二叉树（AVL Tree）</strong></p><ul><li>任意节点的左右子树高度差不超过1</li><li>通过旋转操作保持平衡</li><li>查找、插入、删除时间复杂度O(log n)</li></ul><h4 id="2-1-2-二叉树节点定义"><a href="#2-1-2-二叉树节点定义" class="headerlink" title="2.1.2 二叉树节点定义"></a>2.1.2 二叉树节点定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-二叉树遍历算法"><a href="#2-2-二叉树遍历算法" class="headerlink" title="2.2 二叉树遍历算法"></a>2.2 二叉树遍历算法</h3><h4 id="2-2-1-前序遍历（根-左-右）"><a href="#2-2-1-前序遍历（根-左-右）" class="headerlink" title="2.2.1 前序遍历（根-左-右）"></a>2.2.1 前序遍历（根-左-右）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归实现</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 迭代实现</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorderTraversalIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-中序遍历（左-根-右）"><a href="#2-2-2-中序遍历（左-根-右）" class="headerlink" title="2.2.2 中序遍历（左-根-右）"></a>2.2.2 中序遍历（左-根-右）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归实现</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 迭代实现</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorderTraversalIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> curr <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                curr <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-后序遍历（左-右-根）"><a href="#2-2-3-后序遍历（左-右-根）" class="headerlink" title="2.2.3 后序遍历（左-右-根）"></a>2.2.3 后序遍历（左-右-根）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归实现</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 迭代实现（双栈法）</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorderTraversalIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-二叉搜索树操作"><a href="#2-3-二叉搜索树操作" class="headerlink" title="2.3 二叉搜索树操作"></a>2.3 二叉搜索树操作</h3><h4 id="2-3-1-插入操作"><a href="#2-3-1-插入操作" class="headerlink" title="2.3.1 插入操作"></a>2.3.1 插入操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-查找操作"><a href="#2-3-2-查找操作" class="headerlink" title="2.3.2 查找操作"></a>2.3.2 查找操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-平衡二叉树（AVL-Tree）"><a href="#2-4-平衡二叉树（AVL-Tree）" class="headerlink" title="2.4 平衡二叉树（AVL Tree）"></a>2.4 平衡二叉树（AVL Tree）</h3><h4 id="2-4-1-AVL树节点定义"><a href="#2-4-1-AVL树节点定义" class="headerlink" title="2.4.1 AVL树节点定义"></a>2.4.1 AVL树节点定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AVLTreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token class-name">AVLTreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">AVLTreeNode</span> right<span class="token punctuation">;</span>        <span class="token class-name">AVLTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-旋转操作"><a href="#2-4-2-旋转操作" class="headerlink" title="2.4.2 旋转操作"></a>2.4.2 旋转操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 右旋</span><span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AVLTreeNode</span> x <span class="token operator">=</span> y<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token class-name">AVLTreeNode</span> <span class="token constant">T2</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">// 执行旋转</span>    x<span class="token punctuation">.</span>right <span class="token operator">=</span> y<span class="token punctuation">;</span>    y<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">T2</span><span class="token punctuation">;</span>        <span class="token comment">// 更新高度</span>    y<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左旋</span><span class="token keyword">private</span> <span class="token class-name">AVLTreeNode</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AVLTreeNode</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token class-name">AVLTreeNode</span> <span class="token constant">T2</span> <span class="token operator">=</span> y<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">// 执行旋转</span>    y<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>    x<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">T2</span><span class="token punctuation">;</span>        <span class="token comment">// 更新高度</span>    x<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    y<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> node<span class="token punctuation">.</span>height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token class-name">AVLTreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-B树与B-树"><a href="#2-5-B树与B-树" class="headerlink" title="2.5 B树与B+树"></a>2.5 B树与B+树</h3><h4 id="2-5-1-B树特点"><a href="#2-5-1-B树特点" class="headerlink" title="2.5.1 B树特点"></a>2.5.1 B树特点</h4><ul><li>多路平衡查找树</li><li>每个节点可以有多个子节点</li><li>所有叶子节点在同一层</li><li>常用于文件系统和数据库索引</li></ul><h4 id="2-5-2-B-树特点"><a href="#2-5-2-B-树特点" class="headerlink" title="2.5.2 B+树特点"></a>2.5.2 B+树特点</h4><ul><li>B树的变种，所有数据存储在叶子节点</li><li>叶子节点通过指针连接，支持顺序访问</li><li>非叶子节点只存储索引信息</li><li>更适合范围查询和磁盘存储</li></ul><h4 id="2-5-3-B树与B-树对比"><a href="#2-5-3-B树与B-树对比" class="headerlink" title="2.5.3 B树与B+树对比"></a>2.5.3 B树与B+树对比</h4><table><thead><tr><th>特性</th><th>B树</th><th>B+树</th></tr></thead><tbody><tr><td>数据存储</td><td>所有节点</td><td>仅叶子节点</td></tr><tr><td>范围查询</td><td>效率低</td><td>效率高</td></tr><tr><td>磁盘IO</td><td>较多</td><td>较少</td></tr><tr><td>应用场景</td><td>内存存储</td><td>磁盘存储</td></tr></tbody></table><h2 id="第三章：图结构（Graph）"><a href="#第三章：图结构（Graph）" class="headerlink" title="第三章：图结构（Graph）"></a>第三章：图结构（Graph）</h2><h3 id="3-1-图基础概念"><a href="#3-1-图基础概念" class="headerlink" title="3.1 图基础概念"></a>3.1 图基础概念</h3><p>图是由顶点（Vertex）和边（Edge）组成的非线性数据结构，用于表示对象之间的关系。</p><h4 id="3-1-1-图分类"><a href="#3-1-1-图分类" class="headerlink" title="3.1.1 图分类"></a>3.1.1 图分类</h4><p><strong>无向图（Undirected Graph）</strong></p><ul><li>边没有方向</li><li>边表示双向关系</li></ul><p><strong>有向图（Directed Graph）</strong></p><ul><li>边有方向</li><li>边表示单向关系</li></ul><p><strong>加权图（Weighted Graph）</strong></p><ul><li>边带有权重值</li><li>表示关系的强度或成本</li></ul><h3 id="3-2-图的表示方法"><a href="#3-2-图的表示方法" class="headerlink" title="3.2 图的表示方法"></a>3.2 图的表示方法</h3><h4 id="3-2-1-邻接矩阵"><a href="#3-2-1-邻接矩阵" class="headerlink" title="3.2.1 邻接矩阵"></a>3.2.1 邻接矩阵</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GraphAdjMatrix</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> adjMatrix<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numVertices<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">GraphAdjMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> numVertices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numVertices <span class="token operator">=</span> numVertices<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adjMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>numVertices<span class="token punctuation">]</span><span class="token punctuation">[</span>numVertices<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        adjMatrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无向图</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adjMatrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> adjMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-邻接表"><a href="#3-2-2-邻接表" class="headerlink" title="3.2.2 邻接表"></a>3.2.2 邻接表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GraphAdjList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adjList<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">GraphAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjList<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> k <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        adjList<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> k <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无向图</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> adjList<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-图遍历算法"><a href="#3-3-图遍历算法" class="headerlink" title="3.3 图遍历算法"></a>3.3 图遍历算法</h3><h4 id="3-3-1-深度优先搜索（DFS）"><a href="#3-3-1-深度优先搜索（DFS）" class="headerlink" title="3.3.1 深度优先搜索（DFS）"></a>3.3.1 深度优先搜索（DFS）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DFS</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">GraphAdjList</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfsHelper</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfsHelper</span><span class="token punctuation">(</span><span class="token class-name">GraphAdjList</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vertex <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">getNeighbors</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfsHelper</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用栈的迭代实现</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfsIterative</span><span class="token punctuation">(</span><span class="token class-name">GraphAdjList</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> vertex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vertex <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 逆序压栈，保证顺序访问</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> neighbors <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getNeighbors</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> neighbors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> neighbor <span class="token operator">=</span> neighbors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-广度优先搜索（BFS）"><a href="#3-3-2-广度优先搜索（BFS）" class="headerlink" title="3.3.2 广度优先搜索（BFS）"></a>3.3.2 广度优先搜索（BFS）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BFS</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token class-name">GraphAdjList</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> vertex <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vertex <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">getNeighbors</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-最短路径算法"><a href="#3-4-最短路径算法" class="headerlink" title="3.4 最短路径算法"></a>3.4 最短路径算法</h3><h4 id="3-4-1-Dijkstra算法"><a href="#3-4-1-Dijkstra算法" class="headerlink" title="3.4.1 Dijkstra算法"></a>3.4.1 Dijkstra算法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dijkstra</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">findMinDistance</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">&amp;&amp;</span>                     dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findMinDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> minIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四章：哈希表（Hash-Table）"><a href="#第四章：哈希表（Hash-Table）" class="headerlink" title="第四章：哈希表（Hash Table）"></a>第四章：哈希表（Hash Table）</h2><h3 id="4-1-哈希表基础概念"><a href="#4-1-哈希表基础概念" class="headerlink" title="4.1 哈希表基础概念"></a>4.1 哈希表基础概念</h3><p>哈希表通过哈希函数将键映射到数组索引，实现O(1)时间复杂度的查找、插入和删除操作。</p><h4 id="4-1-1-哈希函数设计原则"><a href="#4-1-1-哈希函数设计原则" class="headerlink" title="4.1.1 哈希函数设计原则"></a>4.1.1 哈希函数设计原则</h4><ol><li><strong>确定性</strong>：相同输入产生相同输出</li><li><strong>高效性</strong>：计算速度快</li><li><strong>均匀性</strong>：均匀分布，减少冲突</li><li><strong>雪崩效应</strong>：输入微小变化导致输出巨大变化</li></ol><h4 id="4-1-2-冲突解决方法"><a href="#4-1-2-冲突解决方法" class="headerlink" title="4.1.2 冲突解决方法"></a>4.1.2 冲突解决方法</h4><p><strong>链地址法（Separate Chaining）</strong></p><ul><li>每个桶使用链表存储冲突元素</li><li>简单实现，动态扩容容易</li><li>内存利用率较低</li></ul><p><strong>开放地址法（Open Addressing）</strong></p><ul><li>冲突时寻找下一个可用位置</li><li>包括线性探测、二次探测、双重哈希</li><li>内存利用率高，但删除操作复杂</li></ul><h3 id="4-2-Java中的哈希表实现"><a href="#4-2-Java中的哈希表实现" class="headerlink" title="4.2 Java中的哈希表实现"></a>4.2 Java中的哈希表实现</h3><h4 id="4-2-1-HashMap源码分析"><a href="#4-2-1-HashMap源码分析" class="headerlink" title="4.2.1 HashMap源码分析"></a>4.2.1 HashMap源码分析</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// HashMap核心结构</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认初始容量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>        <span class="token comment">// 默认负载因子</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>        <span class="token comment">// 链表转红黑树的阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">// 红黑树转链表的阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment">// 最小树化容量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token comment">// 核心数据结构</span>    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment">// 节点定义</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-ConcurrentHashMap线程安全实现"><a href="#4-2-2-ConcurrentHashMap线程安全实现" class="headerlink" title="4.2.2 ConcurrentHashMap线程安全实现"></a>4.2.2 ConcurrentHashMap线程安全实现</h4><p><strong>JDK 1.7实现：分段锁</strong></p><ul><li>将数据分成多个段（Segment）</li><li>每个段相当于小的HashMap</li><li>不同段可以并发操作</li></ul><p><strong>JDK 1.8实现：CAS + synchronized</strong></p><ul><li>使用CAS操作保证线程安全</li><li>链表长度超过8时转为红黑树</li><li>性能更优，并发度更高</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ConcurrentHashMap核心方法</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-哈希冲突解决策略详解"><a href="#4-3-哈希冲突解决策略详解" class="headerlink" title="4.3 哈希冲突解决策略详解"></a>4.3 哈希冲突解决策略详解</h3><h4 id="4-3-1-链地址法实现"><a href="#4-3-1-链地址法实现" class="headerlink" title="4.3.1 链地址法实现"></a>4.3.1 链地址法实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainingHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ChainingHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        table <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token constant">INITIAL_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">*</span> <span class="token constant">LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 检查是否已存在</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加新节点</span>        <span class="token function">addNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> oldNode <span class="token operator">:</span> oldTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>oldNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> oldNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                oldNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                newTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> oldNode<span class="token punctuation">;</span>                oldNode <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> <span class="token constant">LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五章：排序算法（Sorting-Algorithms）"><a href="#第五章：排序算法（Sorting-Algorithms）" class="headerlink" title="第五章：排序算法（Sorting Algorithms）"></a>第五章：排序算法（Sorting Algorithms）</h2><h3 id="5-1-排序算法分类与复杂度对比"><a href="#5-1-排序算法分类与复杂度对比" class="headerlink" title="5.1 排序算法分类与复杂度对比"></a>5.1 排序算法分类与复杂度对比</h3><table><thead><tr><th>算法</th><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th><th>适用场景</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n²)</td><td>O(1)</td><td>稳定</td><td>小规模数据</td></tr><tr><td>选择排序</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td><td>小规模数据</td></tr><tr><td>插入排序</td><td>O(n²)</td><td>O(1)</td><td>稳定</td><td>近乎有序数据</td></tr><tr><td>希尔排序</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td><td>中等规模数据</td></tr><tr><td>归并排序</td><td>O(n log n)</td><td>O(n)</td><td>稳定</td><td>大规模数据</td></tr><tr><td>快速排序</td><td>O(n log n)</td><td>O(log n)</td><td>不稳定</td><td>大规模数据</td></tr><tr><td>堆排序</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td><td>大规模数据</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(k)</td><td>稳定</td><td>整数范围小</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>稳定</td><td>均匀分布数据</td></tr><tr><td>基数排序</td><td>O(d(n+k))</td><td>O(n+k)</td><td>稳定</td><td>整数或字符串</td></tr></tbody></table><h3 id="5-2-经典排序算法实现"><a href="#5-2-经典排序算法实现" class="headerlink" title="5.2 经典排序算法实现"></a>5.2 经典排序算法实现</h3><h4 id="5-2-1-快速排序（Quick-Sort）"><a href="#5-2-1-快速排序（Quick-Sort）" class="headerlink" title="5.2.1 快速排序（Quick Sort）"></a>5.2.1 快速排序（Quick Sort）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 选择最后一个元素作为基准</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 小于基准的元素的索引</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 三数取中法优化</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">medianOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2-归并排序（Merge-Sort）"><a href="#5-2-2-归并排序（Merge-Sort）" class="headerlink" title="5.2.2 归并排序（Merge Sort）"></a>5.2.2 归并排序（Merge Sort）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> right <span class="token operator">-</span> mid<span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-堆排序（Heap-Sort）"><a href="#5-2-3-堆排序（Heap-Sort）" class="headerlink" title="5.2.3 堆排序（Heap Sort）"></a>5.2.3 堆排序（Heap Sort）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment">// 构建最大堆</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 一个个从堆中提取元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最大值移到末尾</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新调整剩余元素为最大堆</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment">// 如果左子节点大于根节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            largest <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果右子节点大于当前最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            largest <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果最大值不是根节点，交换并继续调整</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> root<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> heapSize<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-排序算法优化技巧"><a href="#5-3-排序算法优化技巧" class="headerlink" title="5.3 排序算法优化技巧"></a>5.3 排序算法优化技巧</h3><h4 id="5-3-1-快速排序优化"><a href="#5-3-1-快速排序优化" class="headerlink" title="5.3.1 快速排序优化"></a>5.3.1 快速排序优化</h4><ol><li><strong>三数取中法</strong>：选择更好的基准值</li><li><strong>小数组使用插入排序</strong>：减少递归开销</li><li><strong>三向切分</strong>：处理大量重复元素</li><li><strong>尾递归优化</strong>：减少栈空间使用</li></ol><h4 id="5-3-2-归并排序优化"><a href="#5-3-2-归并排序优化" class="headerlink" title="5.3.2 归并排序优化"></a>5.3.2 归并排序优化</h4><ol><li><strong>小数组使用插入排序</strong></li><li><strong>原地归并</strong>：减少空间复杂度</li><li><strong>TimSort</strong>：结合归并和插入排序的优点</li></ol><h2 id="第六章：算法设计技巧"><a href="#第六章：算法设计技巧" class="headerlink" title="第六章：算法设计技巧"></a>第六章：算法设计技巧</h2><h3 id="6-1-双指针技巧"><a href="#6-1-双指针技巧" class="headerlink" title="6.1 双指针技巧"></a>6.1 双指针技巧</h3><p>双指针技巧通过使用两个指针遍历数据结构，将O(n²)的时间复杂度优化到O(n)。</p><h4 id="6-1-1-快慢指针"><a href="#6-1-1-快慢指针" class="headerlink" title="6.1.1 快慢指针"></a>6.1.1 快慢指针</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 链表中间节点查找</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2-左右指针"><a href="#6-1-2-左右指针" class="headerlink" title="6.1.2 左右指针"></a>6.1.2 左右指针</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 两数之和（有序数组）</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-分治算法"><a href="#6-2-分治算法" class="headerlink" title="6.2 分治算法"></a>6.2 分治算法</h3><p>分治法将问题分解为子问题，分别解决后合并结果。</p><h4 id="6-2-1-分治框架"><a href="#6-2-1-分治框架" class="headerlink" title="6.2.1 分治框架"></a>6.2.1 分治框架</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">divideAndConquer</span><span class="token punctuation">(</span><span class="token class-name">Problem</span> problem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基本情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>problem<span class="token punctuation">.</span><span class="token function">isBaseCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> problem<span class="token punctuation">.</span><span class="token function">solveBaseCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 分解问题</span>    <span class="token class-name">Problem</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subProblems <span class="token operator">=</span> problem<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解决子问题</span>    <span class="token class-name">Result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">[</span>subProblems<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subProblems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        subResults<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">divideAndConquer</span><span class="token punctuation">(</span>subProblems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 合并结果</span>    <span class="token keyword">return</span> problem<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>subResults<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-贪心算法"><a href="#6-3-贪心算法" class="headerlink" title="6.3 贪心算法"></a>6.3 贪心算法</h3><p>贪心算法在每一步选择当前最优解，希望最终得到全局最优解。</p><h4 id="6-3-1-贪心算法适用条件"><a href="#6-3-1-贪心算法适用条件" class="headerlink" title="6.3.1 贪心算法适用条件"></a>6.3.1 贪心算法适用条件</h4><ol><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>贪心选择性质</strong>：局部最优选择能导致全局最优解</li></ol><h4 id="6-3-2-经典贪心问题"><a href="#6-3-2-经典贪心问题" class="headerlink" title="6.3.2 经典贪心问题"></a>6.3.2 经典贪心问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 活动选择问题</span><span class="token keyword">class</span> <span class="token class-name">ActivitySelection</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxActivities</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> start<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment">// 按结束时间排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>activities<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastEnd <span class="token operator">=</span> activities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> lastEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                lastEnd <span class="token operator">=</span> activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七章：高频面试真题解析"><a href="#第七章：高频面试真题解析" class="headerlink" title="第七章：高频面试真题解析"></a>第七章：高频面试真题解析</h2><h3 id="7-1-链表高频面试题"><a href="#7-1-链表高频面试题" class="headerlink" title="7.1 链表高频面试题"></a>7.1 链表高频面试题</h3><h4 id="7-1-1-LRU缓存机制"><a href="#7-1-1-LRU缓存机制" class="headerlink" title="7.1.1 LRU缓存机制"></a>7.1.1 LRU缓存机制</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>        <span class="token class-name">Node</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> k<span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> tailNode <span class="token operator">=</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tailNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-树结构高频面试题"><a href="#7-2-树结构高频面试题" class="headerlink" title="7.2 树结构高频面试题"></a>7.2 树结构高频面试题</h3><h4 id="7-2-1-二叉树序列化与反序列化"><a href="#7-2-1-二叉树序列化与反序列化" class="headerlink" title="7.2.1 二叉树序列化与反序列化"></a>7.2.1 二叉树序列化与反序列化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NULL</span> <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEP</span> <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>        <span class="token comment">// 前序遍历序列化</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">serializeHelper</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">SEP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">SEP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 前序遍历反序列化</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">SEP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-图论高频面试题"><a href="#7-3-图论高频面试题" class="headerlink" title="7.3 图论高频面试题"></a>7.3 图论高频面试题</h3><h4 id="7-3-1-课程表问题（拓扑排序）"><a href="#7-3-1-课程表问题（拓扑排序）" class="headerlink" title="7.3.1 课程表问题（拓扑排序）"></a>7.3.1 课程表问题（拓扑排序）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构建邻接表</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算入度</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inDegree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inDegree<span class="token punctuation">[</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 拓扑排序</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> course <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> next <span class="token operator">:</span> adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>inDegree<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> numCourses<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第八章：算法复杂度分析"><a href="#第八章：算法复杂度分析" class="headerlink" title="第八章：算法复杂度分析"></a>第八章：算法复杂度分析</h2><h3 id="8-1-时间复杂度分析"><a href="#8-1-时间复杂度分析" class="headerlink" title="8.1 时间复杂度分析"></a>8.1 时间复杂度分析</h3><h4 id="8-1-1-大O表示法"><a href="#8-1-1-大O表示法" class="headerlink" title="8.1.1 大O表示法"></a>8.1.1 大O表示法</h4><ul><li><strong>O(1)</strong>：常数时间复杂度</li><li><strong>O(log n)</strong>：对数时间复杂度</li><li><strong>O(n)</strong>：线性时间复杂度</li><li><strong>O(n log n)</strong>：线性对数时间复杂度</li><li><strong>O(n²)</strong>：平方时间复杂度</li><li><strong>O(2ⁿ)</strong>：指数时间复杂度</li></ul><h4 id="8-1-2-递归复杂度分析"><a href="#8-1-2-递归复杂度分析" class="headerlink" title="8.1.2 递归复杂度分析"></a>8.1.2 递归复杂度分析</h4><p><strong>主定理（Master Theorem）</strong></p><p>对于形如T(n) &#x3D; aT(n&#x2F;b) + f(n)的递归式：</p><ol><li>如果f(n) &#x3D; O(n^(log_b a - ε))，则T(n) &#x3D; Θ(n^(log_b a))</li><li>如果f(n) &#x3D; Θ(n^(log_b a))，则T(n) &#x3D; Θ(n^(log_b a) log n)</li><li>如果f(n) &#x3D; Ω(n^(log_b a + ε))，且af(n&#x2F;b) ≤ cf(n)，则T(n) &#x3D; Θ(f(n))</li></ol><h3 id="8-2-空间复杂度分析"><a href="#8-2-空间复杂度分析" class="headerlink" title="8.2 空间复杂度分析"></a>8.2 空间复杂度分析</h3><ul><li><strong>O(1)</strong>：原地算法</li><li><strong>O(n)</strong>：需要额外线性空间</li><li><strong>O(log n)</strong>：递归调用栈空间</li><li><strong>O(n²)</strong>：二维数组存储</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数据结构与算法是计算机科学的核心基础，掌握这些知识点对于技术面试和实际开发都至关重要。本文系统梳理了：</p><ol><li><strong>链表</strong>：单链表、双链表、循环链表的核心操作和经典题型</li><li><strong>树结构</strong>：二叉树、BST、AVL树、B树、B+树的原理和实现</li><li><strong>图结构</strong>：图的表示、遍历算法和最短路径算法</li><li><strong>哈希表</strong>：哈希函数设计、冲突解决和Java实现</li><li><strong>排序算法</strong>：各种排序算法的原理、实现和优化技巧</li><li><strong>算法技巧</strong>：双指针、分治、贪心等经典算法设计技巧</li></ol><p>建议读者通过大量刷题来巩固这些知识点，推荐使用LeetCode、力扣等平台进行练习。同时，理解算法背后的思想比死记硬背更重要，要学会举一反三，灵活运用。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《算法导论》- Thomas H. Cormen等</li><li>《数据结构与算法分析》- Mark Allen Weiss</li><li>《算法》- Robert Sedgewick</li><li>LeetCode官方题解</li><li>力扣中国官方文档</li><li>《Java数据结构和算法》- Robert Lafore</li></ol><hr><p><em>本文档持续更新，如有错误或建议，欢迎指正。</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 笔试 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM原理深度解析与调优实战</title>
      <link href="/2025/08/18/JVM%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%B8%8E%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
      <url>/2025/08/18/JVM%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%B8%8E%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM原理深度解析与调优实战"><a href="#JVM原理深度解析与调优实战" class="headerlink" title="JVM原理深度解析与调优实战"></a>JVM原理深度解析与调优实战</h1><p>JVM（Java Virtual Machine）是Java程序的运行基石，深入理解JVM原理对于后端开发至关重要。本文将全面剖析JVM的核心机制，帮助读者掌握笔试面试重点，并提供实战调优经验。</p><h2 id="1-JVM内存模型深度解析"><a href="#1-JVM内存模型深度解析" class="headerlink" title="1. JVM内存模型深度解析"></a>1. JVM内存模型深度解析</h2><h3 id="1-1-内存区域划分"><a href="#1-1-内存区域划分" class="headerlink" title="1.1 内存区域划分"></a>1.1 内存区域划分</h3><p>JVM将内存划分为以下几个运行时数据区域：</p><pre class="line-numbers language-none"><code class="language-none">JVM内存结构├── 线程共享区域│   ├── 堆（Heap）│   │   ├── 新生代（Young Generation）│   │   │   ├── Eden区│   │   │   ├── Survivor0区│   │   │   └── Survivor1区│   │   └── 老年代（Old Generation）│   ├── 方法区（Method Area）│   │   ├── 类信息│   │   ├── 常量池│   │   ├── 静态变量│   │   └── JIT代码缓存│   └── 运行时常量池（Runtime Constant Pool）└── 线程私有区域    ├── 程序计数器（Program Counter Register）    ├── 虚拟机栈（JVM Stack）    └── 本地方法栈（Native Method Stack）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-各区域详解与OOM分析"><a href="#1-2-各区域详解与OOM分析" class="headerlink" title="1.2 各区域详解与OOM分析"></a>1.2 各区域详解与OOM分析</h3><h4 id="1-2-1-堆（Heap）"><a href="#1-2-1-堆（Heap）" class="headerlink" title="1.2.1 堆（Heap）"></a>1.2.1 堆（Heap）</h4><p>堆是JVM管理的最大一块内存区域，用于存放对象实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 堆内存配置参数</span><span class="token operator">-</span><span class="token class-name">Xms512m</span>    # 初始堆大小<span class="token operator">-</span><span class="token class-name">Xmx1024m</span>   # 最大堆大小<span class="token operator">-</span><span class="token class-name">Xmn256m</span>    # 新生代大小<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">NewRatio</span><span class="token operator">=</span><span class="token number">2</span>    # 新生代与老年代比例<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span>    # <span class="token class-name">Eden</span>与<span class="token class-name">Survivor</span>比例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆OOM示例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 堆内存溢出示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// JVM参数：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span><span class="token comment">// 错误信息：java.lang.OutOfMemoryError: Java heap space</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-方法区（Method-Area）"><a href="#1-2-2-方法区（Method-Area）" class="headerlink" title="1.2.2 方法区（Method Area）"></a>1.2.2 方法区（Method Area）</h4><p>方法区用于存储已被虚拟机加载的类信息、常量、静态变量等：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法区OOM示例（JDK8前）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaOOM</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MethodAreaOOM</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodAreaOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">OOMObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span>                                           <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建类数量："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 错误信息：java.lang.OutOfMemoryError: Metaspace（JDK8+）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-虚拟机栈（JVM-Stack）"><a href="#1-2-3-虚拟机栈（JVM-Stack）" class="headerlink" title="1.2.3 虚拟机栈（JVM Stack）"></a>1.2.3 虚拟机栈（JVM Stack）</h4><p>每个方法执行时都会创建一个栈帧用于存储局部变量表、操作数栈等：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 栈溢出示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOOM</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StackOOM</span> oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            oom<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈深度："</span> <span class="token operator">+</span> oom<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 错误信息：java.lang.StackOverflowError</span><span class="token comment">// JVM参数：-Xss128k 设置栈大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-对象分配与内存布局"><a href="#1-3-对象分配与内存布局" class="headerlink" title="1.3 对象分配与内存布局"></a>1.3 对象分配与内存布局</h3><h4 id="1-3-1-对象创建过程"><a href="#1-3-1-对象创建过程" class="headerlink" title="1.3.1 对象创建过程"></a>1.3.1 对象创建过程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 对象创建步骤详解</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>类加载检查</strong>：检查类是否已加载、解析、初始化</li><li><strong>分配内存</strong>：<ul><li>指针碰撞（Bump the Pointer）：内存规整时使用</li><li>空闲列表（Free List）：内存碎片较多时使用</li></ul></li><li><strong>初始化零值</strong>：将分配到的内存空间初始化为零值</li><li><strong>设置对象头</strong>：包括哈希码、GC分代年龄、锁状态等</li><li><strong>执行init方法</strong>：按照程序员的意愿初始化对象</li></ol><h4 id="1-3-2-对象内存布局"><a href="#1-3-2-对象内存布局" class="headerlink" title="1.3.2 对象内存布局"></a>1.3.2 对象内存布局</h4><pre class="line-numbers language-none"><code class="language-none">对象内存布局├── 对象头（Header）│   ├── Mark Word（64位系统占8字节）│   │   ├── 哈希码（25位）│   │   ├── GC分代年龄（4位）│   │   ├── 锁状态标志（2位）│   │   ├── 是否偏向锁（1位）│   │   └── 偏向线程ID（23位）│   └── 类型指针（Class Pointer）├── 实例数据（Instance Data）└── 对齐填充（Padding）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-垃圾回收机制深度剖析"><a href="#2-垃圾回收机制深度剖析" class="headerlink" title="2. 垃圾回收机制深度剖析"></a>2. 垃圾回收机制深度剖析</h2><h3 id="2-1-垃圾回收基础理论"><a href="#2-1-垃圾回收基础理论" class="headerlink" title="2.1 垃圾回收基础理论"></a>2.1 垃圾回收基础理论</h3><h4 id="2-1-1-判断对象存活算法"><a href="#2-1-1-判断对象存活算法" class="headerlink" title="2.1.1 判断对象存活算法"></a>2.1.1 判断对象存活算法</h4><p><strong>引用计数法</strong>：</p><ul><li>原理：给对象添加引用计数器，引用时+1，失效时-1</li><li>缺点：无法解决循环引用问题</li></ul><p><strong>可达性分析算法</strong>：</p><ul><li>原理：从GC Roots开始向下搜索，不可达的对象可被回收</li><li>GC Roots包括：<ul><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI引用的对象</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 循环引用示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReferenceCountingGC</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceCountingGC</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>                objA <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        objB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 即使循环引用，也会被回收</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-垃圾回收算法"><a href="#2-1-2-垃圾回收算法" class="headerlink" title="2.1.2 垃圾回收算法"></a>2.1.2 垃圾回收算法</h4><p><strong>标记-清除算法（Mark-Sweep）</strong>：</p><ul><li>标记所有需要回收的对象，然后统一回收</li><li>缺点：效率低、产生内存碎片</li></ul><p><strong>复制算法（Copying）</strong>：</p><ul><li>将内存分为两块，每次使用一块，回收时复制存活对象到另一块</li><li>优点：实现简单、运行高效</li><li>缺点：内存利用率低</li></ul><p><strong>标记-整理算法（Mark-Compact）</strong>：</p><ul><li>标记存活对象，然后将所有存活对象向一端移动，清理边界外内存</li><li>适用于老年代</li></ul><p><strong>分代收集算法</strong>：</p><ul><li>新生代：复制算法</li><li>老年代：标记-清除或标记-整理算法</li></ul><h3 id="2-2-HotSpot垃圾回收器详解"><a href="#2-2-HotSpot垃圾回收器详解" class="headerlink" title="2.2 HotSpot垃圾回收器详解"></a>2.2 HotSpot垃圾回收器详解</h3><h4 id="2-2-1-垃圾回收器概览"><a href="#2-2-1-垃圾回收器概览" class="headerlink" title="2.2.1 垃圾回收器概览"></a>2.2.1 垃圾回收器概览</h4><pre class="line-numbers language-none"><code class="language-none">垃圾回收器分类├── 新生代收集器│   ├── Serial收集器（-XX:+UseSerialGC）│   ├── ParNew收集器（-XX:+UseParNewGC）│   └── Parallel Scavenge（-XX:+UseParallelGC）├── 老年代收集器│   ├── Serial Old收集器│   ├── Parallel Old收集器（-XX:+UseParallelOldGC）│   └── CMS收集器（-XX:+UseConcMarkSweepGC）└── 整堆收集器    ├── G1收集器（-XX:+UseG1GC）    ├── ZGC（JDK11+）    └── Shenandoah（JDK12+）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-CMS收集器详解"><a href="#2-2-2-CMS收集器详解" class="headerlink" title="2.2.2 CMS收集器详解"></a>2.2.2 CMS收集器详解</h4><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器：</p><pre class="line-numbers language-none"><code class="language-none">CMS收集器工作流程├── 初始标记（Initial Mark）│   └── 标记GC Roots能直接关联的对象，需要&quot;Stop The World&quot;├── 并发标记（Concurrent Mark）│   └── 进行GC Roots Tracing，与应用线程并发执行├── 重新标记（Remark）│   └── 修正并发标记期间变动的标记记录，需要&quot;Stop The World&quot;└── 并发清除（Concurrent Sweep）    └── 清除无用对象，与应用线程并发执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CMS优缺点</strong>：</p><ul><li>优点：并发收集、低停顿</li><li>缺点：<ul><li>对CPU资源敏感</li><li>无法处理浮动垃圾</li><li>基于标记-清除算法，会产生内存碎片</li></ul></li></ul><h4 id="2-2-3-G1收集器详解"><a href="#2-2-3-G1收集器详解" class="headerlink" title="2.2.3 G1收集器详解"></a>2.2.3 G1收集器详解</h4><p>G1（Garbage First）收集器是一款面向服务端应用的垃圾收集器：</p><pre class="line-numbers language-none"><code class="language-none">G1收集器特点├── 并行与并发├── 分代收集├── 空间整合（整体基于标记-整理，局部基于复制）├── 可预测的停顿时间模型└── 将整个Java堆划分为多个大小相等的独立区域（Region）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>G1收集器工作流程</strong>：</p><ol><li>初始标记（Initial Marking）</li><li>并发标记（Concurrent Marking）</li><li>最终标记（Final Marking）</li><li>筛选回收（Live Data Counting and Evacuation）</li></ol><h4 id="2-2-4-垃圾回收器对比"><a href="#2-2-4-垃圾回收器对比" class="headerlink" title="2.2.4 垃圾回收器对比"></a>2.2.4 垃圾回收器对比</h4><table><thead><tr><th>收集器</th><th>串行&#x2F;并行&#x2F;并发</th><th>算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>串行</td><td>复制算法</td><td>响应速度优先</td><td>单CPU环境，Client模式</td></tr><tr><td><strong>ParNew</strong></td><td>并行</td><td>复制算法</td><td>响应速度优先</td><td>多CPU环境，配合CMS</td></tr><tr><td><strong>Parallel</strong></td><td>并行</td><td>复制算法</td><td>吞吐量优先</td><td>后台运算，不需要太多交互</td></tr><tr><td><strong>CMS</strong></td><td>并发</td><td>标记-清除</td><td>响应速度优先</td><td>互联网站或B&#x2F;S系统</td></tr><tr><td><strong>G1</strong></td><td>并发</td><td>标记-整理+复制</td><td>响应速度优先</td><td>面向服务端应用</td></tr></tbody></table><h3 id="2-3-Full-GC触发条件"><a href="#2-3-Full-GC触发条件" class="headerlink" title="2.3 Full GC触发条件"></a>2.3 Full GC触发条件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Full GC触发条件总结</span><span class="token number">1.</span> 老年代空间不足<span class="token number">2.</span> 方法区空间不足（<span class="token constant">JDK8</span>前）<span class="token number">3.</span> 调用<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4.</span> <span class="token constant">CMS</span> <span class="token constant">GC</span>时出现promotion failed和concurrent mode failure<span class="token number">5.</span> 统计得到的<span class="token class-name">Minor</span> <span class="token constant">GC</span>晋升到老年代的平均大小大于老年代的剩余空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-类加载机制深度解析"><a href="#3-类加载机制深度解析" class="headerlink" title="3. 类加载机制深度解析"></a>3. 类加载机制深度解析</h2><h3 id="3-1-类加载过程"><a href="#3-1-类加载过程" class="headerlink" title="3.1 类加载过程"></a>3.1 类加载过程</h3><pre class="line-numbers language-none"><code class="language-none">类加载生命周期├── 加载（Loading）├── 验证（Verification）├── 准备（Preparation）├── 解析（Resolution）├── 初始化（Initialization）├── 使用（Using）└── 卸载（Unloading）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-1-加载阶段"><a href="#3-1-1-加载阶段" class="headerlink" title="3.1.1 加载阶段"></a>3.1.1 加载阶段</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 类加载器获取二进制字节流</span><span class="token comment">// 1. 从本地文件系统加载</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.example.MyClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 从网络加载</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://example.com/classes/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URLClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.example.NetworkClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 动态生成</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> <span class="token function">generateClassBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> dynamicClass <span class="token operator">=</span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"DynamicClass"</span><span class="token punctuation">,</span> classBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-验证阶段"><a href="#3-1-2-验证阶段" class="headerlink" title="3.1.2 验证阶段"></a>3.1.2 验证阶段</h4><ul><li>文件格式验证：验证字节流是否符合Class文件格式规范</li><li>元数据验证：对字节码描述的信息进行语义分析</li><li>字节码验证：通过数据流和控制流分析，确保程序语义是合法的</li><li>符号引用验证：确保解析动作能正常执行</li></ul><h4 id="3-1-3-准备阶段"><a href="#3-1-3-准备阶段" class="headerlink" title="3.1.3 准备阶段"></a>3.1.3 准备阶段</h4><p>为类变量分配内存并设置类变量初始值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreparationTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 准备阶段后，value值为0，不是123</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment">// 准备阶段后，value值为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4-解析阶段"><a href="#3-1-4-解析阶段" class="headerlink" title="3.1.4 解析阶段"></a>3.1.4 解析阶段</h4><p>将常量池内的符号引用替换为直接引用：</p><ul><li>类或接口的解析</li><li>字段解析</li><li>类方法解析</li><li>接口方法解析</li></ul><h4 id="3-1-5-初始化阶段"><a href="#3-1-5-初始化阶段" class="headerlink" title="3.1.5 初始化阶段"></a>3.1.5 初始化阶段</h4><p>执行类构造器<code>&lt;clinit&gt;()</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InitializationTest类初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">InitializationTest</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-双亲委派模型"><a href="#3-2-双亲委派模型" class="headerlink" title="3.2 双亲委派模型"></a>3.2 双亲委派模型</h3><pre class="line-numbers language-none"><code class="language-none">类加载器层次结构├── 启动类加载器（Bootstrap ClassLoader）│   └── 加载&lt;JAVA_HOME&gt;&#x2F;lib目录下的类├── 扩展类加载器（Extension ClassLoader）│   └── 加载&lt;JAVA_HOME&gt;&#x2F;lib&#x2F;ext目录下的类├── 应用程序类加载器（Application ClassLoader）│   └── 加载用户类路径（ClassPath）上的类└── 自定义类加载器（User Defined ClassLoader）    └── 用户自定义的类加载器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-1-双亲委派模型实现"><a href="#3-2-1-双亲委派模型实现" class="headerlink" title="3.2.1 双亲委派模型实现"></a>3.2.1 双亲委派模型实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 双亲委派模型的loadClass方法实现</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 首先，检查类是否已经被加载</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 委派给父类加载器加载</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 委派给启动类加载器加载</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 父类加载器无法完成加载请求</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 父类加载器无法加载，调用自身的findClass方法加载</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 记录统计信息</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-破坏双亲委派模型"><a href="#3-2-2-破坏双亲委派模型" class="headerlink" title="3.2.2 破坏双亲委派模型"></a>3.2.2 破坏双亲委派模型</h4><p><strong>第一次破坏</strong>：JDK1.2引入双亲委派模型前，用户自定义类加载器已有loadClass方法</p><p><strong>第二次破坏</strong>：JNDI、JDBC等服务提供者接口（SPI）需要调用启动类加载器无法加载的代码</p><p><strong>第三次破坏</strong>：OSGi为了实现模块化热部署，每个模块都有自己的类加载器</p><h3 id="3-3-类加载优化策略"><a href="#3-3-类加载优化策略" class="headerlink" title="3.3 类加载优化策略"></a>3.3 类加载优化策略</h3><h4 id="3-3-1-预加载策略"><a href="#3-3-1-预加载策略" class="headerlink" title="3.3.1 预加载策略"></a>3.3.1 预加载策略</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 预加载常用类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreloadClasses</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.concurrent.ConcurrentHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-懒加载策略"><a href="#3-3-2-懒加载策略" class="headerlink" title="3.3.2 懒加载策略"></a>3.3.2 懒加载策略</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 单例模式的懒加载实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LazySingleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Holder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-热部署实现"><a href="#3-3-3-热部署实现" class="headerlink" title="3.3.3 热部署实现"></a>3.3.3 热部署实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义类加载器实现热部署</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotDeployClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">URLClassLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HotDeployClassLoader</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> <span class="token function">loadClassBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> classBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token string">"Class "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" not found"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadClassBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> classFile <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token function">findResource</span><span class="token punctuation">(</span>classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Class file not found: "</span> <span class="token operator">+</span> classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ByteArrayOutputStream</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-对象创建与内存分配策略"><a href="#4-对象创建与内存分配策略" class="headerlink" title="4. 对象创建与内存分配策略"></a>4. 对象创建与内存分配策略</h2><h3 id="4-1-对象创建详细过程"><a href="#4-1-对象创建详细过程" class="headerlink" title="4.1 对象创建详细过程"></a>4.1 对象创建详细过程</h3><h4 id="4-1-1-检查加载"><a href="#4-1-1-检查加载" class="headerlink" title="4.1.1 检查加载"></a>4.1.1 检查加载</h4><p>首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已被加载、解析和初始化过。</p><h4 id="4-1-2-分配内存"><a href="#4-1-2-分配内存" class="headerlink" title="4.1.2 分配内存"></a>4.1.2 分配内存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 内存分配方式对比</span><span class="token comment">// 1. 指针碰撞（Bump the Pointer）</span><span class="token comment">// 适用场景：Serial、ParNew等带Compact过程的收集器</span><span class="token comment">// 原理：假设Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器</span><span class="token comment">// 2. 空闲列表（Free List）</span><span class="token comment">// 适用场景：CMS这种基于Mark-Sweep算法的收集器</span><span class="token comment">// 原理：虚拟机维护一个列表，记录哪些内存块是可用的，分配时从列表中找到一块足够大的空间划分给对象实例</span><span class="token comment">// 内存分配并发问题解决</span><span class="token comment">// 方案1：CAS + 失败重试</span><span class="token comment">// 方案2：本地线程分配缓冲（TLAB）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-内存分配实战"><a href="#4-1-3-内存分配实战" class="headerlink" title="4.1.3 内存分配实战"></a>4.1.3 内存分配实战</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JVM参数设置示例</span><span class="token operator">-</span><span class="token class-name">Xms20m</span> <span class="token operator">-</span><span class="token class-name">Xmx20m</span> <span class="token operator">-</span><span class="token class-name">Xmn10m</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCDetails</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span><span class="token comment">// 对象分配示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectAllocationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>                allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 出现一次Minor GC</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// GC日志分析</span><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">[</span><span class="token class-name">DefNew</span><span class="token operator">:</span> <span class="token number">6487</span>K<span class="token operator">-></span><span class="token function">148K</span><span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0038720</span> secs<span class="token punctuation">]</span> <span class="token number">6487</span>K<span class="token operator">-></span><span class="token function">6292K</span><span class="token punctuation">(</span><span class="token number">19456</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0039180</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-内存分配策略"><a href="#4-2-内存分配策略" class="headerlink" title="4.2 内存分配策略"></a>4.2 内存分配策略</h3><h4 id="4-2-1-对象优先在Eden分配"><a href="#4-2-1-对象优先在Eden分配" class="headerlink" title="4.2.1 对象优先在Eden分配"></a>4.2.1 对象优先在Eden分配</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Eden区分配示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EdenAllocation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Minor GC</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-大对象直接进入老年代"><a href="#4-2-2-大对象直接进入老年代" class="headerlink" title="4.2.2 大对象直接进入老年代"></a>4.2.2 大对象直接进入老年代</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 大对象直接分配到老年代</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigObjectToOld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 大对象直接分配到老年代</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// JVM参数：-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:PretenureSizeThreshold=3145728</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-长期存活的对象进入老年代"><a href="#4-2-3-长期存活的对象进入老年代" class="headerlink" title="4.2.3 长期存活的对象进入老年代"></a>4.2.3 长期存活的对象进入老年代</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 长期存活对象晋升到老年代</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongLifeToOld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// JVM参数：-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-JVM并发编程支持机制"><a href="#5-JVM并发编程支持机制" class="headerlink" title="5. JVM并发编程支持机制"></a>5. JVM并发编程支持机制</h2><h3 id="5-1-synchronized锁升级过程"><a href="#5-1-synchronized锁升级过程" class="headerlink" title="5.1 synchronized锁升级过程"></a>5.1 synchronized锁升级过程</h3><h4 id="5-1-1-锁状态演化"><a href="#5-1-1-锁状态演化" class="headerlink" title="5.1.1 锁状态演化"></a>5.1.1 锁状态演化</h4><pre class="line-numbers language-none"><code class="language-none">synchronized锁升级过程├── 无锁状态├── 偏向锁（Biased Locking）│   ├── 偏向第一个获取锁的线程│   └── 通过CAS记录线程ID├── 轻量级锁（Lightweight Locking）│   ├── 线程竞争不激烈时使用│   └── 通过CAS操作获取锁└── 重量级锁（Heavyweight Locking）    ├── 线程竞争激烈时使用    └── 依赖操作系统Mutex Lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-锁升级实战"><a href="#5-1-2-锁升级实战" class="headerlink" title="5.1.2 锁升级实战"></a>5.1.2 锁升级实战</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 锁升级演示</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockEscalationDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 偏向锁</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偏向锁状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 轻量级锁</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"轻量级锁状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重量级锁状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-volatile关键字原理"><a href="#5-2-volatile关键字原理" class="headerlink" title="5.2 volatile关键字原理"></a>5.2 volatile关键字原理</h3><h4 id="5-2-1-内存语义"><a href="#5-2-1-内存语义" class="headerlink" title="5.2.1 内存语义"></a>5.2.1 内存语义</h4><ul><li><strong>可见性</strong>：写volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新到主内存</li><li><strong>有序性</strong>：读volatile变量时，JMM会把该线程对应的本地内存置为无效，从主内存中读取共享变量</li></ul><h4 id="5-2-2-volatile实现原理"><a href="#5-2-2-volatile实现原理" class="headerlink" title="5.2.2 volatile实现原理"></a>5.2.2 volatile实现原理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// volatile示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 写volatile变量</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 读volatile变量</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 汇编代码分析</span><span class="token comment">// 写volatile变量：lock addl $0x0,(%rsp)</span><span class="token comment">// 读volatile变量：mov    0x10(%rsi),%eax</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-Monitor原理"><a href="#5-3-Monitor原理" class="headerlink" title="5.3 Monitor原理"></a>5.3 Monitor原理</h3><h4 id="5-3-1-Monitor结构"><a href="#5-3-1-Monitor结构" class="headerlink" title="5.3.1 Monitor结构"></a>5.3.1 Monitor结构</h4><pre class="line-numbers language-none"><code class="language-none">Monitor结构├── Owner├── EntryList├── WaitSet└── Count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-Monitor实现"><a href="#5-3-2-Monitor实现" class="headerlink" title="5.3.2 Monitor实现"></a>5.3.2 Monitor实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Monitor实现原理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 临界区代码</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                monitor<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 进入WaitSet</span>                monitor<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒EntryList中的线程</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-JVM调优实战"><a href="#6-JVM调优实战" class="headerlink" title="6. JVM调优实战"></a>6. JVM调优实战</h2><h3 id="6-1-调优工具"><a href="#6-1-调优工具" class="headerlink" title="6.1 调优工具"></a>6.1 调优工具</h3><h4 id="6-1-1-命令行工具"><a href="#6-1-1-命令行工具" class="headerlink" title="6.1.1 命令行工具"></a>6.1.1 命令行工具</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jps：查看Java进程</span>jps <span class="token parameter variable">-lvm</span><span class="token comment"># jstat：监控JVM统计信息</span>jstat <span class="token parameter variable">-gc</span> <span class="token number">12345</span> <span class="token number">1000</span> <span class="token number">5</span>  <span class="token comment"># 每1000ms输出一次GC信息，共5次</span><span class="token comment"># jinfo：查看和修改JVM参数</span>jinfo <span class="token parameter variable">-flags</span> <span class="token number">12345</span><span class="token comment"># jmap：内存分析工具</span>jmap <span class="token parameter variable">-histo</span> <span class="token number">12345</span>  <span class="token comment"># 查看堆内存直方图</span>jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>heap.hprof <span class="token number">12345</span>  <span class="token comment"># 生成堆转储文件</span><span class="token comment"># jstack：线程堆栈分析</span>jstack <span class="token number">12345</span> <span class="token operator">></span> thread_dump.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2-可视化工具"><a href="#6-1-2-可视化工具" class="headerlink" title="6.1.2 可视化工具"></a>6.1.2 可视化工具</h4><ul><li><strong>JConsole</strong>：JVM监控与管理控制台</li><li><strong>VisualVM</strong>：功能更强大的可视化工具</li><li><strong>MAT</strong>：内存分析工具</li><li><strong>GCEasy</strong>：在线GC日志分析工具</li></ul><h3 id="6-2-调优案例分析"><a href="#6-2-调优案例分析" class="headerlink" title="6.2 调优案例分析"></a>6.2 调优案例分析</h3><h4 id="6-2-1-高并发场景调优"><a href="#6-2-1-高并发场景调优" class="headerlink" title="6.2.1 高并发场景调优"></a>6.2.1 高并发场景调优</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 高并发Web应用调优案例</span><span class="token comment">// 应用特点：高并发、短生命周期对象多</span><span class="token comment">// JVM参数配置</span><span class="token operator">-</span><span class="token class-name">Xms4g</span> <span class="token operator">-</span><span class="token class-name">Xmx4g</span> <span class="token operator">-</span><span class="token class-name">Xmn2g</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseG1GC</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">200</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">G1HeapRegionSize</span><span class="token operator">=</span><span class="token number">16</span>m<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UnlockExperimentalVMOptions</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCGroupMemoryLimitForHeap</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCDetails</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCTimeStamps</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCApplicationStoppedTime</span><span class="token operator">-</span><span class="token class-name">Xloggc</span><span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>app<span class="token operator">/</span>gc<span class="token punctuation">.</span>log<span class="token comment">// 代码优化</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighConcurrencyService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用对象池减少GC压力</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestContext</span><span class="token punctuation">></span></span> contextPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">BasePooledObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestContext</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">RequestContext</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestContext</span><span class="token punctuation">></span></span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">RequestContext</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RequestContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            context <span class="token operator">=</span> contextPool<span class="token punctuation">.</span><span class="token function">borrowObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理请求</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 异常处理</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                context<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                contextPool<span class="token punctuation">.</span><span class="token function">returnObject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-内存泄漏排查"><a href="#6-2-2-内存泄漏排查" class="headerlink" title="6.2.2 内存泄漏排查"></a>6.2.2 内存泄漏排查</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 内存泄漏排查案例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryLeakDetector</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 生成堆转储文件</span>        <span class="token class-name">String</span> pid <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 2. 使用jmap生成堆转储</span>        <span class="token class-name">Process</span> process <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>            <span class="token string">"jmap -dump:format=b,file=heap.hprof "</span> <span class="token operator">+</span> pid        <span class="token punctuation">)</span><span class="token punctuation">;</span>        process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3. 使用MAT分析</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"堆转储文件已生成：heap.hprof"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用MAT打开文件，查找内存泄漏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 常见内存泄漏场景</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonMemoryLeaks</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 静态集合类导致的内存泄漏</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> staticList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToStaticList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        staticList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对象无法被GC</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 2. 未关闭的资源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resourceLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 忘记关闭流，导致内存泄漏</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 3. 内部类持有外部类引用</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 非静态内部类会隐式持有外部类引用</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 4. ThreadLocal使用不当</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadLocalLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用后未remove</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-性能调优参数总结"><a href="#6-3-性能调优参数总结" class="headerlink" title="6.3 性能调优参数总结"></a>6.3 性能调优参数总结</h3><h4 id="6-3-1-堆内存参数"><a href="#6-3-1-堆内存参数" class="headerlink" title="6.3.1 堆内存参数"></a>6.3.1 堆内存参数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基础参数</span>-Xms<span class="token operator">&lt;</span>size<span class="token operator">></span>        <span class="token comment"># 初始堆大小</span>-Xmx<span class="token operator">&lt;</span>size<span class="token operator">></span>        <span class="token comment"># 最大堆大小</span>-Xmn<span class="token operator">&lt;</span>size<span class="token operator">></span>        <span class="token comment"># 新生代大小</span><span class="token parameter variable">-XX:NewRatio</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span>  <span class="token comment"># 新生代与老年代比例</span><span class="token parameter variable">-XX:SurvivorRatio</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span>  <span class="token comment"># Eden与Survivor比例</span><span class="token comment"># 进阶参数</span><span class="token parameter variable">-XX:PretenureSizeThreshold</span><span class="token operator">=</span><span class="token operator">&lt;</span>size<span class="token operator">></span>  <span class="token comment"># 大对象直接进入老年代阈值</span><span class="token parameter variable">-XX:MaxTenuringThreshold</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span>       <span class="token comment"># 晋升老年代年龄阈值</span><span class="token parameter variable">-XX:+UseTLAB</span>                       <span class="token comment"># 使用TLAB</span><span class="token parameter variable">-XX:TLABSize</span><span class="token operator">=</span><span class="token operator">&lt;</span>size<span class="token operator">></span>               <span class="token comment"># TLAB大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-GC参数"><a href="#6-3-2-GC参数" class="headerlink" title="6.3.2 GC参数"></a>6.3.2 GC参数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Serial收集器</span><span class="token parameter variable">-XX:+UseSerialGC</span><span class="token comment"># ParNew收集器</span><span class="token parameter variable">-XX:+UseParNewGC</span><span class="token parameter variable">-XX:ParNewGCThreads</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token comment"># Parallel收集器</span><span class="token parameter variable">-XX:+UseParallelGC</span><span class="token parameter variable">-XX:+UseParallelOldGC</span><span class="token parameter variable">-XX:ParallelGCThreads</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token parameter variable">-XX:GCTimeRatio</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token comment"># CMS收集器</span><span class="token parameter variable">-XX:+UseConcMarkSweepGC</span><span class="token parameter variable">-XX:CMSInitiatingOccupancyFraction</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token parameter variable">-XX:+UseCMSCompactAtFullCollection</span><span class="token parameter variable">-XX:CMSFullGCsBeforeCompaction</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token comment"># G1收集器</span><span class="token parameter variable">-XX:+UseG1GC</span><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token parameter variable">-XX:G1HeapRegionSize</span><span class="token operator">=</span><span class="token operator">&lt;</span>size<span class="token operator">></span><span class="token parameter variable">-XX:G1NewSizePercent</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token parameter variable">-XX:G1MaxNewSizePercent</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-监控参数"><a href="#6-3-3-监控参数" class="headerlink" title="6.3.3 监控参数"></a>6.3.3 监控参数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GC日志</span><span class="token parameter variable">-XX:+PrintGC</span><span class="token parameter variable">-XX:+PrintGCDetails</span><span class="token parameter variable">-XX:+PrintGCTimeStamps</span><span class="token parameter variable">-XX:+PrintGCApplicationStoppedTime</span>-Xloggc:<span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment"># 堆转储</span><span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span><span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token parameter variable">-XX:+UseGCOverheadLimit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-高频面试题总结"><a href="#7-高频面试题总结" class="headerlink" title="7. 高频面试题总结"></a>7. 高频面试题总结</h2><h3 id="7-1-JVM内存模型相关"><a href="#7-1-JVM内存模型相关" class="headerlink" title="7.1 JVM内存模型相关"></a>7.1 JVM内存模型相关</h3><ol><li><p><strong>JVM内存区域如何划分？各区域作用是什么？</strong></p><ul><li>方法区：存储类信息、常量、静态变量</li><li>堆：存放对象实例</li><li>虚拟机栈：方法调用、局部变量</li><li>本地方法栈：Native方法调用</li><li>程序计数器：当前线程执行的字节码行号指示器</li></ul></li><li><p><strong>堆内存为什么要分代？</strong></p><ul><li>基于弱代假说：绝大多数对象都是朝生夕灭的</li><li>提高垃圾回收效率</li><li>针对不同代采用不同的垃圾回收算法</li></ul></li><li><p><strong>方法区和元空间有什么区别？</strong></p><ul><li>JDK8前：方法区在永久代（PermGen）</li><li>JDK8后：方法区在元空间（Metaspace），使用本地内存</li><li>元空间可以动态扩容，避免OOM</li></ul></li></ol><h3 id="7-2-垃圾回收相关"><a href="#7-2-垃圾回收相关" class="headerlink" title="7.2 垃圾回收相关"></a>7.2 垃圾回收相关</h3><ol><li><p><strong>如何判断对象是否存活？</strong></p><ul><li>引用计数法：无法解决循环引用</li><li>可达性分析：从GC Roots开始，不可达的对象可被回收</li></ul></li><li><p><strong>垃圾回收算法有哪些？</strong></p><ul><li>标记-清除：简单但产生碎片</li><li>复制算法：高效但内存利用率低</li><li>标记-整理：避免碎片，适合老年代</li><li>分代收集：新生代复制，老年代标记-整理</li></ul></li><li><p><strong>CMS和G1收集器的区别？</strong></p><ul><li>CMS：标记-清除，老年代收集器，并发收集</li><li>G1：标记-整理+复制，整堆收集器，可预测停顿时间</li></ul></li><li><p><strong>Full GC触发条件有哪些？</strong></p><ul><li>老年代空间不足</li><li>方法区空间不足</li><li>System.gc()调用</li><li>CMS GC时出现promotion failed和concurrent mode failure</li></ul></li></ol><h3 id="7-3-类加载机制相关"><a href="#7-3-类加载机制相关" class="headerlink" title="7.3 类加载机制相关"></a>7.3 类加载机制相关</h3><ol><li><p><strong>类加载过程是怎样的？</strong></p><ul><li>加载、验证、准备、解析、初始化、使用、卸载</li></ul></li><li><p><strong>什么是双亲委派模型？</strong></p><ul><li>类加载请求先委派给父类加载器</li><li>避免类的重复加载</li><li>保证Java核心库的安全性</li></ul></li><li><p><strong>如何打破双亲委派模型？</strong></p><ul><li>SPI机制（JDBC、JNDI）</li><li>OSGi模块化</li><li>自定义类加载器</li></ul></li></ol><h3 id="7-4-并发编程相关"><a href="#7-4-并发编程相关" class="headerlink" title="7.4 并发编程相关"></a>7.4 并发编程相关</h3><ol><li><p><strong>synchronized锁升级过程？</strong></p><ul><li>无锁 → 偏向锁 → 轻量级锁 → 重量级锁</li></ul></li><li><p><strong>volatile关键字的作用？</strong></p><ul><li>保证可见性</li><li>禁止指令重排序</li></ul></li><li><p><strong>Monitor的实现原理？</strong></p><ul><li>基于ObjectMonitor实现</li><li>包含Owner、EntryList、WaitSet</li></ul></li></ol><h2 id="8-总结与最佳实践"><a href="#8-总结与最佳实践" class="headerlink" title="8. 总结与最佳实践"></a>8. 总结与最佳实践</h2><h3 id="8-1-JVM调优黄金法则"><a href="#8-1-JVM调优黄金法则" class="headerlink" title="8.1 JVM调优黄金法则"></a>8.1 JVM调优黄金法则</h3><ol><li><strong>先监控再调优</strong>：使用JConsole、VisualVM等工具收集数据</li><li><strong>小步快跑</strong>：每次只调整一个参数，观察效果</li><li><strong>关注GC日志</strong>：分析GC频率、停顿时间、回收量</li><li><strong>避免过度优化</strong>：80%的性能问题由20%的代码引起</li></ol><h3 id="8-2-生产环境配置模板"><a href="#8-2-生产环境配置模板" class="headerlink" title="8.2 生产环境配置模板"></a>8.2 生产环境配置模板</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通用配置模板</span><span class="token parameter variable">-Xms4g</span> <span class="token parameter variable">-Xmx4g</span>  <span class="token comment"># 堆内存固定，避免动态扩容</span><span class="token parameter variable">-XX:+UseG1GC</span>   <span class="token comment"># 使用G1收集器</span><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">200</span>  <span class="token comment"># 最大停顿时间200ms</span><span class="token parameter variable">-XX:+PrintGCDetails</span> <span class="token parameter variable">-XX:+PrintGCTimeStamps</span>  <span class="token comment"># GC日志</span>-Xloggc:/var/log/app/gc.log  <span class="token comment"># GC日志文件</span><span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span>  <span class="token comment"># OOM时生成堆转储</span><span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span>/var/log/app/heap.hprof  <span class="token comment"># 堆转储路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-学习建议"><a href="#8-3-学习建议" class="headerlink" title="8.3 学习建议"></a>8.3 学习建议</h3><ol><li><strong>理论结合实践</strong>：通过实际调优案例加深理解</li><li><strong>阅读源码</strong>：OpenJDK源码是最好的学习资料</li><li><strong>关注社区</strong>：跟进JVM最新发展（ZGC、Shenandoah）</li><li><strong>工具熟练</strong>：掌握各种JVM监控和调优工具</li></ol><p>通过系统学习JVM原理，你将能够：</p><ul><li>快速定位和解决生产环境问题</li><li>编写高性能的Java应用</li><li>在技术面试中脱颖而出</li><li>为架构设计提供坚实基础</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>《深入理解Java虚拟机：JVM高级特性与最佳实践》</li><li>《Java性能优化权威指南》</li><li>OpenJDK官方文档</li><li>Oracle JVM调优指南</li><li>《Java并发编程实战》</li></ol><blockquote><p>本文档将持续更新，欢迎交流讨论！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存模型 </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> 类加载机制 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT技术详解：原理、应用与最佳实践</title>
      <link href="/2025/08/15/JWT%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/15/JWT%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT技术详解：原理、应用与最佳实践"><a href="#JWT技术详解：原理、应用与最佳实践" class="headerlink" title="JWT技术详解：原理、应用与最佳实践"></a>JWT技术详解：原理、应用与最佳实践</h1><h2 id="1-JWT简介"><a href="#1-JWT简介" class="headerlink" title="1. JWT简介"></a>1. JWT简介</h2><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为JSON对象。由于数字签名的存在，这些信息是可验证和可信的。JWT可以使用密钥（使用HMAC算法）或使用RSA或ECDSA的公钥&#x2F;私钥对进行签名。</p><h3 id="1-1-JWT的特点"><a href="#1-1-JWT的特点" class="headerlink" title="1.1 JWT的特点"></a>1.1 JWT的特点</h3><ul><li><strong>紧凑性</strong>：JWT可以通过URL、POST参数或HTTP Header发送，体积小，传输速度快。</li><li><strong>自包含</strong>：包含了所有用户所需要的信息，避免了多次查询数据库。</li><li><strong>易于传输</strong>：跨语言支持，支持所有主流编程语言。</li><li><strong>安全性</strong>：使用数字签名确保信息不被篡改。</li><li><strong>无状态</strong>：服务端无需存储会话信息，降低了服务器的负载。</li></ul><h3 id="1-2-JWT与传统Session的比较"><a href="#1-2-JWT与传统Session的比较" class="headerlink" title="1.2 JWT与传统Session的比较"></a>1.2 JWT与传统Session的比较</h3><table><thead><tr><th>特性</th><th>JWT</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端</td><td>服务端</td></tr><tr><td>可扩展性</td><td>高（无状态）</td><td>低（需要会话存储）</td></tr><tr><td>跨域支持</td><td>原生支持</td><td>需要额外配置</td></tr><tr><td>安全性</td><td>取决于如何使用</td><td>相对安全</td></tr><tr><td>性能</td><td>减少数据库查询</td><td>需要查询会话信息</td></tr><tr><td>过期控制</td><td>需要额外处理</td><td>内置支持</td></tr></tbody></table><h2 id="2-JWT的结构"><a href="#2-JWT的结构" class="headerlink" title="2. JWT的结构"></a>2. JWT的结构</h2><p>JWT由三部分组成，用点（.）分隔：</p><pre class="line-numbers language-none"><code class="language-none">xxxxx.yyyyy.zzzzz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这三部分分别是：</p><ol><li><strong>Header（头部）</strong></li><li><strong>Payload（负载）</strong></li><li><strong>Signature（签名）</strong></li></ol><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header通常由两部分组成：token类型（即JWT）和所使用的签名算法（如HMAC SHA256或RSA）。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，这个JSON被Base64Url编码形成JWT的第一部分。</p><h3 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>Payload包含声明（claims）。声明是关于实体（通常是用户）和其他数据的声明。声明有三种类型：</p><ol><li><p><strong>注册声明（Registered claims）</strong>：预定义的声明，建议但不强制使用</p><ul><li><code>iss</code> (issuer)：签发人</li><li><code>exp</code> (expiration time)：过期时间</li><li><code>sub</code> (subject)：主题</li><li><code>aud</code> (audience)：受众</li><li><code>nbf</code> (not before)：生效时间</li><li><code>iat</code> (issued at)：签发时间</li><li><code>jti</code> (JWT ID)：编号</li></ul></li><li><p><strong>公共声明（Public claims）</strong>：可以由使用JWT的各方定义，但为避免冲突，应在IANA JSON Web Token Registry中定义或使用包含命名空间的URI。</p></li><li><p><strong>私有声明（Private claims）</strong>：用于在同意使用它们的各方之间共享信息，既不是注册声明也不是公共声明。</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1516239022</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1516242622</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，这个JSON被Base64Url编码形成JWT的第二部分。</p><h3 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>要创建签名部分，你需要采用编码过的header、编码过的payload，一个秘钥，以及header中指定的算法，然后对其进行签名。</p><p>例如，如果你想使用HMAC SHA256算法，签名将通过以下方式创建：</p><pre class="line-numbers language-none"><code class="language-none">HMACSHA256(  base64UrlEncode(header) + &quot;.&quot; +  base64UrlEncode(payload),  secret)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>签名用于验证消息在传输过程中没有被更改，并且对于使用私钥签名的token，它还可以验证JWT的发送方是否为它所声称的发送方。</p><h2 id="3-JWT的工作流程"><a href="#3-JWT的工作流程" class="headerlink" title="3. JWT的工作流程"></a>3. JWT的工作流程</h2><p>JWT的典型工作流程如下：</p><ol><li><strong>用户登录</strong>：用户通过用户名和密码进行身份验证。</li><li><strong>服务器生成JWT</strong>：验证成功后，服务器使用密钥生成JWT。</li><li><strong>返回JWT给客户端</strong>：服务器将JWT返回给客户端。</li><li><strong>客户端存储JWT</strong>：客户端将JWT存储在本地（如localStorage或Cookie）。</li><li><strong>请求时附带JWT</strong>：客户端在后续请求中，将JWT放在Authorization头中。</li><li><strong>服务器验证JWT</strong>：服务器验证JWT的签名和有效期。</li><li><strong>授权访问</strong>：验证成功后，允许访问受保护的资源。</li></ol><h3 id="3-1-JWT认证流程图"><a href="#3-1-JWT认证流程图" class="headerlink" title="3.1 JWT认证流程图"></a>3.1 JWT认证流程图</h3><pre class="line-numbers language-none"><code class="language-none">┌───────────┐                               ┌───────────┐│           │                               │           ││  客户端   │                               │  服务器   ││           │                               │           │└───────────┘                               └───────────┘      │                                           │      │  1. 发送用户名和密码                      │      │ ─────────────────────────────────────────&gt;│      │                                           │      │  2. 验证用户名和密码                      │      │                                           │      │  3. 生成JWT                               │      │                                           │      │  4. 返回JWT                               │      │ &lt;─────────────────────────────────────────│      │                                           │      │  5. 存储JWT                               │      │                                           │      │  6. 请求资源（带JWT）                     │      │ ─────────────────────────────────────────&gt;│      │                                           │      │  7. 验证JWT                               │      │                                           │      │  8. 返回受保护资源                        │      │ &lt;─────────────────────────────────────────│      │                                           │<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JWT的实现"><a href="#4-JWT的实现" class="headerlink" title="4. JWT的实现"></a>4. JWT的实现</h2><h3 id="4-1-Java实现（使用jjwt库）"><a href="#4-1-Java实现（使用jjwt库）" class="headerlink" title="4.1 Java实现（使用jjwt库）"></a>4.1 Java实现（使用jjwt库）</h3><h4 id="4-1-1-添加依赖"><a href="#4-1-1-添加依赖" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h4><p>Maven:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-生成JWT"><a href="#4-1-2-生成JWT" class="headerlink" title="4.1.2 生成JWT"></a>4.1.2 生成JWT</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Keys</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">EXPIRATION_TIME</span> <span class="token operator">=</span> <span class="token number">86400000</span><span class="token punctuation">;</span> <span class="token comment">// 1天</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token class-name">Keys</span><span class="token punctuation">.</span><span class="token function">secretKeyFor</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRATION_TIME</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">validateTokenAndGetUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-在Spring-Security中使用JWT"><a href="#4-1-3-在Spring-Security中使用JWT" class="headerlink" title="4.1.3 在Spring Security中使用JWT"></a>4.1.3 在Spring Security中使用JWT</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JwtAuthenticationFilter</span> jwtAuthenticationFilter<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/api/auth/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>header <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> token <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">validateTokenAndGetUsername</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> customUserDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>                    userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-Node-js实现（使用jsonwebtoken库）"><a href="#4-2-Node-js实现（使用jsonwebtoken库）" class="headerlink" title="4.2 Node.js实现（使用jsonwebtoken库）"></a>4.2 Node.js实现（使用jsonwebtoken库）</h3><h4 id="4-2-1-安装依赖"><a href="#4-2-1-安装依赖" class="headerlink" title="4.2.1 安装依赖"></a>4.2.1 安装依赖</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jsonwebtoken<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-2-生成JWT"><a href="#4-2-2-生成JWT" class="headerlink" title="4.2.2 生成JWT"></a>4.2.2 生成JWT</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SECRET_KEY</span> <span class="token operator">=</span> <span class="token string">'your-secret-key'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">EXPIRES_IN</span> <span class="token operator">=</span> <span class="token string">'24h'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> userId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token constant">EXPIRES_IN</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> generateToken<span class="token punctuation">,</span> verifyToken <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-在Express中使用JWT"><a href="#4-2-3-在Express中使用JWT" class="headerlink" title="4.2.3 在Express中使用JWT"></a>4.2.3 在Express中使用JWT</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> generateToken<span class="token punctuation">,</span> verifyToken <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./jwtUtils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 登录路由</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment">// 验证用户名和密码（示例）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">'password'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户ID为1</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> token <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'用户名或密码错误'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// JWT中间件</span><span class="token keyword">function</span> <span class="token function">authenticateToken</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> authHeader <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'authorization'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> authHeader <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'未提供token'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'token无效或已过期'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    req<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 受保护的路由</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/protected'</span><span class="token punctuation">,</span> authenticateToken<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'这是受保护的资源'</span><span class="token punctuation">,</span> <span class="token literal-property property">user</span><span class="token operator">:</span> req<span class="token punctuation">.</span>user <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器运行在端口3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-JWT的安全性考虑"><a href="#5-JWT的安全性考虑" class="headerlink" title="5. JWT的安全性考虑"></a>5. JWT的安全性考虑</h2><h3 id="5-1-JWT的安全风险"><a href="#5-1-JWT的安全风险" class="headerlink" title="5.1 JWT的安全风险"></a>5.1 JWT的安全风险</h3><ol><li><strong>信息泄露</strong>：JWT的payload部分只是Base64编码，不是加密，因此不应在其中存储敏感信息。</li><li><strong>无法撤销</strong>：JWT一旦签发，在过期前无法撤销（除非实现黑名单）。</li><li><strong>令牌劫持</strong>：如果JWT被窃取，攻击者可以使用它直到过期。</li><li><strong>密钥泄露</strong>：如果签名密钥泄露，攻击者可以伪造有效的JWT。</li></ol><h3 id="5-2-安全最佳实践"><a href="#5-2-安全最佳实践" class="headerlink" title="5.2 安全最佳实践"></a>5.2 安全最佳实践</h3><ol><li><strong>使用HTTPS</strong>：始终通过HTTPS传输JWT，防止中间人攻击。</li><li><strong>设置合理的过期时间</strong>：JWT的有效期应尽可能短。</li><li><strong>不存储敏感数据</strong>：不要在JWT中存储敏感信息。</li><li><strong>使用强密钥</strong>：使用足够长且随机的密钥。</li><li><strong>实现刷新令牌机制</strong>：使用短期访问令牌和长期刷新令牌。</li><li><strong>考虑使用黑名单</strong>：对于需要立即撤销的情况，实现令牌黑名单。</li><li><strong>验证所有声明</strong>：验证issuer、audience、expiration等所有相关声明。</li><li><strong>防止XSS攻击</strong>：如果在浏览器中存储JWT，注意防范XSS攻击。</li><li><strong>使用安全的算法</strong>：优先选择强加密算法，如RS256而非HS256。</li></ol><h3 id="5-3-刷新令牌机制"><a href="#5-3-刷新令牌机制" class="headerlink" title="5.3 刷新令牌机制"></a>5.3 刷新令牌机制</h3><p>刷新令牌机制是一种常用的安全实践，它使用两种令牌：</p><ol><li><strong>访问令牌（Access Token）</strong>：短期有效（如15分钟），用于访问API。</li><li><strong>刷新令牌（Refresh Token）</strong>：长期有效（如7天），用于获取新的访问令牌。</li></ol><p>工作流程：</p><ol><li>用户登录后，服务器返回访问令牌和刷新令牌。</li><li>客户端使用访问令牌访问API。</li><li>访问令牌过期后，客户端使用刷新令牌获取新的访问令牌。</li><li>如果刷新令牌也过期，用户需要重新登录。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生成访问令牌和刷新令牌</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenService</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">900000</span><span class="token punctuation">;</span> <span class="token comment">// 15分钟</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">REFRESH_TOKEN_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">604800000</span><span class="token punctuation">;</span> <span class="token comment">// 7天</span>        <span class="token keyword">public</span> <span class="token class-name">TokenPair</span> <span class="token function">generateTokenPair</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> accessToken <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> refreshToken <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">REFRESH_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>refreshKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenPair</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">,</span> refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用刷新令牌获取新的访问令牌</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">refreshAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> refreshToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>refreshKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-JWT的应用场景"><a href="#6-JWT的应用场景" class="headerlink" title="6. JWT的应用场景"></a>6. JWT的应用场景</h2><h3 id="6-1-认证（Authentication）"><a href="#6-1-认证（Authentication）" class="headerlink" title="6.1 认证（Authentication）"></a>6.1 认证（Authentication）</h3><p>JWT最常见的应用场景是用户认证。用户登录后，服务器生成JWT并返回给客户端，客户端在后续请求中携带JWT，服务器验证JWT后允许访问受保护的资源。</p><h3 id="6-2-信息交换（Information-Exchange）"><a href="#6-2-信息交换（Information-Exchange）" class="headerlink" title="6.2 信息交换（Information Exchange）"></a>6.2 信息交换（Information Exchange）</h3><p>JWT可以用于在各方之间安全地传输信息。由于JWT可以签名，接收方可以验证发送方的身份和信息的完整性。</p><h3 id="6-3-单点登录（Single-Sign-On）"><a href="#6-3-单点登录（Single-Sign-On）" class="headerlink" title="6.3 单点登录（Single Sign On）"></a>6.3 单点登录（Single Sign On）</h3><p>JWT可以用于实现跨域的单点登录系统。用户在一个服务上登录后，可以携带JWT访问其他相关服务，而无需重新登录。</p><h3 id="6-4-微服务架构"><a href="#6-4-微服务架构" class="headerlink" title="6.4 微服务架构"></a>6.4 微服务架构</h3><p>在微服务架构中，JWT可以用于服务间的认证和授权，确保只有经过授权的服务能够访问其他服务的API。</p><h3 id="6-5-移动应用"><a href="#6-5-移动应用" class="headerlink" title="6.5 移动应用"></a>6.5 移动应用</h3><p>JWT适用于移动应用的认证，因为它不需要在服务器端存储会话信息，减轻了服务器的负担。</p><h2 id="7-JWT的局限性与替代方案"><a href="#7-JWT的局限性与替代方案" class="headerlink" title="7. JWT的局限性与替代方案"></a>7. JWT的局限性与替代方案</h2><h3 id="7-1-JWT的局限性"><a href="#7-1-JWT的局限性" class="headerlink" title="7.1 JWT的局限性"></a>7.1 JWT的局限性</h3><ol><li><strong>无法撤销</strong>：JWT一旦签发，在过期前无法撤销。</li><li><strong>大小限制</strong>：JWT可能比传统的会话ID大，增加了网络传输负担。</li><li><strong>存储开销</strong>：客户端需要存储JWT，可能占用更多客户端存储空间。</li><li><strong>无状态的限制</strong>：某些应用场景可能需要服务器端状态。</li></ol><h3 id="7-2-替代方案"><a href="#7-2-替代方案" class="headerlink" title="7.2 替代方案"></a>7.2 替代方案</h3><ol><li><strong>传统Session</strong>：服务器存储会话信息，客户端存储会话ID。</li><li><strong>OAuth 2.0</strong>：用于授权的开放标准，适用于第三方应用授权。</li><li><strong>OpenID Connect</strong>：基于OAuth 2.0的身份认证层。</li><li><strong>SAML</strong>：用于企业级身份认证和单点登录的XML标准。</li></ol><h3 id="7-3-何时使用JWT"><a href="#7-3-何时使用JWT" class="headerlink" title="7.3 何时使用JWT"></a>7.3 何时使用JWT</h3><p>适合使用JWT的场景：</p><ul><li>需要无状态认证的应用</li><li>分布式系统和微服务架构</li><li>跨域认证需求</li><li>API认证</li></ul><p>不适合使用JWT的场景：</p><ul><li>需要即时撤销访问权限的应用</li><li>存储大量用户状态信息的应用</li><li>高安全性要求的应用（可能需要额外的安全措施）</li></ul><h2 id="8-JWT工具与库"><a href="#8-JWT工具与库" class="headerlink" title="8. JWT工具与库"></a>8. JWT工具与库</h2><h3 id="8-1-在线工具"><a href="#8-1-在线工具" class="headerlink" title="8.1 在线工具"></a>8.1 在线工具</h3><ul><li><a href="https://jwt.io/">jwt.io</a>：用于解码、验证和生成JWT的在线工具</li><li><a href="https://jwt.ms/">JWT Debugger</a>：微软提供的JWT调试工具</li></ul><h3 id="8-2-主流编程语言的JWT库"><a href="#8-2-主流编程语言的JWT库" class="headerlink" title="8.2 主流编程语言的JWT库"></a>8.2 主流编程语言的JWT库</h3><table><thead><tr><th>语言</th><th>库</th><th>链接</th></tr></thead><tbody><tr><td>Java</td><td>jjwt</td><td><a href="https://github.com/jwtk/jjwt">GitHub</a></td></tr><tr><td>JavaScript</td><td>jsonwebtoken</td><td><a href="https://github.com/auth0/node-jsonwebtoken">GitHub</a></td></tr><tr><td>Python</td><td>PyJWT</td><td><a href="https://github.com/jpadilla/pyjwt">GitHub</a></td></tr><tr><td>PHP</td><td>firebase&#x2F;php-jwt</td><td><a href="https://github.com/firebase/php-jwt">GitHub</a></td></tr><tr><td>.NET</td><td>System.IdentityModel.Tokens.Jwt</td><td><a href="https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/">NuGet</a></td></tr><tr><td>Ruby</td><td>jwt</td><td><a href="https://github.com/jwt/ruby-jwt">GitHub</a></td></tr><tr><td>Go</td><td>golang-jwt&#x2F;jwt</td><td><a href="https://github.com/golang-jwt/jwt">GitHub</a></td></tr></tbody></table><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>JWT是一种灵活、安全且高效的认证和信息交换机制，特别适合于现代分布式系统和微服务架构。它通过数字签名确保信息的完整性和真实性，同时减轻了服务器的存储负担。</p><p>然而，JWT也有其局限性，如无法即时撤销和潜在的安全风险。因此，在实际应用中，需要根据具体需求选择合适的认证方案，并遵循安全最佳实践。</p><p>通过本文的详细介绍，相信读者已经对JWT的原理、应用和最佳实践有了全面的了解，能够在实际项目中正确地使用JWT技术。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://jwt.io/">JWT官方网站</a></li><li><a href="https://tools.ietf.org/html/rfc7519">RFC 7519 - JSON Web Token</a></li><li><a href="https://auth0.com/docs/tokens/json-web-tokens">Auth0 JWT文档</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html">OWASP JWT安全指南</a></li><li><a href="https://www.baeldung.com/spring-security-jwt">Spring Security JWT指南</a></li></ol><h1 id="JWT技术详解：原理、应用与最佳实践-1"><a href="#JWT技术详解：原理、应用与最佳实践-1" class="headerlink" title="JWT技术详解：原理、应用与最佳实践"></a>JWT技术详解：原理、应用与最佳实践</h1><h2 id="1-JWT简介-1"><a href="#1-JWT简介-1" class="headerlink" title="1. JWT简介"></a>1. JWT简介</h2><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为JSON对象。由于数字签名的存在，这些信息是可验证和可信的。JWT可以使用密钥（使用HMAC算法）或使用RSA或ECDSA的公钥&#x2F;私钥对进行签名。</p><h3 id="1-1-JWT的特点-1"><a href="#1-1-JWT的特点-1" class="headerlink" title="1.1 JWT的特点"></a>1.1 JWT的特点</h3><ul><li><strong>紧凑性</strong>：JWT可以通过URL、POST参数或HTTP Header发送，体积小，传输速度快</li><li><strong>自包含</strong>：包含了所有用户所需要的信息，避免了多次查询数据库</li><li><strong>易于传输</strong>：跨语言支持，支持所有主流编程语言</li><li><strong>安全性</strong>：使用数字签名确保信息不被篡改</li><li><strong>无状态</strong>：服务端无需存储会话信息，降低了服务器的负载</li></ul><h3 id="1-2-JWT与传统Session的比较-1"><a href="#1-2-JWT与传统Session的比较-1" class="headerlink" title="1.2 JWT与传统Session的比较"></a>1.2 JWT与传统Session的比较</h3><table><thead><tr><th>特性</th><th>JWT</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端</td><td>服务端</td></tr><tr><td>可扩展性</td><td>高（无状态）</td><td>低（需要会话存储）</td></tr><tr><td>跨域支持</td><td>原生支持</td><td>需要额外配置</td></tr><tr><td>安全性</td><td>取决于如何使用</td><td>相对安全</td></tr><tr><td>性能</td><td>减少数据库查询</td><td>需要查询会话信息</td></tr><tr><td>过期控制</td><td>需要额外处理</td><td>内置支持</td></tr></tbody></table><h2 id="2-JWT的结构-1"><a href="#2-JWT的结构-1" class="headerlink" title="2. JWT的结构"></a>2. JWT的结构</h2><p>JWT由三部分组成，用点（.）分隔：</p><pre class="line-numbers language-none"><code class="language-none">xxxxx.yyyyy.zzzzz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这三部分分别是：</p><ol><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ol><h3 id="2-1-Header-1"><a href="#2-1-Header-1" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header通常由两部分组成：token类型（即JWT）和所使用的签名算法（如HMAC SHA256或RSA）。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，这个JSON被Base64Url编码形成JWT的第一部分。</p><h3 id="2-2-Payload-1"><a href="#2-2-Payload-1" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>Payload包含声明（claims）。声明是关于实体（通常是用户）和其他数据的声明。声明有三种类型：</p><ol><li><p><strong>注册声明（Registered claims）</strong>：预定义的声明，建议但不强制使用</p><ul><li><code>iss</code> (issuer)：签发人</li><li><code>exp</code> (expiration time)：过期时间</li><li><code>sub</code> (subject)：主题</li><li><code>aud</code> (audience)：受众</li><li><code>nbf</code> (not before)：生效时间</li><li><code>iat</code> (issued at)：签发时间</li><li><code>jti</code> (JWT ID)：编号</li></ul></li><li><p><strong>公共声明（Public claims）</strong>：可以由使用JWT的各方定义，但为避免冲突，应在IANA JSON Web Token Registry中定义或使用包含命名空间的URI。</p></li><li><p><strong>私有声明（Private claims）</strong>：用于在同意使用它们的各方之间共享信息，既不是注册声明也不是公共声明。</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1516239022</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1516242622</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，这个JSON被Base64Url编码形成JWT的第二部分。</p><h3 id="2-3-Signature-1"><a href="#2-3-Signature-1" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>要创建签名部分，你需要采用编码过的header、编码过的payload，一个秘钥，以及header中指定的算法，然后对其进行签名。</p><p>例如，如果你想使用HMAC SHA256算法，签名将通过以下方式创建：</p><pre class="line-numbers language-none"><code class="language-none">HMACSHA256(  base64UrlEncode(header) + &quot;.&quot; +  base64UrlEncode(payload),  secret)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>签名用于验证消息在传输过程中没有被更改，并且对于使用私钥签名的token，它还可以验证JWT的发送方是否为它所声称的发送方。</p><h2 id="3-JWT的工作流程-1"><a href="#3-JWT的工作流程-1" class="headerlink" title="3. JWT的工作流程"></a>3. JWT的工作流程</h2><p>JWT的典型工作流程如下：</p><ol><li><strong>用户登录</strong>：用户通过用户名和密码进行身份验证</li><li><strong>服务器生成JWT</strong>：验证成功后，服务器使用密钥生成JWT</li><li><strong>返回JWT给客户端</strong>：服务器将JWT返回给客户端</li><li><strong>客户端存储JWT</strong>：客户端将JWT存储在本地（如localStorage或Cookie）</li><li><strong>请求时附带JWT</strong>：客户端在后续请求中，将JWT放在Authorization头中</li><li><strong>服务器验证JWT</strong>：服务器验证JWT的签名和有效期</li><li><strong>授权访问</strong>：验证成功后，允许访问受保护的资源</li></ol><h3 id="3-1-JWT认证流程图-1"><a href="#3-1-JWT认证流程图-1" class="headerlink" title="3.1 JWT认证流程图"></a>3.1 JWT认证流程图</h3><pre class="line-numbers language-none"><code class="language-none">┌───────────┐                               ┌───────────┐│           │                               │           ││  客户端   │                               │  服务器   ││           │                               │           │└───────────┘                               └───────────┘      │                                           │      │  1. 发送用户名和密码                      │      │ ─────────────────────────────────────────&gt;│      │                                           │      │  2. 验证用户名和密码                      │      │                                           │      │  3. 生成JWT                               │      │                                           │      │  4. 返回JWT                               │      │ &lt;─────────────────────────────────────────│      │                                           │      │  5. 存储JWT                               │      │                                           │      │  6. 请求资源（带JWT）                     │      │ ─────────────────────────────────────────&gt;│      │                                           │      │  7. 验证JWT                               │      │                                           │      │  8. 返回受保护资源                        │      │ &lt;─────────────────────────────────────────│      │                                           │<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JWT的实现-1"><a href="#4-JWT的实现-1" class="headerlink" title="4. JWT的实现"></a>4. JWT的实现</h2><h3 id="4-1-Java实现（使用jjwt库）-1"><a href="#4-1-Java实现（使用jjwt库）-1" class="headerlink" title="4.1 Java实现（使用jjwt库）"></a>4.1 Java实现（使用jjwt库）</h3><h4 id="4-1-1-添加依赖-1"><a href="#4-1-1-添加依赖-1" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h4><p>Maven:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-生成JWT-1"><a href="#4-1-2-生成JWT-1" class="headerlink" title="4.1.2 生成JWT"></a>4.1.2 生成JWT</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Keys</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">EXPIRATION_TIME</span> <span class="token operator">=</span> <span class="token number">86400000</span><span class="token punctuation">;</span> <span class="token comment">// 1天</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token class-name">Keys</span><span class="token punctuation">.</span><span class="token function">secretKeyFor</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRATION_TIME</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">validateTokenAndGetUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-在Spring-Security中使用JWT-1"><a href="#4-1-3-在Spring-Security中使用JWT-1" class="headerlink" title="4.1.3 在Spring Security中使用JWT"></a>4.1.3 在Spring Security中使用JWT</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JwtAuthenticationFilter</span> jwtAuthenticationFilter<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/api/auth/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>header <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> token <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">validateTokenAndGetUsername</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> customUserDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>                    userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-Node-js实现（使用jsonwebtoken库）-1"><a href="#4-2-Node-js实现（使用jsonwebtoken库）-1" class="headerlink" title="4.2 Node.js实现（使用jsonwebtoken库）"></a>4.2 Node.js实现（使用jsonwebtoken库）</h3><h4 id="4-2-1-安装依赖-1"><a href="#4-2-1-安装依赖-1" class="headerlink" title="4.2.1 安装依赖"></a>4.2.1 安装依赖</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jsonwebtoken<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-2-生成JWT-1"><a href="#4-2-2-生成JWT-1" class="headerlink" title="4.2.2 生成JWT"></a>4.2.2 生成JWT</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SECRET_KEY</span> <span class="token operator">=</span> <span class="token string">'your-secret-key'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">EXPIRES_IN</span> <span class="token operator">=</span> <span class="token string">'24h'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> userId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token constant">EXPIRES_IN</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> generateToken<span class="token punctuation">,</span> verifyToken <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-在Express中使用JWT-1"><a href="#4-2-3-在Express中使用JWT-1" class="headerlink" title="4.2.3 在Express中使用JWT"></a>4.2.3 在Express中使用JWT</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> generateToken<span class="token punctuation">,</span> verifyToken <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./jwtUtils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 登录路由</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment">// 验证用户名和密码（示例）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">'password'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户ID为1</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> token <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'用户名或密码错误'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// JWT中间件</span><span class="token keyword">function</span> <span class="token function">authenticateToken</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> authHeader <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'authorization'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> authHeader <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'未提供token'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'token无效或已过期'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    req<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 受保护的路由</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/protected'</span><span class="token punctuation">,</span> authenticateToken<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'这是受保护的资源'</span><span class="token punctuation">,</span> <span class="token literal-property property">user</span><span class="token operator">:</span> req<span class="token punctuation">.</span>user <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器运行在端口3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-JWT的安全性考虑-1"><a href="#5-JWT的安全性考虑-1" class="headerlink" title="5. JWT的安全性考虑"></a>5. JWT的安全性考虑</h2><h3 id="5-1-JWT的安全风险-1"><a href="#5-1-JWT的安全风险-1" class="headerlink" title="5.1 JWT的安全风险"></a>5.1 JWT的安全风险</h3><ol><li><strong>信息泄露</strong>：JWT的payload部分只是Base64编码，不是加密，因此不应在其中存储敏感信息</li><li><strong>无法撤销</strong>：一旦签发，在过期前无法撤销（除非实现黑名单）</li><li><strong>令牌劫持</strong>：如果JWT被窃取，攻击者可以使用它直到过期</li><li><strong>密钥泄露</strong>：如果签名密钥泄露，攻击者可以伪造有效的JWT</li></ol><h3 id="5-2-安全最佳实践-1"><a href="#5-2-安全最佳实践-1" class="headerlink" title="5.2 安全最佳实践"></a>5.2 安全最佳实践</h3><ol><li><strong>使用HTTPS</strong>：始终通过HTTPS传输JWT，防止中间人攻击</li><li><strong>设置合理的过期时间</strong>：JWT的有效期应尽可能短</li><li><strong>不存储敏感数据</strong>：不要在JWT中存储敏感信息</li><li><strong>使用强密钥</strong>：使用足够长且随机的密钥</li><li><strong>实现刷新令牌机制</strong>：使用短期访问令牌和长期刷新令牌</li><li><strong>考虑使用黑名单</strong>：对于需要立即撤销的情况，实现令牌黑名单</li><li><strong>验证所有声明</strong>：验证issuer、audience、expiration等所有相关声明</li><li><strong>防止XSS攻击</strong>：如果在浏览器中存储JWT，注意防范XSS攻击</li><li><strong>使用安全的算法</strong>：优先选择强加密算法，如RS256而非HS256</li></ol><h3 id="5-3-刷新令牌机制-1"><a href="#5-3-刷新令牌机制-1" class="headerlink" title="5.3 刷新令牌机制"></a>5.3 刷新令牌机制</h3><p>刷新令牌机制是一种常用的安全实践，它使用两种令牌：</p><ol><li><strong>访问令牌（Access Token）</strong>：短期有效（如15分钟），用于访问API</li><li><strong>刷新令牌（Refresh Token）</strong>：长期有效（如7天），用于获取新的访问令牌</li></ol><p>工作流程：</p><ol><li>用户登录后，服务器返回访问令牌和刷新令牌</li><li>客户端使用访问令牌访问API</li><li>访问令牌过期后，客户端使用刷新令牌获取新的访问令牌</li><li>如果刷新令牌也过期，用户需要重新登录</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生成访问令牌和刷新令牌</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenService</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">900000</span><span class="token punctuation">;</span> <span class="token comment">// 15分钟</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">REFRESH_TOKEN_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">604800000</span><span class="token punctuation">;</span> <span class="token comment">// 7天</span>        <span class="token keyword">public</span> <span class="token class-name">TokenPair</span> <span class="token function">generateTokenPair</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> accessToken <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> refreshToken <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">REFRESH_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>refreshKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenPair</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">,</span> refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用刷新令牌获取新的访问令牌</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">refreshAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> refreshToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>refreshKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ACCESS_TOKEN_EXPIRATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-JWT的应用场景-1"><a href="#6-JWT的应用场景-1" class="headerlink" title="6. JWT的应用场景"></a>6. JWT的应用场景</h2><h3 id="6-1-认证（Authentication）-1"><a href="#6-1-认证（Authentication）-1" class="headerlink" title="6.1 认证（Authentication）"></a>6.1 认证（Authentication）</h3><p>JWT最常见的应用场景是用户认证。用户登录后，服务器生成JWT并返回给客户端，客户端在后续请求中携带JWT，服务器验证JWT后允许访问受保护的资源。</p><h3 id="6-2-信息交换（Information-Exchange）-1"><a href="#6-2-信息交换（Information-Exchange）-1" class="headerlink" title="6.2 信息交换（Information Exchange）"></a>6.2 信息交换（Information Exchange）</h3><p>JWT可以用于在各方之间安全地传输信息。由于JWT可以签名，接收方可以验证发送方的身份和信息的完整性。</p><h3 id="6-3-单点登录（Single-Sign-On）-1"><a href="#6-3-单点登录（Single-Sign-On）-1" class="headerlink" title="6.3 单点登录（Single Sign On）"></a>6.3 单点登录（Single Sign On）</h3><p>JWT可以用于实现跨域的单点登录系统。用户在一个服务上登录后，可以携带JWT访问其他相关服务，而无需重新登录。</p><h3 id="6-4-微服务架构-1"><a href="#6-4-微服务架构-1" class="headerlink" title="6.4 微服务架构"></a>6.4 微服务架构</h3><p>在微服务架构中，JWT可以用于服务间的认证和授权，确保只有经过授权的服务能够访问其他服务的API。</p><h3 id="6-5-移动应用-1"><a href="#6-5-移动应用-1" class="headerlink" title="6.5 移动应用"></a>6.5 移动应用</h3><p>JWT适用于移动应用的认证，因为它不需要在服务器端存储会话信息，减轻了服务器的负担。</p><h2 id="7-JWT的局限性与替代方案-1"><a href="#7-JWT的局限性与替代方案-1" class="headerlink" title="7. JWT的局限性与替代方案"></a>7. JWT的局限性与替代方案</h2><h3 id="7-1-JWT的局限性-1"><a href="#7-1-JWT的局限性-1" class="headerlink" title="7.1 JWT的局限性"></a>7.1 JWT的局限性</h3><ol><li><strong>无法撤销</strong>：JWT一旦签发，在过期前无法撤销</li><li><strong>大小限制</strong>：JWT可能比传统的会话ID大，增加了网络传输负担</li><li><strong>存储开销</strong>：客户端需要存储JWT，可能占用更多客户端存储空间</li><li><strong>无状态的限制</strong>：某些应用场景可能需要服务器端状态</li></ol><h3 id="7-2-替代方案-1"><a href="#7-2-替代方案-1" class="headerlink" title="7.2 替代方案"></a>7.2 替代方案</h3><ol><li><strong>传统Session</strong>：服务器存储会话信息，客户端存储会话ID</li><li><strong>OAuth 2.0</strong>：用于授权的开放标准，适用于第三方应用授权</li><li><strong>OpenID Connect</strong>：基于OAuth 2.0的身份认证层</li><li><strong>SAML</strong>：用于企业级身份认证和单点登录的XML标准</li></ol><h3 id="7-3-何时使用JWT-1"><a href="#7-3-何时使用JWT-1" class="headerlink" title="7.3 何时使用JWT"></a>7.3 何时使用JWT</h3><p>适合使用JWT的场景：</p><ul><li>需要无状态认证的应用</li><li>分布式系统和微服务架构</li><li>跨域认证需求</li><li>API认证</li></ul><p>不适合使用JWT的场景：</p><ul><li>需要即时撤销访问权限的应用</li><li>存储大量用户状态信息的应用</li><li>高安全性要求的应用（可能需要额外的安全措施）</li></ul><h2 id="8-JWT工具与库-1"><a href="#8-JWT工具与库-1" class="headerlink" title="8. JWT工具与库"></a>8. JWT工具与库</h2><h3 id="8-1-在线工具-1"><a href="#8-1-在线工具-1" class="headerlink" title="8.1 在线工具"></a>8.1 在线工具</h3><ul><li><a href="https://jwt.io/">jwt.io</a>：用于解码、验证和生成JWT的在线工具</li><li><a href="https://jwt.ms/">JWT Debugger</a>：微软提供的JWT调试工具</li></ul><h3 id="8-2-主流编程语言的JWT库-1"><a href="#8-2-主流编程语言的JWT库-1" class="headerlink" title="8.2 主流编程语言的JWT库"></a>8.2 主流编程语言的JWT库</h3><table><thead><tr><th>语言</th><th>库</th><th>链接</th></tr></thead><tbody><tr><td>Java</td><td>jjwt</td><td><a href="https://github.com/jwtk/jjwt">GitHub</a></td></tr><tr><td>JavaScript</td><td>jsonwebtoken</td><td><a href="https://github.com/auth0/node-jsonwebtoken">GitHub</a></td></tr><tr><td>Python</td><td>PyJWT</td><td><a href="https://github.com/jpadilla/pyjwt">GitHub</a></td></tr><tr><td>PHP</td><td>firebase&#x2F;php-jwt</td><td><a href="https://github.com/firebase/php-jwt">GitHub</a></td></tr><tr><td>.NET</td><td>System.IdentityModel.Tokens.Jwt</td><td><a href="https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/">NuGet</a></td></tr><tr><td>Ruby</td><td>jwt</td><td><a href="https://github.com/jwt/ruby-jwt">GitHub</a></td></tr><tr><td>Go</td><td>golang-jwt&#x2F;jwt</td><td><a href="https://github.com/golang-jwt/jwt">GitHub</a></td></tr></tbody></table><h2 id="9-总结-1"><a href="#9-总结-1" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>JWT是一种灵活、安全且高效的认证和信息交换机制，特别适合于现代分布式系统和微服务架构。它通过数字签名确保信息的完整性和真实性，同时减轻了服务器的存储负担。</p><p>然而，JWT也有其局限性，如无法即时撤销和潜在的安全风险。因此，在实际应用中，需要根据具体需求选择合适的认证方案，并遵循安全最佳实践。</p><p>通过本文的详细介绍，相信读者已经对JWT的原理、应用和最佳实践有了全面的了解，能够在实际项目中正确地使用JWT技术。</p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://jwt.io/">JWT官方网站</a></li><li><a href="https://tools.ietf.org/html/rfc7519">RFC 7519 - JSON Web Token</a></li><li><a href="https://auth0.com/docs/tokens/json-web-tokens">Auth0 JWT文档</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html">OWASP JWT安全指南</a></li><li><a href="https://www.baeldung.com/spring-security-jwt">Spring Security JWT指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> 安全认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> 认证授权 </tag>
            
            <tag> Token </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录(SSO)技术详解：原理、实现与最佳实践</title>
      <link href="/2025/08/15/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/15/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>单点登录（SSO）技术在企业应用中扮演着至关重要的角色。它通过让用户使用一组凭据访问多个应用，极大地提升了用户体验和工作效率，同时降低了管理成本和安全风险。本文将深入探讨SSO的原理、实现方式以及最佳实践。</p><h2 id="1-SSO的核心价值"><a href="#1-SSO的核心价值" class="headerlink" title="1. SSO的核心价值"></a>1. SSO的核心价值</h2><ul><li><strong>提升用户体验</strong>：用户无需记住多个应用的登录凭据，只需登录一次即可访问所有授权应用。</li><li><strong>减少密码疲劳</strong>：用户只需记住一组凭据，降低了因频繁输入密码而产生的疲劳感。</li><li><strong>简化管理</strong>：IT部门可以集中管理用户权限和访问控制，便于实施统一的安全策略。</li><li><strong>增强安全性</strong>：通过集中管理和多因素认证等手段，有效降低账号被盗用的风险。</li></ul><h2 id="2-SSO的工作原理"><a href="#2-SSO的工作原理" class="headerlink" title="2. SSO的工作原理"></a>2. SSO的工作原理</h2><h3 id="2-1-SSO的基本流程"><a href="#2-1-SSO的基本流程" class="headerlink" title="2.1 SSO的基本流程"></a>2.1 SSO的基本流程</h3><ol><li><strong>用户访问应用</strong>：用户尝试访问受保护的应用A。</li><li><strong>重定向到SSO服务器</strong>：应用A将用户重定向到SSO认证服务器。</li><li><strong>用户认证</strong>：用户在SSO服务器上输入凭据进行认证。</li><li><strong>生成票据（Ticket）</strong>：认证成功后，SSO服务器生成认证票据（如Token或Cookie）。</li><li><strong>返回票据</strong>：SSO服务器将票据返回给用户浏览器。</li><li><strong>验证票据</strong>：应用A验证票据的有效性，确认用户身份。</li><li><strong>访问其他应用</strong>：当用户访问应用B时，应用B验证票据的有效性，无需用户再次输入凭据。</li></ol><h3 id="2-2-SSO架构模型"><a href="#2-2-SSO架构模型" class="headerlink" title="2.2 SSO架构模型"></a>2.2 SSO架构模型</h3><h4 id="2-2-1-基于Cookie的SSO"><a href="#2-2-1-基于Cookie的SSO" class="headerlink" title="2.2.1 基于Cookie的SSO"></a>2.2.1 基于Cookie的SSO</h4><ul><li><strong>适用场景</strong>：适用于同域名下的应用。</li><li><strong>实现方式</strong>：用户登录主应用后，服务器在根域名下设置Cookie，其他应用通过共享Cookie来验证用户身份。</li><li><strong>优点</strong>：实现简单，性能高。</li><li><strong>缺点</strong>：仅适用于同域名，存在Cookie泄露风险。</li></ul><h4 id="2-2-2-基于令牌的SSO"><a href="#2-2-2-基于令牌的SSO" class="headerlink" title="2.2.2 基于令牌的SSO"></a>2.2.2 基于令牌的SSO</h4><ul><li><strong>适用场景</strong>：适用于跨域应用。</li><li><strong>实现方式</strong>：用户登录SSO服务器后获取令牌（Token），应用通过验证令牌的有效性来确认用户身份。</li><li><strong>优点</strong>：支持跨域应用，安全性高。</li><li><strong>缺点</strong>：实现复杂，需要处理Token的生成、存储和验证。</li></ul><h4 id="2-2-3-基于SAML的SSO"><a href="#2-2-3-基于SAML的SSO" class="headerlink" title="2.2.3 基于SAML的SSO"></a>2.2.3 基于SAML的SSO</h4><ul><li><strong>适用场景</strong>：适用于企业级应用，尤其是需要与外部身份提供商（IdP）集成的场景。</li><li><strong>实现方式</strong>：服务提供商（SP）生成SAML请求，重定向到身份提供商（IdP），IdP生成SAML断言（Assertion），重定向回SP。</li><li><strong>优点</strong>：标准化协议，支持复杂的安全策略。</li><li><strong>缺点</strong>：实现复杂，XML处理开销大。</li></ul><h4 id="2-2-4-基于OAuth-OpenID-Connect的SSO"><a href="#2-2-4-基于OAuth-OpenID-Connect的SSO" class="headerlink" title="2.2.4 基于OAuth&#x2F;OpenID Connect的SSO"></a>2.2.4 基于OAuth&#x2F;OpenID Connect的SSO</h4><ul><li><strong>适用场景</strong>：适用于现代Web应用和移动应用。</li><li><strong>实现方式</strong>：结合OAuth 2.0和OpenID Connect，用户访问客户端应用，客户端重定向到授权服务器，用户在授权服务器认证，客户端使用授权码获取访问令牌和ID令牌。</li><li><strong>优点</strong>：支持跨域应用，灵活性高。</li><li><strong>缺点</strong>：配置相对复杂。</li></ul><h2 id="3-主要的SSO实现技术"><a href="#3-主要的SSO实现技术" class="headerlink" title="3. 主要的SSO实现技术"></a>3. 主要的SSO实现技术</h2><h3 id="3-1-CAS（Central-Authentication-Service）"><a href="#3-1-CAS（Central-Authentication-Service）" class="headerlink" title="3.1 CAS（Central Authentication Service）"></a>3.1 CAS（Central Authentication Service）</h3><ul><li><strong>协议流程</strong>：<ol><li>用户访问应用，应用重定向到CAS服务器。</li><li>用户在CAS服务器上认证。</li><li>CAS服务器生成票据（TGT），并发放服务票据（ST）。</li><li>应用通过后端通道验证ST的有效性。</li></ol></li><li><strong>组件</strong>：<ul><li><strong>CAS Client</strong>：集成到应用中的客户端库。</li><li><strong>ST (Service Ticket)</strong>：一次性票据，用于应用验证用户身份。</li></ul></li><li><strong>Java实现示例</strong>：<ul><li><strong>服务端配置</strong>：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8443</span><span class="token key attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token value attr-value">changeit</span><span class="token key attr-name">cas.authn.accept.users</span><span class="token punctuation">=</span><span class="token value attr-value">casuser::Mellon</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>客户端集成（Spring Boot）</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apereo.cas.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cas-client-support-springboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCasClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CasClientApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CasClientApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-2-SAML（Security-Assertion-Markup-Language）"><a href="#3-2-SAML（Security-Assertion-Markup-Language）" class="headerlink" title="3.2 SAML（Security Assertion Markup Language）"></a>3.2 SAML（Security Assertion Markup Language）</h3><ul><li><strong>协议流程</strong>：<ol><li>用户访问服务提供商（SP）。</li><li>SP生成SAML请求，重定向到身份提供商（IdP）。</li><li>用户在IdP认证。</li><li>IdP生成SAML断言（Assertion），重定向到SP。</li><li>SP验证断言，建立会话。</li></ol></li><li><strong>组件</strong>：<ul><li><strong>身份提供商（IdP）</strong>：负责认证用户并生成SAML断言。</li><li><strong>SAML断言（Assertion）</strong>：包含用户身份信息的XML文档。</li></ul></li><li><strong>Java实现示例</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security.extensions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-saml2-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SAMLAuthenticationProvider</span> <span class="token function">samlAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SAMLAuthenticationProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAMLAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provider<span class="token punctuation">.</span><span class="token function">setUserDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SAMLUserDetailsServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> provider<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-3-OAuth-2-0和OpenID-Connect"><a href="#3-3-OAuth-2-0和OpenID-Connect" class="headerlink" title="3.3 OAuth 2.0和OpenID Connect"></a>3.3 OAuth 2.0和OpenID Connect</h3><ul><li><strong>OAuth 2.0角色</strong>：<ul><li><strong>客户端（Client）</strong>：第三方应用。</li><li><strong>资源服务器（Resource Server）</strong>：托管受保护资源。</li></ul></li><li><strong>OpenID Connect扩展</strong>：<ul><li><strong>ID Token</strong>：包含用户身份信息的JWT。</li><li><strong>UserInfo端点</strong>：获取用户详细信息。</li></ul></li><li><strong>Java实现示例</strong>：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">registration</span><span class="token punctuation">:</span>          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span>            <span class="token key atrule">client-id</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>client            <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>secret        <span class="token key atrule">provider</span><span class="token punctuation">:</span>          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span>            <span class="token key atrule">user-name-attribute</span><span class="token punctuation">:</span> preferred_username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">oauth2Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-4-JWT（JSON-Web-Token）在SSO中的应用"><a href="#3-4-JWT（JSON-Web-Token）在SSO中的应用" class="headerlink" title="3.4 JWT（JSON Web Token）在SSO中的应用"></a>3.4 JWT（JSON Web Token）在SSO中的应用</h3><ul><li><strong>JWT结构</strong>：<ul><li><strong>Header</strong>：包含令牌的元数据。</li><li><strong>Payload</strong>：包含声明（Claims），如用户ID、角色等。</li><li><strong>Signature</strong>：确保令牌完整性的签名。</li></ul></li><li><strong>实现方式</strong>：<ol><li>用户登录认证服务器。</li><li>认证服务器生成JWT并返回给客户端。</li><li>客户端存储JWT（通常在localStorage或Cookie中）。</li><li>客户端在访问受保护资源时携带JWT。</li><li>应用验证JWT签名和有效期，提取用户信息。</li></ol></li><li><strong>Java实现示例</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;jwt.secret&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> expiration<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">validateToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">UserDetails</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">getUsernameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getUsernameFromToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-SSO实现方案"><a href="#4-SSO实现方案" class="headerlink" title="4. SSO实现方案"></a>4. SSO实现方案</h2><h3 id="4-1-企业级SSO解决方案"><a href="#4-1-企业级SSO解决方案" class="headerlink" title="4.1 企业级SSO解决方案"></a>4.1 企业级SSO解决方案</h3><h4 id="4-1-1-Keycloak"><a href="#4-1-1-Keycloak" class="headerlink" title="4.1.1 Keycloak"></a>4.1.1 Keycloak</h4><ul><li><strong>特点</strong>：<ul><li>用户联合（User Federation）。</li><li>多租户支持。</li><li>支持多种标准协议（如OAuth 2.0、SAML、OpenID Connect）。</li></ul></li><li><strong>部署</strong>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-e</span> <span class="token assign-left variable">KEYCLOAK_USER</span><span class="token operator">=</span>admin <span class="token parameter variable">-e</span> <span class="token assign-left variable">KEYCLOAK_PASSWORD</span><span class="token operator">=</span>admin quay.io/keycloak/keycloak:15.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>Spring Boot集成</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-oauth2-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-oauth2-jose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">registration</span><span class="token punctuation">:</span>          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span>            <span class="token key atrule">client-id</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>client            <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>secret            <span class="token key atrule">authorization-grant-type</span><span class="token punctuation">:</span> authorization_code            <span class="token key atrule">redirect-uri</span><span class="token punctuation">:</span> <span class="token string">"&#123;baseUrl&#125;/login/oauth2/code/&#123;registrationId&#125;"</span>            <span class="token key atrule">scope</span><span class="token punctuation">:</span> openid<span class="token punctuation">,</span>profile<span class="token punctuation">,</span>email        <span class="token key atrule">provider</span><span class="token punctuation">:</span>          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span>            <span class="token key atrule">authorization-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/auth/realms/master/protocol/openid<span class="token punctuation">-</span>connect/auth            <span class="token key atrule">token-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/auth/realms/master/protocol/openid<span class="token punctuation">-</span>connect/token            <span class="token key atrule">user-info-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/auth/realms/master/protocol/openid<span class="token punctuation">-</span>connect/userinfo            <span class="token key atrule">user-name-attribute</span><span class="token punctuation">:</span> preferred_username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-1-2-Auth0"><a href="#4-1-2-Auth0" class="headerlink" title="4.1.2 Auth0"></a>4.1.2 Auth0</h4><ul><li><strong>特点</strong>：<ul><li>简单的开发者体验。</li><li>规则引擎。</li><li>日志和监控。</li></ul></li><li><strong>JavaScript集成</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> createAuth0Client <span class="token keyword">from</span> <span class="token string">'@auth0/auth0-spa-js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> auth0 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createAuth0Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">'your-auth0-domain'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clientId</span><span class="token operator">:</span> <span class="token string">'YOUR_CLIENT_ID'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 登录</span><span class="token keyword">await</span> auth0<span class="token punctuation">.</span><span class="token function">loginWithRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取用户信息</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> auth0<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-1-3-Okta"><a href="#4-1-3-Okta" class="headerlink" title="4.1.3 Okta"></a>4.1.3 Okta</h4><ul><li><strong>特点</strong>：<ul><li>云原生设计。</li><li>丰富的集成能力。</li><li>自适应认证。</li></ul></li><li><strong>Spring Boot集成</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.okta.spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>okta-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">okta</span><span class="token punctuation">:</span><span class="token key attr-name">  issuer</span><span class="token punctuation">:</span> <span class="token value attr-value">https://&#123;yourOktaDomain&#125;/oauth2/default</span><span class="token key attr-name">  client-id</span><span class="token punctuation">:</span> <span class="token value attr-value">your-client-id</span><span class="token key attr-name">  client-secret</span><span class="token punctuation">:</span> <span class="token value attr-value">your-client-secret</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-自建SSO系统"><a href="#4-2-自建SSO系统" class="headerlink" title="4.2 自建SSO系统"></a>4.2 自建SSO系统</h3><h4 id="4-2-1-基于Spring-Security的SSO实现"><a href="#4-2-1-基于Spring-Security的SSO实现" class="headerlink" title="4.2.1 基于Spring Security的SSO实现"></a>4.2.1 基于Spring Security的SSO实现</h4><ul><li><strong>中央认证服务器</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">"client1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token string">"secret1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">"authorization_code"</span><span class="token punctuation">,</span> <span class="token string">"refresh_token"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"write"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">"client2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token string">"secret2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">"client_credentials"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        security<span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"isAuthenticated()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        endpoints<span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>资源服务器</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2-2-基于Redis的会话共享"><a href="#4-2-2-基于Redis的会话共享" class="headerlink" title="4.2.2 基于Redis的会话共享"></a>4.2.2 基于Redis的会话共享</h4><ul><li><strong>实现方式</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableRedisHttpSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSessionConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">LettuceConnectionFactory</span> <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span><span class="token key attr-name">spring.session.redis.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">myapp:session</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="5-SSO最佳实践"><a href="#5-SSO最佳实践" class="headerlink" title="5. SSO最佳实践"></a>5. SSO最佳实践</h2><h3 id="5-1-安全性最佳实践"><a href="#5-1-安全性最佳实践" class="headerlink" title="5.1 安全性最佳实践"></a>5.1 安全性最佳实践</h3><ul><li><strong>实施HTTPS</strong>：确保所有通信都通过HTTPS进行，防止中间人攻击。</li><li><strong>实施HTTP严格传输安全（HSTS）</strong>：防止SSL剥离攻击。</li><li><strong>使用强密码策略</strong>：要求用户使用复杂密码，并定期更换。</li><li><strong>实施令牌撤销机制</strong>：允许用户撤销不再使用的令牌。</li><li><strong>避免在URL中传递敏感令牌</strong>：使用HTTP头或Cookie传递令牌。</li><li><strong>启用多因素认证（MFA）</strong>：为敏感操作启用MFA，增加安全性。</li><li><strong>实施风险感知认证</strong>：根据用户行为和环境动态调整认证强度。</li></ul><h3 id="5-2-用户体验优化"><a href="#5-2-用户体验优化" class="headerlink" title="5.2 用户体验优化"></a>5.2 用户体验优化</h3><ul><li><strong>无缝登录体验</strong>：最小化重定向次数，优化登录流程。</li><li><strong>优化移动设备体验</strong>：确保在移动设备上也能快速登录。</li><li><strong>提供会话列表和远程注销功能</strong>：允许用户查看和管理所有活跃会话。</li><li><strong>支持并发会话控制</strong>：限制同一用户同时登录的设备数量。</li></ul><h3 id="5-3-可扩展性和高可用性"><a href="#5-3-可扩展性和高可用性" class="headerlink" title="5.3 可扩展性和高可用性"></a>5.3 可扩展性和高可用性</h3><ul><li><strong>水平扩展</strong>：使用无状态设计，通过负载均衡器分发请求。</li><li><strong>容错设计</strong>：实现服务降级机制，定期备份配置和密钥。</li></ul><h3 id="5-4-监控和审计"><a href="#5-4-监控和审计" class="headerlink" title="5.4 监控和审计"></a>5.4 监控和审计</h3><ul><li><strong>记录所有认证事件</strong>：包括成功和失败的登录尝试。</li><li><strong>实施实时告警</strong>：对异常行为及时发出警报。</li></ul><h2 id="6-SSO的挑战与解决方案"><a href="#6-SSO的挑战与解决方案" class="headerlink" title="6. SSO的挑战与解决方案"></a>6. SSO的挑战与解决方案</h2><h3 id="6-1-单点登出（SLO）问题"><a href="#6-1-单点登出（SLO）问题" class="headerlink" title="6.1 单点登出（SLO）问题"></a>6.1 单点登出（SLO）问题</h3><ul><li><strong>问题</strong>：用户从一个应用登出后，其他应用仍保持登录状态。</li><li><strong>解决方案</strong>：<ul><li>使用后端注销通知：当用户从一个应用登出时，通知其他应用进行注销。</li><li>使用前端注销通知：通过JavaScript在前端触发其他应用的登出操作。</li></ul></li></ul><h3 id="6-2-性能优化"><a href="#6-2-性能优化" class="headerlink" title="6.2 性能优化"></a>6.2 性能优化</h3><ul><li><strong>问题</strong>：SSO服务器在高并发场景下性能瓶颈。</li><li><strong>解决方案</strong>：<ul><li>缓存认证结果：减少对SSO服务器的直接请求。</li><li>水平扩展SSO服务器：通过负载均衡器分担请求。</li></ul></li></ul><h3 id="6-3-兼容性问题"><a href="#6-3-兼容性问题" class="headerlink" title="6.3 兼容性问题"></a>6.3 兼容性问题</h3><ul><li><strong>问题</strong>：不同应用可能使用不同的SSO协议或版本。</li><li><strong>解决方案</strong>：<ul><li>使用协议网关：将不同协议转换为统一的内部协议。</li><li>提供适配器：为每个应用开发适配器，以兼容不同的协议。</li></ul></li></ul><h2 id="7-SSO的未来趋势"><a href="#7-SSO的未来趋势" class="headerlink" title="7. SSO的未来趋势"></a>7. SSO的未来趋势</h2><h3 id="7-1-无密码认证"><a href="#7-1-无密码认证" class="headerlink" title="7.1 无密码认证"></a>7.1 无密码认证</h3><ul><li><strong>生物识别技术</strong>：指纹、面部识别等生物识别技术将逐渐普及。</li><li><strong>魔术链接（Magic Links）和一次性密码</strong>：通过邮件或短信发送一次性链接或密码，减少用户记忆密码的负担。</li></ul><h3 id="7-2-自适应认证"><a href="#7-2-自适应认证" class="headerlink" title="7.2 自适应认证"></a>7.2 自适应认证</h3><ul><li><strong>基于风险的认证策略</strong>：根据用户行为和环境动态调整认证强度。</li><li><strong>上下文感知认证</strong>：结合用户设备、位置等上下文信息进行认证。</li></ul><h3 id="7-3-去中心化身份（DID）"><a href="#7-3-去中心化身份（DID）" class="headerlink" title="7.3 去中心化身份（DID）"></a>7.3 去中心化身份（DID）</h3><ul><li><strong>自主身份（Self-sovereign Identity）</strong>：用户完全控制自己的身份信息。</li><li><strong>可验证凭证（Verifiable Credentials）</strong>：通过区块链等技术确保凭证的真实性和不可篡改。</li></ul><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>单点登录（SSO）技术通过允许用户使用单一凭据访问多个应用，极大地提升了用户体验和安全性。本文详细介绍了SSO的工作原理、主要实现技术（如CAS、SAML、OAuth&#x2F;OpenID Connect）、企业级解决方案以及最佳实践。随着身份管理的重要性不断提升，SSO技术将继续演进，融合更多创新元素，如无密码认证、自适应认证和去中心化身份。企业在实施SSO时，应根据自身需求选择合适的解决方案，并注重安全性、用户体验和可扩展性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.oasis-open.org/committees/security/">OASIS Security Services (SAML) TC</a></li><li><a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect Core 1.0</a></li><li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">Spring Security Documentation</a></li><li><a href="https://auth0.com/docs">Auth0 Documentation</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 单点登录 </tag>
            
            <tag> 企业应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录笔记</title>
      <link href="/2025/07/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛书籍笔记</title>
      <link href="/2025/07/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="《算法竞赛》笔记及拓展"><a href="#《算法竞赛》笔记及拓展" class="headerlink" title="《算法竞赛》笔记及拓展"></a>《算法竞赛》笔记及拓展</h1><h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li>链表的特点是用一组任意的存储单元存储线性表的数据元素，可以是连续的存储空间，也可以是不连续的存储空间。  </li><li>链表的基础操作有：初始化 添加 遍历 插入 删除 查找</li><li>链表分为单向链表和双向链表。<ul><li>单向链表：只能从头到尾遍历。</li><li>双向链表：可以从头到尾和从尾到头遍历。</li></ul></li><li>链表的存储方式有：<ul><li>静态链表：使用数组实现，适合元素个数已知</li><li>动态链表：使用指针实现，适合元素个数不确定<br>  动态链表<br>  静态链表<br>  STL</li></ul></li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯大纲知识点详解</title>
      <link href="/2025/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯大纲知识点详解"><a href="#蓝桥杯大纲知识点详解" class="headerlink" title="蓝桥杯大纲知识点详解"></a>蓝桥杯大纲知识点详解</h1><h2 id="大学C组"><a href="#大学C组" class="headerlink" title="大学C组"></a>大学C组</h2><h3 id="1-枚举-1-3"><a href="#1-枚举-1-3" class="headerlink" title="1. 枚举[1-3]"></a>1. 枚举[1-3]</h3><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举模板</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 枚举逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>遍历所有可能的情况</li><li>适用于数据规模较小的问题</li></ul><h4 id="题目特征"><a href="#题目特征" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>数据范围小(n ≤ 20)</li><li>需要穷举所有可能性</li></ul><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n) 或 O(n^k)</li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://codeforces.com/problemset/problem/1/A">Codeforces 1A - Theatre Square</a></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> minn <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>k <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minn <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">FIO<span class="token punctuation">.</span>P</span><span class="token punctuation">(</span>minn <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> minn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><a href="https://leetcode.cn/problems/subsets/">LeetCode 78 - 子集</a><br>枚举所有子集</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二进制枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">>></span> j  <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><a href="https://codeforces.com/problemset/problem/1/A">Codeforces 1A - Theatre Square</a></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token constant">FIO</span><span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FIO<span class="token punctuation">.</span>P</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">+</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h3><h4 id="1-冒泡排序-2"><a href="#1-冒泡排序-2" class="headerlink" title="(1) 冒泡排序[2]"></a>(1) 冒泡排序[2]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 冒泡排序模板</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 交换</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>相邻元素两两比较</li><li>每一轮将最大的元素冒泡到最后</li></ul><h4 id="题目特征-1"><a href="#题目特征-1" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要稳定排序</li><li>数据规模小(n ≤ 1000)</li></ul><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n^2)</li></ul><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://codeforces.com/problemset/problem/451/B">Codeforces 451B - Sort the Array</a></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入数组的大小</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 读取数组元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用TreeMap来存储元素及其索引</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 建立元素值到索引的映射</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 将原数组元素替换为其在排序数组中的索引</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">R</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 反转子数组</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 反转数组的辅助方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-选择排序-3"><a href="#2-选择排序-3" class="headerlink" title="(2) 选择排序[3]"></a>(2) 选择排序[3]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 选择排序模板</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 交换</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>每次找到未排序部分的最小元素</li><li>将其放到已排序部分的末尾</li></ul><h4 id="题目特征-2"><a href="#题目特征-2" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要不稳定排序</li><li>数据规模小(n ≤ 1000)</li></ul><h4 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n^2)</li></ul><h4 id="3-插入排序-3"><a href="#3-插入排序-3" class="headerlink" title="(3) 插入排序[3]"></a>(3) 插入排序[3]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入排序模板</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>将元素插入到已排序部分的适当位置</li><li>适用于部分有序的数据</li></ul><h4 id="题目特征-3"><a href="#题目特征-3" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要稳定排序</li><li>数据规模小(n ≤ 1000)</li></ul><h4 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n^2)</li></ul><h3 id="3-搜索-bfs-dfs-1-5"><a href="#3-搜索-bfs-dfs-1-5" class="headerlink" title="3. 搜索(bfs, dfs)[1-5]"></a>3. 搜索(bfs, dfs)[1-5]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// BFS模板</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>startNode<span class="token punctuation">)</span><span class="token punctuation">;</span>visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理当前节点</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> neighbor <span class="token operator">:</span> current<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用队列实现</li><li>按层次遍历图或树</li><li>适合寻找最短路径问题</li></ul><h4 id="题目特征-4"><a href="#题目特征-4" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要寻找最短路径或最少步骤</li><li>图或树的遍历问题</li></ul><h4 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(V+E) (V是顶点数，E是边数)</li></ul><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://leetcode.cn/problems/number-of-islands/">LeetCode 200 - 岛屿数量</a></li><li><a href="https://codeforces.com/problemset/problem/580/C">Codeforces 580C - Kefa and Park</a></li></ol><h4 id="2-DFS模板"><a href="#2-DFS模板" class="headerlink" title="(2) DFS模板"></a>(2) DFS模板</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// DFS模板</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 处理当前节点</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> neighbor <span class="token operator">:</span> node<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用递归或栈实现</li><li>深度优先遍历图或树</li><li>适合寻找所有可能解的问题</li></ul><h4 id="题目特征-5"><a href="#题目特征-5" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要遍历所有可能路径</li><li>排列组合问题</li><li>回溯问题</li></ul><h4 id="时间复杂度-5"><a href="#时间复杂度-5" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(V+E) (V是顶点数，E是边数)</li></ul><h3 id="4-贪心-1-5"><a href="#4-贪心-1-5" class="headerlink" title="4. 贪心[1-5]"></a>4. 贪心[1-5]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 贪心算法模板</span><span class="token keyword">while</span> <span class="token punctuation">(</span>问题未解决<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 选择当前最优解</span>    <span class="token class-name">Solution</span> best <span class="token operator">=</span> <span class="token function">selectBestOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 应用最优解</span>    <span class="token function">applySolution</span><span class="token punctuation">(</span>best<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 更新问题状态</span>    <span class="token function">updateProblemState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>每一步选择当前最优解</li><li>不回溯，不重新考虑之前的选择</li><li>需要证明贪心选择的正确性</li></ul><h4 id="题目特征-6"><a href="#题目特征-6" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>问题具有最优子结构</li><li>贪心选择能得到全局最优解</li><li>常见于区间调度、背包问题等</li></ul><h4 id="时间复杂度-6"><a href="#时间复杂度-6" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>通常为O(n)或O(nlogn)</li></ul><h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://leetcode.cn/problems/assign-cookies/">LeetCode 455 - 分发饼干</a></li><li><a href="https://codeforces.com/problemset/problem/1353/B">Codeforces 1353B - Two Arrays And Swaps</a></li></ol><h3 id="5-模拟-1-3"><a href="#5-模拟-1-3" class="headerlink" title="5. 模拟[1-3]"></a>5. 模拟[1-3]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟算法模板</span><span class="token keyword">while</span> <span class="token punctuation">(</span>条件满足<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 按照题目要求逐步执行</span>    <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>      <span class="token comment">// 更新状态</span>    <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>严格按照题目描述实现</li><li>逐步模拟题目描述的过程</li><li>注意边界条件和特殊情况</li></ul><h4 id="题目特征-7"><a href="#题目特征-7" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>题目描述详细且步骤明确</li><li>需要精确实现特定规则</li><li>常见于游戏规则模拟、物理过程模拟等</li></ul><h4 id="时间复杂度-7"><a href="#时间复杂度-7" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>通常为O(n)或O(n^2)</li></ul><h4 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://www.lanqiao.cn/problems/7">蓝桥杯练习系统 - 模拟题</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix/">LeetCode 54 - 螺旋矩阵</a></li><li><a href="https://codeforces.com/problemset/problem/4/A">Codeforces 4A - Watermelon</a></li></ol><h3 id="6-二分-2-5"><a href="#6-二分-2-5" class="headerlink" title="6. 二分[2-5]"></a>6. 二分[2-5]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二分查找模板</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 未找到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>适用于有序数组的查找</li><li>每次将搜索范围缩小一半</li><li>注意边界条件的处理</li></ul><h4 id="题目特征-8"><a href="#题目特征-8" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>数据已排序或可以排序</li><li>需要高效查找(优于O(n))</li><li>常见于查找特定值或满足条件的极值</li></ul><h4 id="时间复杂度-8"><a href="#时间复杂度-8" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(logn)</li></ul><h4 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://leetcode.cn/problems/binary-search/">LeetCode 704 - 二分查找</a></li><li><a href="https://codeforces.com/problemset/problem/812/C">Codeforces 812C - Sagheer and Nubian Market</a></li></ol><h3 id="7-DP-普通一维问题-3-5"><a href="#7-DP-普通一维问题-3-5" class="headerlink" title="7. DP(普通一维问题)[3-5]"></a>7. DP(普通一维问题)[3-5]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 一维DP模板</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 状态转移</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 示例状态转移方程</span><span class="token punctuation">&#125;</span><span class="token comment">// 结果</span><span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>定义状态dp[i]表示问题在i处的解</li><li>找出状态转移方程</li><li>初始化边界条件</li><li>按顺序计算dp数组</li></ul><h4 id="题目特征-9"><a href="#题目特征-9" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>问题可以分解为子问题</li><li>子问题之间有重叠</li><li>有最优子结构性质</li></ul><h4 id="时间复杂度-9"><a href="#时间复杂度-9" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>通常为O(n)</li></ul><h4 id="例题-6"><a href="#例题-6" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://www.lanqiao.cn/problems/9">蓝桥杯练习系统 - 动态规划题</a></li><li><a href="https://leetcode.cn/problems/maximum-subarray/">LeetCode 53 - 最大子数组和</a></li><li><a href="https://codeforces.com/problemset/problem/580/A">Codeforces 580A - Kefa and First Steps</a></li></ol><h3 id="8-高精度-1-5"><a href="#8-高精度-1-5" class="headerlink" title="8. 高精度[1-5]"></a>8. 高精度[1-5]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 高精度加法模板</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用字符串或数组表示大数</li><li>模拟手工计算过程</li><li>注意进位处理</li></ul><h4 id="题目特征-10"><a href="#题目特征-10" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>数字超出基本数据类型范围</li><li>需要精确计算</li><li>常见于大数加减乘除运算</li></ul><h4 id="时间复杂度-10"><a href="#时间复杂度-10" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n) 其中n为数字的位数</li></ul><h4 id="例题-7"><a href="#例题-7" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://www.lanqiao.cn/problems/10">蓝桥杯练习系统 - 高精度计算题</a></li><li><a href="https://leetcode.cn/problems/add-strings/">LeetCode 415 - 字符串相加</a></li><li><a href="https://codeforces.com/problemset/problem/1016/A">Codeforces 1016A - Death Note</a></li></ol><h3 id="9-数据结构"><a href="#9-数据结构" class="headerlink" title="9. 数据结构"></a>9. 数据结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 栈模板</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span><span class="token keyword">int</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取栈顶元素</span><span class="token keyword">int</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出栈</span><span class="token keyword">boolean</span> isEmpty <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断栈是否为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>后进先出(LIFO)的数据结构</li><li>适用于需要回溯的场景</li><li>常用于括号匹配、表达式求值等问题</li></ul><h4 id="题目特征-11"><a href="#题目特征-11" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要记录访问顺序</li><li>需要撤销操作</li><li>需要匹配对称结构</li></ul><h4 id="时间复杂度-11"><a href="#时间复杂度-11" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>基本操作均为O(1)</li></ul><h4 id="例题-8"><a href="#例题-8" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://www.lanqiao.cn/problems/11">蓝桥杯练习系统 - 数据结构题</a></li><li><a href="https://leetcode.cn/problems/valid-parentheses/">LeetCode 20 - 有效的括号</a></li><li><a href="https://codeforces.com/problemset/problem/546/A">Codeforces 546A - Soldier and Bananas</a></li></ol><h4 id="2-队列-2-5"><a href="#2-队列-2-5" class="headerlink" title="(2) 队列[2-5]"></a>(2) 队列[2-5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 队列模板</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入队</span><span class="token keyword">int</span> front <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取队首元素</span><span class="token keyword">int</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出队</span><span class="token keyword">boolean</span> isEmpty <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断队列是否为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>先进先出(FIFO)的数据结构</li><li>适用于需要按顺序处理的场景</li><li>常用于BFS、滑动窗口等问题</li></ul><h4 id="题目特征-12"><a href="#题目特征-12" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要按顺序处理元素</li><li>需要维护一个处理序列</li><li>需要广度优先遍历</li></ul><h4 id="时间复杂度-12"><a href="#时间复杂度-12" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>基本操作均为O(1)</li></ul><h4 id="3-链表-2-5"><a href="#3-链表-2-5" class="headerlink" title="(3) 链表 [2-5]"></a>(3) 链表 [2-5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 链表节点定义</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 链表遍历模板</span><span class="token class-name">ListNode</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理当前节点</span>    current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>动态数据结构，节点通过指针连接</li><li>适用于频繁插入删除的场景</li><li>常用于实现其他数据结构</li></ul><h4 id="题目特征-13"><a href="#题目特征-13" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要频繁插入删除操作</li><li>数据规模动态变化</li><li>需要灵活的内存分配</li></ul><h4 id="时间复杂度-13"><a href="#时间复杂度-13" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>遍历为O(n)</li><li>插入删除为O(1)（已知位置）</li></ul><h3 id="10-数学"><a href="#10-数学" class="headerlink" title="10. 数学"></a>10. 数学</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断质数模板</span><span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最大公约数模板(欧几里得算法)</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最小公倍数模板</span><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>质数判断: 试除法</li><li>最大公约数: 欧几里得算法</li><li>最小公倍数: 基于最大公约数计算</li><li>适用于数论相关题目</li></ul><h4 id="题目特征-14"><a href="#题目特征-14" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>涉及质数、因数、倍数等问题</li><li>需要计算公约数或公倍数</li><li>常见于数学计算类题目</li></ul><h4 id="时间复杂度-14"><a href="#时间复杂度-14" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>质数判断: O(√n)</li><li>最大公约数: O(log(min(a,b)))</li></ul><h4 id="例题-9"><a href="#例题-9" class="headerlink" title="例题"></a>例题</h4><ol><li><a href="https://www.lanqiao.cn/problems/12">蓝桥杯练习系统 - 数学题</a></li><li><a href="https://leetcode.cn/problems/count-primes/">LeetCode 204 - 计数质数</a></li><li><a href="https://codeforces.com/problemset/problem/231/A">Codeforces 231A - Team</a></li></ol><h2 id="大学B组"><a href="#大学B组" class="headerlink" title="大学B组"></a>大学B组</h2><h3 id="11-排序算法"><a href="#11-排序算法" class="headerlink" title="11. 排序算法"></a>11. 排序算法</h3><h4 id="（1）归并排序-4-5"><a href="#（1）归并排序-4-5" class="headerlink" title="（1）归并排序[4-5]"></a>（1）归并排序[4-5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 合并两个有序子数组</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>分治思想，先递归分解数组，再合并有序子序列</li><li>典型题目：逆序对问题、外部排序</li><li>时间复杂度：O(nlogn)</li></ul><h4 id="（2）快速排序-4-5"><a href="#（2）快速排序-4-5" class="headerlink" title="（2）快速排序[4-5]"></a>（2）快速排序[4-5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 分区操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>选取基准值，将数组分为两部分</li><li>典型题目：TopK问题、中位数问题</li><li>时间复杂度：平均O(nlogn)，最坏O(n²)</li></ul><h4 id="（3）桶排序-4"><a href="#（3）桶排序-4" class="headerlink" title="（3）桶排序[4]"></a>（3）桶排序[4]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建桶并分配元素</span>        <span class="token comment">// 对每个桶进行排序</span>        <span class="token comment">// 合并所有桶</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>将数据分到有限数量的桶里</li><li>典型题目：数据范围已知且分布均匀的情况</li><li>时间复杂度：O(n+k)</li></ul><h4 id="（4）堆排序-4"><a href="#（4）堆排序-4" class="headerlink" title="（4）堆排序[4]"></a>（4）堆排序[4]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构建最大堆</span>        <span class="token comment">// 交换堆顶元素与末尾元素</span>        <span class="token comment">// 调整堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>利用堆这种数据结构设计的排序算法</li><li>典型题目：优先级队列、实时求TopK</li><li>时间复杂度：O(nlogn)</li></ul><h4 id="（5）基数排序-4-5"><a href="#（5）基数排序-4-5" class="headerlink" title="（5）基数排序[4~5]"></a>（5）基数排序[4~5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取最大位数</span>        <span class="token comment">// 按位进行计数排序</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>按照低位先排序，然后收集；再按高位排序</li><li>典型题目：多关键字排序（如日期、电话号码）</li><li>时间复杂度：O(n*k)</li></ul><h3 id="12-搜索算法"><a href="#12-搜索算法" class="headerlink" title="12. 搜索算法"></a>12. 搜索算法</h3><h4 id="（1）剪枝-4-6"><a href="#（1）剪枝-4-6" class="headerlink" title="（1）剪枝[4-6]"></a>（1）剪枝[4-6]</h4><p><strong>解题思路</strong>：</p><ul><li>在搜索过程中提前排除不可能的分支</li><li>典型题目：数独、八皇后问题</li></ul><h4 id="（2）双向BFS-5-6"><a href="#（2）双向BFS-5-6" class="headerlink" title="（2）双向BFS[5-6]"></a>（2）双向BFS[5-6]</h4><p><strong>解题思路</strong>：</p><ul><li>从起点和终点同时开始BFS</li><li>典型题目：单词接龙、迷宫最短路径</li></ul><h4 id="（3）记忆化搜索-5"><a href="#（3）记忆化搜索-5" class="headerlink" title="（3）记忆化搜索[5]"></a>（3）记忆化搜索[5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java实现模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memoization</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 计算并存储结果</span>        memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>存储中间结果避免重复计算</li><li>典型题目：斐波那契数列、爬楼梯问题</li></ul><h4 id="（4）迭代加深搜索-5-6"><a href="#（4）迭代加深搜索-5-6" class="headerlink" title="（4）迭代加深搜索[5-6]"></a>（4）迭代加深搜索[5-6]</h4><p><strong>解题思路</strong>：</p><ul><li>结合DFS和BFS，逐步增加深度限制</li><li>典型题目：IDA*算法、拼图问题</li></ul><h4 id="（5）启发式搜索-7"><a href="#（5）启发式搜索-7" class="headerlink" title="（5）启发式搜索[7]"></a>（5）启发式搜索[7]</h4><p><strong>解题思路</strong>：</p><ul><li>使用估价函数指导搜索方向</li><li>典型题目：A*算法、八数码问题</li></ul><h3 id="13-动态规划"><a href="#13-动态规划" class="headerlink" title="13. 动态规划"></a>13. 动态规划</h3><h4 id="（1）背包DP-4-6"><a href="#（1）背包DP-4-6" class="headerlink" title="（1）背包DP[4-6]"></a>（1）背包DP[4-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 01背包模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knapsack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> capacity<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>                                       dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>状态转移方程：dp[i][j] &#x3D; max(dp[i-1][j], dp[i-1][j-w]+v)</li><li>典型题目：01背包、完全背包、多重背包</li></ul><h4 id="（2）树形DP-4-6"><a href="#（2）树形DP-4-6" class="headerlink" title="（2）树形DP[4-6]"></a>（2）树形DP[4-6]</h4><p><strong>解题思路</strong>：</p><ul><li>在树结构上进行动态规划</li><li>典型题目：二叉树中的最大路径和、树的最小支配集</li></ul><p><strong>题目描述</strong><br>  给定一棵树，每个节点有权值，选择节点时不能选相邻节点，求最大权值和。</p><p>定义 dp[i][0] 表示不选节点 i 时的最大值，dp[i][1] 表示选择节点 i 时的最大值。<br>状态转移：<br>dp[i][1] &#x3D; sum(dp[child][0]) + val[i]<br>dp[i][0] &#x3D; sum(max(dp[child][0], dp[child][1]))</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 树形DP核心（DFS遍历）</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）状压DP-5-6"><a href="#（3）状压DP-5-6" class="headerlink" title="（3）状压DP[5-6]"></a>（3）状压DP[5-6]</h4><p><strong>解题思路</strong>：</p><ul><li>使用位运算表示状态</li><li>典型题目：旅行商问题、棋盘覆盖问题</li><li>例如，给定一个 n 个元素的集合，求所有子集的和。</li></ul><h5 id="例题-10"><a href="#例题-10" class="headerlink" title="例题"></a>例题</h5><ol><li><a href="https://leetcode.cn/problems/subsets/">LeetCode 78 - 子集</a></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 位运算枚举所有子集</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mask <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> mask<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> subset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    subset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/can-i-win/"><strong>LeetCode 464 - 我能赢吗</strong></a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 状态压缩+记忆化搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canIWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxChoosableInteger<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredTotal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxChoosableInteger <span class="token operator">>=</span> desiredTotal<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> maxChoosableInteger<span class="token punctuation">)</span> <span class="token operator">*</span> maxChoosableInteger <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;</span> desiredTotal<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxChoosableInteger <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxChoosableInteger<span class="token punctuation">,</span> desiredTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> remain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>state <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>remain <span class="token operator">-</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>state <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> remain <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）数位DP-5-6"><a href="#（4）数位DP-5-6" class="headerlink" title="（4）数位DP[5-6]"></a>（4）数位DP[5-6]</h4><p><strong>解题思路</strong>：</p><ul><li>处理数字位上的计数问题</li><li>典型题目：统计区间内满足条件的数字个数</li></ul><p><strong>题目描述</strong><br>统计区间内满足特定条件的数字个数（如不含某数字）。<br>记忆化搜索：记录当前位数、前导零状态、限制状态等。<br>例如，统计 [a, b] 中不含数字 4 的数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">boolean</span> limit<span class="token punctuation">,</span> <span class="token keyword">boolean</span> leadZero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> num<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leadZero <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> up <span class="token operator">=</span> limit <span class="token operator">?</span> num<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 排除数字4</span>        res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> limit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> up<span class="token punctuation">)</span><span class="token punctuation">,</span> leadZero <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leadZero<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h4><p><strong>解题思路</strong></p><ul><li>在区间上进行动态规划</li><li>典型题目：区间合并、区间最小值</li><li>例如，给定一个区间 [l, r]，求区间内的最小值和最大值。</li></ul><h5 id="例题-11"><a href="#例题-11" class="headerlink" title="例题"></a>例题</h5><ol><li><a href="https://leetcode.cn/problems/burst-balloons/">LeetCode 312 - 戳气球</a></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment">// 创建一个新的数组，两端添加1，方便处理边界条件</span>        <span class="token comment">// 例如，原数组是 [3,1,5,8]，扩展后变为 [1,3,1,5,8,1]</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 创建动态规划表，dp[l][r] 表示从索引 l 到 r 的气球中能获得的最大硬币数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 遍历所有可能的区间长度，从1到n</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 遍历所有可能的左边界 l</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 计算右边界 r</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> l <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token comment">// 尝试每个中间点 k 作为最后一个被戳破的气球</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 状态转移方程：</span>                    <span class="token comment">// dp[l][r] = max(dp[l][r], dp[l][k-1] + dp[k+1][r] + arr[l-1] * arr[k] * arr[r+1])</span>                    <span class="token comment">// dp[l][k-1]：左边部分的最大硬币数</span>                    <span class="token comment">// dp[k+1][r]：右边部分的最大硬币数</span>                    <span class="token comment">// arr[l-1] * arr[k] * arr[r+1]：戳破第 k 个气球时获得的硬币数</span>                    dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>                         dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 返回从索引1到n的最大硬币数</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/description/">516. 最长回文子序列 - 力（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建一个二维动态规划表 dp，其中 dp[i][j] 表示从索引 i 到 j 的子串中最长回文子序列的长度</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 填充动态规划表</span>        <span class="token comment">// 从右向左填充，确保计算 dp[i][j] 时，dp[i+1][j-1] 已经被计算过</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 初始化 dp[i][i] 为 1，因为单个字符本身就是回文</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取当前字符</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 遍历从 i+1 到 n-1 的所有 j</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取当前字符</span>                <span class="token keyword">char</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 如果字符相等，说明可以扩展一个回文子序列</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 状态转移方程：dp[i][j] = dp[i+1][j-1] + 2</span>                    <span class="token comment">// dp[i+1][j-1] 表示中间部分的最长回文子序列长度</span>                    <span class="token comment">// +2 是因为当前两个字符相等，可以扩展</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果字符不相等，取左右两边的最大值</span>                    <span class="token comment">// dp[i+1][j] 表示去掉左边字符后的最长回文子序列</span>                    <span class="token comment">// dp[i][j-1] 表示去掉右边字符后的最长回文子序列</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 返回整个字符串的最长回文子序列长度</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（5）DP的常见优化-7"><a href="#（5）DP的常见优化-7" class="headerlink" title="（5）DP的常见优化[7]"></a>（5）DP的常见优化[7]</h4><ol><li>斜率优化（任务安排问题）<br><a href="https://www.luogu.com.cn/problem/P2365">洛谷P2365</a><br>斜率优化解法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 洛谷P2365 完整题解代码（需导入java.util.*）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token class-name">S</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 前缀和数组（从1开始存储）</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 时间前缀和</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 费用前缀和</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// DP数组初始化</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始状态</span>                <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始决策点</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 维护队列头部的决策最优性（斜率比较）</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j1 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j2 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 若斜率 (dp[j2]-dp[j1])/(C[j2]-C[j1]) &lt;= S + T[i]</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j2<span class="token punctuation">]</span><span class="token operator">-</span>dp<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token class-name">S</span> <span class="token operator">+</span> <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span><span class="token operator">-</span><span class="token class-name">C</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 说明j1不是最优解</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复队列</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">int</span> j <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 状态转移方程</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token class-name">S</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">C</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">C</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 维护队列的凸包性质（后部斜率检查）</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j1 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j2 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 比较两段斜率：j2->j1 与 j1->i</span>                <span class="token keyword">long</span> dy1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>j2<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> dx1 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">C</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> dy2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> dx2 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">C</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token comment">// 若 dy1/dx1 >= dy2/dx2（避免除法，交叉相乘）</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dy1 <span class="token operator">*</span> dx2 <span class="token operator">>=</span> dy2 <span class="token operator">*</span> dx1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 需要删除j1保持下凸</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复队列</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            q<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入当前决策点</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>四边形不等式优化（石子合并）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 石子合并 O(n²)优化版</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 决策点数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 前缀和</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 初始化决策点</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>        <span class="token comment">// 利用四边形不等式优化的决策范围</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> cost <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cost <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">;</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token comment">// 记录最优决策点</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>单调队列优化（滑动窗口最大值）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 滑动窗口最大值 O(n)解法</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储下标</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 移除超出窗口范围的元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 维护单调递减队列</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                q<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 记录窗口最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-字符串算法"><a href="#14-字符串算法" class="headerlink" title="14. 字符串算法"></a>14. 字符串算法</h3><h4 id="（1）哈希-4-5"><a href="#（1）哈希-4-5" class="headerlink" title="（1）哈希[4-5]"></a>（1）哈希[4-5]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符串哈希模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringHash</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hash <span class="token operator">=</span> hash <span class="token operator">*</span> <span class="token number">131</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>将字符串映射为唯一数值</li><li>典型题目：字符串匹配、重复子串检测</li></ul><h4 id="（2）KMP-4-6"><a href="#（2）KMP-4-6" class="headerlink" title="（2）KMP[4-6]"></a>（2）KMP[4-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// KMP算法模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMP</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构建next数组</span>        <span class="token comment">// 匹配过程</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>利用部分匹配信息跳过不必要比较</li><li>典型题目：字符串匹配、循环节问题</li></ul><h4 id="（3）Manacher-4-6"><a href="#（3）Manacher-4-6" class="headerlink" title="（3）Manacher[4-6]"></a>（3）Manacher[4-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Manacher算法模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manacher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 预处理字符串</span>        <span class="token comment">// 计算回文半径数组</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>线性时间求最长回文子串</li><li>典型题目：最长回文子串、回文分割</li></ul><h3 id="15-图论算法"><a href="#15-图论算法" class="headerlink" title="15. 图论算法"></a>15. 图论算法</h3><h4 id="（1）欧拉回路-5-7"><a href="#（1）欧拉回路-5-7" class="headerlink" title="（1）欧拉回路[5-7]"></a>（1）欧拉回路[5-7]</h4><p><strong>解题思路</strong>：</p><ul><li>图中存在经过每条边恰好一次的回路</li><li>典型题目：一笔画问题、邮路问题</li></ul><h4 id="（2）最小生成树-5-7"><a href="#（2）最小生成树-5-7" class="headerlink" title="（2）最小生成树[5-7]"></a>（2）最小生成树[5-7]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Kruskal算法模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kruskal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 并查集实现</span>        <span class="token comment">// 按边权排序</span>        <span class="token comment">// 选择边</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>连接所有顶点的最小权值子图</li><li>典型题目：城市道路建设、网络布线</li></ul><h4 id="（3）单源最短路及差分约束系统-5-7"><a href="#（3）单源最短路及差分约束系统-5-7" class="headerlink" title="（3）单源最短路及差分约束系统[5-7]"></a>（3）单源最短路及差分约束系统[5-7]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Dijkstra算法模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dijkstra</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 优先队列实现</span>        <span class="token comment">// 松弛操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>求从一个点到其他所有点的最短路径</li><li>典型题目：路由选择、差分约束系统</li></ul><h4 id="（4）拓扑序列-5-7"><a href="#（4）拓扑序列-5-7" class="headerlink" title="（4）拓扑序列[5-7]"></a>（4）拓扑序列[5-7]</h4><p><strong>解题思路</strong>：</p><ul><li>有向无环图的线性排序</li><li>典型题目：课程安排、任务调度</li></ul><h4 id="（5）二分图匹配-7"><a href="#（5）二分图匹配-7" class="headerlink" title="（5）二分图匹配[7]"></a>（5）二分图匹配[7]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匈牙利算法模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungarian</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxMatch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 匹配过程</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>求二分图的最大匹配</li><li>典型题目：任务分配、婚姻匹配问题</li></ul><h4 id="（6）图的连通性问题-7"><a href="#（6）图的连通性问题-7" class="headerlink" title="（6）图的连通性问题[7]"></a>（6）图的连通性问题[7]</h4><p><strong>解题思路</strong>：</p><ul><li>割点、桥、强连通分量</li><li>典型题目：关键节点检测、网络脆弱性分析</li></ul><h4 id="（7）DFS序-5-7"><a href="#（7）DFS序-5-7" class="headerlink" title="（7）DFS序[5-7]"></a>（7）DFS序[5-7]</h4><p><strong>解题思路</strong>：</p><ul><li>对树进行深度优先遍历得到的顺序</li><li>典型题目：子树查询、树链剖分</li></ul><h4 id="（8）最近共同祖先-5-7"><a href="#（8）最近共同祖先-5-7" class="headerlink" title="（8）最近共同祖先[5-7]"></a>（8）最近共同祖先[5-7]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// LCA模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LCA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 倍增法实现</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解题思路</strong>：</p><ul><li>求树中两个节点的最近公共祖先</li><li>典型题目：家族关系查询、树路径问题</li></ul><h3 id="16-数学"><a href="#16-数学" class="headerlink" title="16. 数学"></a>16. 数学</h3><h4 id="1-排列组合-5-6"><a href="#1-排列组合-5-6" class="headerlink" title="(1) 排列组合[5-6]"></a>(1) 排列组合[5-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 排列数模板</span><span class="token keyword">int</span> <span class="token function">permutation</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">*=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 组合数模板(递推法)</span><span class="token keyword">int</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> n <span class="token operator">-</span> k<span class="token punctuation">)</span> k <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> k <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 组合数模板(动态规划)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initCombinationDP</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token class-name">C</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>排列: 考虑顺序的选择</li><li>组合: 不考虑顺序的选择</li><li>递推法和动态规划预处理</li></ul><h4 id="题目特征-15"><a href="#题目特征-15" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要计算选择方式数量</li><li>涉及概率或统计问题</li><li>常见于计数类题目</li></ul><h4 id="时间复杂度-15"><a href="#时间复杂度-15" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>递推法: O(k)</li><li>动态规划预处理: O(n^2)</li></ul><h4 id="2-二项式定理-6"><a href="#2-二项式定理-6" class="headerlink" title="(2) 二项式定理[6]"></a>(2) 二项式定理[6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二项式展开模板</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binomialExpansion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coefficients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    coefficients<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        coefficients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> coefficients<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> coefficients<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>计算(x+y)^n展开式的系数</li><li>使用组合数计算各项系数</li><li>适用于多项式展开问题</li></ul><h4 id="题目特征-16"><a href="#题目特征-16" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要多项式展开</li><li>涉及组合数学问题</li><li>需要高效计算系数</li></ul><h4 id="时间复杂度-16"><a href="#时间复杂度-16" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n)</li></ul><h3 id="17-数据结构"><a href="#17-数据结构" class="headerlink" title="17. 数据结构"></a>17. 数据结构</h3><h4 id="1-ST表-5-6"><a href="#1-ST表-5-6" class="headerlink" title="(1) ST表[5-6]"></a>(1) ST表[5-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ST表模板(区间最大值查询)</span><span class="token keyword">class</span> <span class="token class-name">SparseTable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">SparseTable</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> log<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>          <span class="token keyword">int</span> k <span class="token operator">=</span> log<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> log<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-17"><a href="#解题思路-17" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>预处理区间最值</li><li>支持O(1)查询</li><li>适用于静态区间查询</li></ul><h4 id="题目特征-17"><a href="#题目特征-17" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要频繁查询区间最值</li><li>数据静态不修改</li><li>查询次数远大于预处理时间</li></ul><h4 id="时间复杂度-17"><a href="#时间复杂度-17" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>预处理O(nlogn)</li><li>查询O(1)</li></ul><h4 id="2-堆-5-6"><a href="#2-堆-5-6" class="headerlink" title="(2) 堆[5-6]"></a>(2) 堆[5-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 堆模板(优先队列实现)</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义比较器</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> customHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">.</span>priority <span class="token operator">-</span> b<span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 堆操作</span>heap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入</span><span class="token keyword">int</span> top <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取堆顶</span><span class="token keyword">int</span> pop <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出堆顶</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-18"><a href="#解题思路-18" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>完全二叉树结构</li><li>父节点优于子节点</li><li>高效获取极值</li></ul><h4 id="题目特征-18"><a href="#题目特征-18" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要频繁获取极值</li><li>需要动态维护有序集合</li><li>常见于调度问题</li></ul><h4 id="时间复杂度-18"><a href="#时间复杂度-18" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>插入O(logn)</li><li>获取极值O(1)</li><li>删除极值O(logn)</li></ul><h4 id="3-树状数组-5-6"><a href="#3-树状数组-5-6" class="headerlink" title="(3) 树状数组[5-6]"></a>(3) 树状数组[5-6]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 树状数组模板</span><span class="token keyword">class</span> <span class="token class-name">FenwickTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">FenwickTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> tree<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>            index <span class="token operator">+=</span> index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> tree<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">-=</span> index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-19"><a href="#解题思路-19" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>高效维护前缀和</li><li>支持单点更新和区间查询</li><li>二进制索引技术</li></ul><h4 id="题目特征-19"><a href="#题目特征-19" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要频繁更新和查询前缀和</li><li>数据动态变化</li><li>需要高效统计</li></ul><h4 id="时间复杂度-19"><a href="#时间复杂度-19" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>更新O(logn)</li><li>查询O(logn)</li></ul><h2 id="研究生及大学A组"><a href="#研究生及大学A组" class="headerlink" title="研究生及大学A组"></a>研究生及大学A组</h2><h3 id="19-字符串"><a href="#19-字符串" class="headerlink" title="19. 字符串"></a>19. 字符串</h3><h4 id="1-AC自动机-7-8"><a href="#1-AC自动机-7-8" class="headerlink" title="(1) AC自动机[7-8]"></a>(1) AC自动机[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// AC自动机模板</span><span class="token keyword">class</span> <span class="token class-name">ACNode</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ACNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">ACNode</span> fail<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ACAutomaton</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ACNode</span> root<span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">buildTrie</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> patterns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> patterns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ACNode</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> patterns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>output <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                current<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            current<span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">void</span> <span class="token function">buildFailureLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ACNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>fail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ACNode</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ACNode</span> child <span class="token operator">=</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">ACNode</span> failNode <span class="token operator">=</span> current<span class="token punctuation">.</span>fail<span class="token punctuation">;</span>                                <span class="token keyword">while</span> <span class="token punctuation">(</span>failNode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> failNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        failNode <span class="token operator">=</span> failNode<span class="token punctuation">.</span>fail<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                                child<span class="token punctuation">.</span>fail <span class="token operator">=</span> <span class="token punctuation">(</span>failNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> root <span class="token operator">:</span> failNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>fail<span class="token punctuation">.</span>output <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>output <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            child<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        child<span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>fail<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ACNode</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> text<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>fail<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            current <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> root <span class="token operator">:</span> current<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>output <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-20"><a href="#解题思路-20" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>结合Trie树和KMP算法</li><li>构建失败指针实现高效多模式匹配</li><li>适用于大量模式串的匹配问题</li></ul><h4 id="题目特征-20"><a href="#题目特征-20" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要同时匹配多个模式串</li><li>文本串较长</li><li>模式串有公共前缀</li></ul><h4 id="时间复杂度-20"><a href="#时间复杂度-20" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>构建O(Σ|P|)</li><li>匹配O(|T| + m)</li></ul><h4 id="2-拓展kmp-7-8"><a href="#2-拓展kmp-7-8" class="headerlink" title="(2) 拓展kmp[7-8]"></a>(2) 拓展kmp[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 拓展kmp模板</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">extendKMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 计算next数组</span>    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p <span class="token operator">||</span> i <span class="token operator">+</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p<span class="token punctuation">)</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>p <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">-</span> i<span class="token punctuation">;</span>            a <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 计算extend数组</span>    a <span class="token operator">=</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p <span class="token operator">||</span> i <span class="token operator">+</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> p<span class="token punctuation">)</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> p <span class="token operator">-</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>p <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>            extend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">-</span> i<span class="token punctuation">;</span>            a <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            extend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> extend<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-21"><a href="#解题思路-21" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>计算字符串每个位置的最长公共前缀</li><li>利用已匹配信息优化计算</li><li>适用于字符串匹配和比较问题</li></ul><h4 id="题目特征-21"><a href="#题目特征-21" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要比较字符串的所有后缀</li><li>需要高效计算最长公共前缀</li><li>常见于字符串匹配问题</li></ul><h4 id="时间复杂度-21"><a href="#时间复杂度-21" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n+m)</li></ul><h3 id="22-字符串匹配算法"><a href="#22-字符串匹配算法" class="headerlink" title="22. 字符串匹配算法"></a>22. 字符串匹配算法</h3><h4 id="1-KMP算法-7-8"><a href="#1-KMP算法-7-8" class="headerlink" title="(1) KMP算法[7-8]"></a>(1) KMP算法[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// KMP算法模板</span><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lps <span class="token operator">=</span> <span class="token function">computeLPS</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token comment">// 匹配成功</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 未匹配</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">computeLPS</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lps<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>len<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                len <span class="token operator">=</span> lps<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                lps<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> lps<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-22"><a href="#解题思路-22" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>预处理模式串生成部分匹配表</li><li>利用已匹配信息避免重复比较</li><li>线性时间复杂度</li></ul><h4 id="题目特征-22"><a href="#题目特征-22" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要高效字符串匹配</li><li>模式串有重复子串</li><li>适用于大文本搜索</li></ul><h4 id="时间复杂度-22"><a href="#时间复杂度-22" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n+m)</li></ul><h4 id="2-Trie树-7-8"><a href="#2-Trie树-7-8" class="headerlink" title="(2) Trie树[7-8]"></a>(2) Trie树[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Trie树模板</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token class-name">TrieNode</span> root<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-23"><a href="#解题思路-23" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>前缀树数据结构</li><li>高效字符串存储和检索</li><li>支持前缀匹配</li></ul><h4 id="题目特征-23"><a href="#题目特征-23" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要处理大量字符串</li><li>需要前缀匹配或自动补全</li><li>适用于字典类问题</li></ul><h4 id="时间复杂度-23"><a href="#时间复杂度-23" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>插入和查询均为O(L)</li></ul><h3 id="23-高级图论算法"><a href="#23-高级图论算法" class="headerlink" title="23. 高级图论算法"></a>23. 高级图论算法</h3><h4 id="1-最小生成树-7-8"><a href="#1-最小生成树-7-8" class="headerlink" title="(1) 最小生成树[7-8]"></a>(1) 最小生成树[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Kruskal算法模板</span><span class="token keyword">int</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootU <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootV <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootU <span class="token operator">!=</span> rootV<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootU<span class="token punctuation">]</span> <span class="token operator">=</span> rootV<span class="token punctuation">;</span>            res <span class="token operator">+=</span> w<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-24"><a href="#解题思路-24" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>贪心选择最小权边</li><li>使用并查集检测环</li><li>适用于连通图</li></ul><h4 id="题目特征-24"><a href="#题目特征-24" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要连接所有节点</li><li>要求总权重最小</li><li>适用于网络设计问题</li></ul><h4 id="时间复杂度-24"><a href="#时间复杂度-24" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(ElogE)</li></ul><h4 id="2-拓扑排序-7-8"><a href="#2-拓扑排序-7-8" class="headerlink" title="(2) 拓扑排序[7-8]"></a>(2) 拓扑排序[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 拓扑排序模板</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">topologicalSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inDegree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> graph<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inDegree<span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>inDegree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 存在环则返回null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-25"><a href="#解题思路-25" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>计算节点入度</li><li>从入度为0的节点开始处理</li><li>适用于有向无环图</li></ul><h4 id="题目特征-25"><a href="#题目特征-25" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要处理依赖关系</li><li>检测有向图是否有环</li><li>适用于任务调度问题</li></ul><h4 id="时间复杂度-25"><a href="#时间复杂度-25" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(V+E)</li></ul><h3 id="24-数论算法"><a href="#24-数论算法" class="headerlink" title="24. 数论算法"></a>24. 数论算法</h3><h4 id="1-快速幂-7-8"><a href="#1-快速幂-7-8" class="headerlink" title="(1) 快速幂[7-8]"></a>(1) 快速幂[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 快速幂模板</span><span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> base<span class="token punctuation">,</span> <span class="token keyword">long</span> power<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>power <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>power <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        base <span class="token operator">=</span> <span class="token punctuation">(</span>base <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        power <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-26"><a href="#解题思路-26" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>利用二进制分解指数</li><li>通过平方减少乘法次数</li><li>适用于大数幂运算</li></ul><h4 id="题目特征-26"><a href="#题目特征-26" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要计算大数幂</li><li>需要取模运算</li><li>常见于加密算法等问题</li></ul><h4 id="时间复杂度-26"><a href="#时间复杂度-26" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(log n)</li></ul><h4 id="2-欧拉筛法-7-8"><a href="#2-欧拉筛法-7-8" class="headerlink" title="(2) 欧拉筛法[7-8]"></a>(2) 欧拉筛法[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 欧拉筛法模板</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">eulerSieve</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isPrime<span class="token punctuation">[</span>i <span class="token operator">*</span> primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-27"><a href="#解题思路-27" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>线性筛法求素数</li><li>每个合数只被最小质因数筛除</li><li>适用于大规模素数筛选</li></ul><h4 id="题目特征-27"><a href="#题目特征-27" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要高效生成素数表</li><li>需要处理大范围素数问题</li><li>适用于数论相关问题</li></ul><h4 id="时间复杂度-27"><a href="#时间复杂度-27" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(n)</li></ul><h3 id="25-高级搜索技巧"><a href="#25-高级搜索技巧" class="headerlink" title="25. 高级搜索技巧"></a>25. 高级搜索技巧</h3><h4 id="1-双向BFS-7-8"><a href="#1-双向BFS-7-8" class="headerlink" title="(1) 双向BFS[7-8]"></a>(1) 双向BFS[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 双向BFS模板</span><span class="token keyword">int</span> <span class="token function">bidirectionalBFS</span><span class="token punctuation">(</span><span class="token class-name">Node</span> start<span class="token punctuation">,</span> <span class="token class-name">Node</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> visitedFromStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> visitedFromEnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queueFromStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queueFromEnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      queueFromStart<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    visitedFromStart<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    queueFromEnd<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    visitedFromEnd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queueFromStart<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>queueFromEnd<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从起点扩展</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> queueFromStart<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> current <span class="token operator">=</span> queueFromStart<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visitedFromEnd<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> steps <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> neighbor <span class="token operator">:</span> current<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visitedFromStart<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visitedFromStart<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queueFromStart<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        steps<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token comment">// 从终点扩展</span>        size <span class="token operator">=</span> queueFromEnd<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> current <span class="token operator">=</span> queueFromEnd<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visitedFromStart<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> steps <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> neighbor <span class="token operator">:</span> current<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visitedFromEnd<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visitedFromEnd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queueFromEnd<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        steps<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无解</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-28"><a href="#解题思路-28" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>同时从起点和终点开始搜索</li><li>减少搜索空间</li><li>适用于已知起点和终点的最短路径问题</li></ul><h4 id="题目特征-28"><a href="#题目特征-28" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要寻找两点间最短路径</li><li>搜索空间较大</li><li>适用于对称性问题</li></ul><h4 id="时间复杂度-28"><a href="#时间复杂度-28" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>O(b^(d&#x2F;2))</li></ul><h4 id="2-A-算法-7-8"><a href="#2-A-算法-7-8" class="headerlink" title="(2) A*算法[7-8]"></a>(2) A*算法[7-8]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// A*算法模板</span><span class="token keyword">int</span> <span class="token function">aStar</span><span class="token punctuation">(</span><span class="token class-name">Node</span> start<span class="token punctuation">,</span> <span class="token class-name">Node</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> openSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span>         <span class="token punctuation">(</span>a<span class="token punctuation">.</span>g <span class="token operator">+</span> a<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>g <span class="token operator">+</span> b<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> closedSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      start<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    start<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token function">heuristic</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    openSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>openSet<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> current <span class="token operator">=</span> openSet<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> current<span class="token punctuation">.</span>g<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>          closedSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> neighbor <span class="token operator">:</span> current<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>closedSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tentativeG <span class="token operator">=</span> current<span class="token punctuation">.</span>g <span class="token operator">+</span> <span class="token function">distance</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>openSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> <span class="token operator">||</span> tentativeG <span class="token operator">&lt;</span> neighbor<span class="token punctuation">.</span>g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                neighbor<span class="token punctuation">.</span>g <span class="token operator">=</span> tentativeG<span class="token punctuation">;</span>                neighbor<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token function">heuristic</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                neighbor<span class="token punctuation">.</span>parent <span class="token operator">=</span> current<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>openSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    openSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无解</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题思路-29"><a href="#解题思路-29" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用启发式函数指导搜索方向</li><li>结合Dijkstra和贪心算法</li><li>适用于有启发信息的路径规划</li></ul><h4 id="题目特征-29"><a href="#题目特征-29" class="headerlink" title="题目特征"></a>题目特征</h4><ul><li>需要寻找最优路径</li><li>有可用的启发式函数</li><li>适用于地图导航等问题</li></ul><h4 id="时间复杂度-29"><a href="#时间复杂度-29" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>取决于启发式函数质量</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP 核心知识点详解笔记</title>
      <link href="/2025/03/27/Spring-Boot-AOP-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/27/Spring-Boot-AOP-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、AOP-基础概念与核心组件"><a href="#一、AOP-基础概念与核心组件" class="headerlink" title="一、AOP 基础概念与核心组件"></a>一、AOP 基础概念与核心组件</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>AOP（面向切面编程）是一种<strong>通过预编译或运行时动态代理</strong>实现横切关注点（Cross-Cutting Concerns）模块化的编程范式。其核心目标是：</p><p><strong>解耦</strong>：将与业务无关的代码（如日志、权限）从核心逻辑中剥离<br><strong>可维护性</strong>：集中管理横切逻辑，避免散落在各业务模块<br><strong>灵活性</strong>：通过配置快速启用&#x2F;禁用功能模块，无需修改源码</p><h3 id="核心术语"><a href="#核心术语" class="headerlink" title="核心术语"></a>核心术语</h3><table><thead><tr><th>术语</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><strong>切面（Aspect）</strong></td><td>横切关注点的模块化实现，包含通知和切入点定义</td><td>日志切面、权限切面</td></tr><tr><td><strong>连接点（Join Point）</strong></td><td>程序执行过程中的特定节点（如方法调用、异常抛出）</td><td><code>UserService.getUser()</code>方法执行</td></tr><tr><td><strong>切入点（Pointcut）</strong></td><td>通过表达式定义需要拦截的连接点集合</td><td><code>execution(* com.example.service.*.*(..))</code></td></tr><tr><td><strong>通知（Advice）</strong></td><td>在切入点执行的增强逻辑，分为五类：<br>@Before&#x2F;@After&#x2F;@Around&#x2F;@AfterReturning&#x2F;@AfterThrowing</td><td>记录方法耗时、异常报警</td></tr><tr><td><strong>织入（Weaving）</strong></td><td>将切面逻辑插入目标对象的过程，Spring AOP 采用动态代理实现</td><td>JDK动态代理（接口）或CGLIB代理（类）</td></tr></tbody></table><blockquote><p><strong>关键特性</strong><br>Spring AOP 属于运行时增强，仅支持方法级别的连接点（不支持字段&#x2F;构造器）</p></blockquote><hr><h2 id="二、Spring-Boot-集成实践"><a href="#二、Spring-Boot-集成实践" class="headerlink" title="二、Spring Boot 集成实践"></a>二、Spring Boot 集成实践</h2><h3 id="基础配置步骤"><a href="#基础配置步骤" class="headerlink" title="基础配置步骤"></a>基础配置步骤</h3><p><strong>添加依赖</strong><br>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><blockquote><p>该依赖已包含 AspectJ 注解支持，无需额外配置</p></blockquote><p><strong>启用自动代理</strong><br>   通过 <code>@EnableAspectJAutoProxy</code> 开启（Spring Boot 默认自动配置）</p><p><strong>定义切面类</strong><br>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 控制切面执行顺序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serviceLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"serviceLayer()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logExecutionTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Method &#123;&#125; executed in &#123;&#125; ms"</span><span class="token punctuation">,</span>                  joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><blockquote><p><strong>代码说明</strong><br><code>@Aspect</code> 标识切面类，<code>@Component</code> 使其被 Spring 管理<br><code>@Order</code> 控制多个切面的执行顺序（值越小优先级越高）</p></blockquote><h3 id="切入点表达式类型"><a href="#切入点表达式类型" class="headerlink" title="切入点表达式类型"></a>切入点表达式类型</h3><table><thead><tr><th>表达式类型</th><th>示例</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>execution</strong></td><td><code>execution(* com.service.*.*(..))</code></td><td>匹配方法执行</td></tr><tr><td><strong>within</strong></td><td><code>within(com.controller..*)</code></td><td>匹配包&#x2F;类内所有方法</td></tr><tr><td><strong>@annotation</strong></td><td><code>@annotation(com.example.Log)</code></td><td>匹配带有特定注解的方法</td></tr><tr><td><strong>args</strong></td><td><code>args(java.lang.String, ..)</code></td><td>匹配参数类型</td></tr></tbody></table><hr><h2 id="三、典型应用场景深度解析"><a href="#三、典型应用场景深度解析" class="headerlink" title="三、典型应用场景深度解析"></a>三、典型应用场景深度解析</h2><h3 id="统一日志管理"><a href="#统一日志管理" class="headerlink" title="统一日志管理"></a>统一日志管理</h3><p><strong>实现方式</strong>：<br>使用 <code>@Around</code> 记录方法耗时<br>通过 <code>JoinPoint</code> 获取方法签名、参数<br>结合 SLF4J 输出结构化日志</p><p><strong>代码示例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(@org.springframework.web.bind.annotation.RestController *)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span>             <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 记录请求信息</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"URL: &#123;&#125;, Method: &#123;&#125;, IP: &#123;&#125;"</span><span class="token punctuation">,</span>                  request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Response Time: &#123;&#125; ms"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>技术要点</strong><br>使用 <code>RequestContextHolder</code> 在非 Controller 层获取请求对象</p></blockquote><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p><strong>实现方式</strong>：<br>自定义 <code>@PreAuthorize</code> 注解<br>结合 Spring Security 的权限表达式</p><p><strong>代码示例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.example.PreAuthorize) &amp;&amp; args(id, ..)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">"Permission denied"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务管理增强"><a href="#事务管理增强" class="headerlink" title="事务管理增强"></a>事务管理增强</h3><p><strong>实现方式</strong>：<br>通过 <code>@Transactional</code> 注解的环绕通知<br>实现多数据源动态切换（读写分离）</p><p><strong>代码示例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.example.ReadOnly)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readOnlyPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"readOnlyPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatabaseContextHolder</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">DatabaseType</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"readOnlyPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatabaseContextHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、高级技巧与最佳实践"><a href="#四、高级技巧与最佳实践" class="headerlink" title="四、高级技巧与最佳实践"></a>四、高级技巧与最佳实践</h2><h3 id="自定义注解增强"><a href="#自定义注解增强" class="headerlink" title="自定义注解增强"></a>自定义注解增强</h3><p><strong>实现步骤</strong>：<br>定义注解：<br>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TimeMonitor</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">metricName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>切面处理：<br>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeMonitorAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(monitor)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">monitorTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">TimeMonitor</span> monitor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> start<span class="token punctuation">;</span>                <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>monitor<span class="token punctuation">.</span><span class="token function">metricName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><blockquote><p><strong>优势</strong>：通过注解声明式配置监控指标，避免硬编码</p></blockquote><h3 id="多切面执行顺序控制"><a href="#多切面执行顺序控制" class="headerlink" title="多切面执行顺序控制"></a>多切面执行顺序控制</h3><table><thead><tr><th>控制方式</th><th>实现方法</th></tr></thead><tbody><tr><td><strong>@Order 注解</strong></td><td>类级别注解，数值越小优先级越高（如事务切面通常设为最高）</td></tr><tr><td><strong>实现 Ordered 接口</strong></td><td>重写 <code>getOrder()</code> 方法返回优先级数值</td></tr></tbody></table><h3 id="异常处理增强"><a href="#异常处理增强" class="headerlink" title="异常处理增强"></a>异常处理增强</h3><p><strong>实现方式</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"execution(* com.example..*(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ErrorTracker</span><span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AlertService</span><span class="token punctuation">.</span><span class="token function">sendCriticalAlert</span><span class="token punctuation">(</span><span class="token string">"Exception in "</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五、常见问题与解决方案"><a href="#五、常见问题与解决方案" class="headerlink" title="五、常见问题与解决方案"></a>五、常见问题与解决方案</h2><h3 id="切面不生效排查"><a href="#切面不生效排查" class="headerlink" title="切面不生效排查"></a>切面不生效排查</h3><table><thead><tr><th>可能原因</th><th>解决方案</th></tr></thead><tbody><tr><td>Bean 未被 Spring 管理</td><td>检查切面类是否添加 <code>@Component</code> 或其他 Stereotype 注解</td></tr><tr><td>切入点表达式错误</td><td>使用 <code>AopUtils</code> 工具类调试匹配结果</td></tr><tr><td>代理模式限制</td><td>CGLIB 代理需确保类和方法非 final</td></tr></tbody></table><h3 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h3><p>避免在切面中执行耗时操作（如远程调用）<br>使用条件化切入点减少匹配范围（如 <code>@within</code> 替代宽泛的 <code>execution</code>）<br>对高频调用方法禁用非必要切面</p><hr><h2 id="六、扩展应用场景"><a href="#六、扩展应用场景" class="headerlink" title="六、扩展应用场景"></a>六、扩展应用场景</h2><h3 id="分布式缓存管理"><a href="#分布式缓存管理" class="headerlink" title="分布式缓存管理"></a>分布式缓存管理</h3><p><strong>实现方案</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(cacheable)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleCache</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Cacheable</span> cacheable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">generateCacheKey</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cache</span> cache <span class="token operator">=</span> cacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>cacheable<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可结合 Redis、Ehcache 等实现</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_17999176f16c439bab87bf108f62cdcd.png" alt="在这里插入图片描述"></p><h3 id="API-版本控制"><a href="#API-版本控制" class="headerlink" title="API 版本控制"></a>API 版本控制</h3><p><strong>实现方案</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VersionAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(apiVersion) &amp;&amp; within(com.example.controller..*)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">checkVersion</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">ApiVersion</span> apiVersion<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RequestAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> clientVersion <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-API-Version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>apiVersion<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientVersion<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">VersionMismatchException</span><span class="token punctuation">(</span><span class="token string">"Unsupported API version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> AOP </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot EL表达式学习笔记</title>
      <link href="/2025/03/27/Spring-Boot-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/27/Spring-Boot-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-EL表达式学习笔记"><a href="#Spring-Boot-EL表达式学习笔记" class="headerlink" title="Spring Boot EL表达式学习笔记"></a>Spring Boot EL表达式学习笔记</h1><h2 id="一、EL表达式简介"><a href="#一、EL表达式简介" class="headerlink" title="一、EL表达式简介"></a>一、EL表达式简介</h2><p>Spring EL（Expression Language）是Spring框架中的表达式语言，支持在<strong>XML配置</strong>和<strong>注解</strong>中动态调用资源。与JSP的EL表达式相比，Spring EL使用<code>#&#123;&#125;</code>语法，而JSP使用<code>$&#123;&#125;</code>语法。主要功能包括：</p><ul><li>动态读取配置文件值</li><li>调用Bean对象属性或方法</li><li>支持条件化配置（如<code>@ConditionalOnExpression</code>）</li></ul><blockquote><p><strong>关键区别</strong>  </p><ul><li><code>@Value(&quot;$&#123;&#125;&quot;)</code>：从<code>.properties</code>或<code>.yml</code>配置文件读取值  </li><li><code>@Value(&quot;#&#123;&#125;&quot;)</code>：从Spring容器中的Bean解析表达式</li></ul></blockquote><hr><h2 id="二、基础语法与应用场景"><a href="#二、基础语法与应用场景" class="headerlink" title="二、基础语法与应用场景"></a>二、基础语法与应用场景</h2><h3 id="1-注解中的EL表达式"><a href="#1-注解中的EL表达式" class="headerlink" title="1. 注解中的EL表达式"></a>1. 注解中的EL表达式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注入配置文件中的端口号</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span><span class="token comment">// 调用Bean的userName属性</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;user.userName&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token comment">// 条件化Bean加载（当表达式结果为true时生效）</span><span class="token annotation punctuation">@ConditionalOnExpression</span><span class="token punctuation">(</span><span class="token string">"#&#123;environment.getProperty('mode') == 'dev'&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码说明</strong></p><ul><li>配置文件注入需用<code>$&#123;&#125;</code>，Bean属性调用用<code>#&#123;&#125;</code>。</li><li><code>@ConditionalOnExpression</code>支持基于EL表达式的条件判断。</li></ul></blockquote><h3 id="2-安全控制中的EL表达式"><a href="#2-安全控制中的EL表达式" class="headerlink" title="2. 安全控制中的EL表达式"></a>2. 安全控制中的EL表达式</h3><p>在Spring Security中，EL表达式用于权限校验：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN') &amp;&amp; #id == authentication.principal.id "</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>常用表达式</strong></p><ul><li><code>hasRole(&#39;ADMIN&#39;)</code>：检查角色</li><li><code>authentication.name</code>：获取当前认证用户</li></ul></blockquote><hr><h2 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h2><h3 id="1-动态生成缓存键（结合AOP）"><a href="#1-动态生成缓存键（结合AOP）" class="headerlink" title="1. 动态生成缓存键（结合AOP）"></a>1. 动态生成缓存键（结合AOP）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#userId + '_' + #category"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> category<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>解析上下文</strong><br>通过<code>EvaluationContext</code>可获取方法参数、类名等信息，动态生成键值。</p></blockquote><h3 id="2-流程引擎中的表达式"><a href="#2-流程引擎中的表达式" class="headerlink" title="2. 流程引擎中的表达式"></a>2. 流程引擎中的表达式</h3><p>在Flowable流程引擎中，EL用于条件分支：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断字符串截取结果</span>$<span class="token punctuation">&#123;</span>variables<span class="token operator">:</span><span class="token function">substr</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>index1<span class="token punctuation">,</span>end1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'哈哈'</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查集合包含元素</span>$<span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"BCD"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>扩展能力</strong><br>Flowable在Spring EL基础上支持自定义函数（如<code>substr</code>）。</p></blockquote><hr><h2 id="四、常见问题与解决"><a href="#四、常见问题与解决" class="headerlink" title="四、常见问题与解决"></a>四、常见问题与解决</h2><h3 id="1-依赖冲突"><a href="#1-依赖冲突" class="headerlink" title="1. 依赖冲突"></a>1. 依赖冲突</h3><ul><li><strong>问题</strong>：缺少<code>spring-expression</code>依赖时，可能报错<code>Unregistering JMX-exposed beans</code>。</li><li><strong>解决</strong>：检查Spring Boot版本（2.x+已内置EL支持），避免手动引入冲突依赖。</li></ul><h3 id="2-表达式解析失败"><a href="#2-表达式解析失败" class="headerlink" title="2. 表达式解析失败"></a>2. 表达式解析失败</h3><ul><li><strong>调试技巧</strong>：使用<code>SpelExpressionParser</code>手动解析：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#user.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="五、最佳实践"><a href="#五、最佳实践" class="headerlink" title="五、最佳实践"></a>五、最佳实践</h2><ol><li><strong>优先使用配置文件注入</strong>：将可变参数（如端口、路径）放在<code>application.yml</code>中，通过<code>@Value(&quot;$&#123;&#125;&quot;)</code>读取。</li><li><strong>避免复杂逻辑</strong>：EL表达式应保持简洁，复杂逻辑建议封装为Bean方法调用。</li><li><strong>结合AOP实现动态功能</strong>：如缓存、日志等场景，通过EL动态拼接键值。</li></ol><blockquote><p><strong>学习资源推荐</strong></p><ul><li>官方文档：Spring Framework Expressions</li><li>实战案例：Spring Security权限表达式</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> EL表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从暴力搜索到动态规划优化：一场算法进化的奇妙之旅</title>
      <link href="/2025/03/27/%E4%BB%8E%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%E5%88%B0%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BC%98%E5%8C%96%EF%BC%9A%E4%B8%80%E5%9C%BA%E7%AE%97%E6%B3%95%E8%BF%9B%E5%8C%96%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/"/>
      <url>/2025/03/27/%E4%BB%8E%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%E5%88%B0%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BC%98%E5%8C%96%EF%BC%9A%E4%B8%80%E5%9C%BA%E7%AE%97%E6%B3%95%E8%BF%9B%E5%8C%96%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h1 id="从暴力搜索到动态规划优化：一场算法进化的奇妙之旅"><a href="#从暴力搜索到动态规划优化：一场算法进化的奇妙之旅" class="headerlink" title="从暴力搜索到动态规划优化：一场算法进化的奇妙之旅"></a>从暴力搜索到动态规划优化：一场算法进化的奇妙之旅</h1><p>算法优化的历程如同探险，从蛮力开路到巧思筑桥，每一步都凝聚着智慧的火花。本文将以生动的案例，带你穿越<strong>暴力搜索→记忆化搜索→剪枝→动态规划→空间优化</strong>的全过程，揭秘算法优化的核心逻辑。</p><hr><h2 id="一、暴力搜索：算法的“原始冲动”"><a href="#一、暴力搜索：算法的“原始冲动”" class="headerlink" title="一、暴力搜索：算法的“原始冲动”"></a>一、暴力搜索：算法的“原始冲动”</h2><p>暴力搜索是最直观的解决思路——穷举所有可能，直到找到答案。以<strong>机器人路径问题</strong>为例：机器人在m×n网格左上角，每次只能向右或向下移动，问到达右下角有多少种路径？</p><h3 id="暴力递归解法"><a href="#暴力递归解法" class="headerlink" title="暴力递归解法"></a>暴力递归解法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">brute_force</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">return</span> brute_force<span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> brute_force<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度：O(2^(m+n))</strong> ，如同一棵疯狂生长的二叉树，重复计算遍地开花。当m&#x3D;n&#x3D;20时，计算量超过百万级，效率极低。</p><hr><h2 id="二、记忆化搜索：给递归装上“备忘录”"><a href="#二、记忆化搜索：给递归装上“备忘录”" class="headerlink" title="二、记忆化搜索：给递归装上“备忘录”"></a>二、记忆化搜索：给递归装上“备忘录”</h2><p>重复计算是暴力的致命伤。<strong>记忆化搜索（Memoization）</strong> 应运而生：用缓存记录已计算的结果，空间换时间。</p><h3 id="实现优化"><a href="#实现优化" class="headerlink" title="实现优化"></a>实现优化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">memo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">memo_search</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span><span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>memo<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo_search<span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> memo_search<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度骤降至O(mn)</strong> ，如同给递归路线图标记了“已探索区域”，避免重复造轮子。以斐波那契数列为例，记忆化搜索较暴力搜索性能提升200倍。</p><hr><h2 id="三、剪枝：修剪搜索树的“智慧剪刀”"><a href="#三、剪枝：修剪搜索树的“智慧剪刀”" class="headerlink" title="三、剪枝：修剪搜索树的“智慧剪刀”"></a>三、剪枝：修剪搜索树的“智慧剪刀”</h2><p>在暴力搜索中，<strong>剪枝</strong>通过提前终止无效分支提升效率。例如在<strong>青蛙过河问题</strong>中，若当前石子间距超过跳跃能力，立即回溯。</p><h3 id="剪枝策略"><a href="#剪枝策略" class="headerlink" title="剪枝策略"></a>剪枝策略</h3><ul><li><strong>可行性剪枝</strong>：排除不可能的解</li><li><strong>最优性剪枝</strong>：若当前路径代价已超过已知最优解，放弃搜索</li><li><strong>记忆化剪枝</strong>：结合缓存避免重复状态计算</li></ul><p>剪枝如同在迷宫中提前封堵死胡同，让搜索聚焦于有潜力的路径。</p><hr><h2 id="四、动态规划（DP）：自底向上的“建筑大师”"><a href="#四、动态规划（DP）：自底向上的“建筑大师”" class="headerlink" title="四、动态规划（DP）：自底向上的“建筑大师”"></a>四、动态规划（DP）：自底向上的“建筑大师”</h2><p>动态规划将问题分解为<strong>重叠子问题</strong>，并通过<strong>状态转移方程</strong>递推求解。以爬楼梯问题为例：</p><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><pre class="line-numbers language-none"><code class="language-none">dp[i] &#x3D; dp[i-1] + dp[i-2] # 到达第i阶的方案数&#x3D;从i-1阶跨1步 + 从i-2阶跨2步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实现方式对比</strong>：</p><table><thead><tr><th>方法</th><th>时间复杂度</th><th>空间复杂度</th><th>特点</th></tr></thead><tbody><tr><td>暴力递归</td><td>O(2^n)</td><td>O(n)</td><td>直观但重复计算多</td></tr><tr><td>记忆化搜索</td><td>O(n)</td><td>O(n)</td><td>自顶向下，递归+缓存</td></tr><tr><td>动态规划</td><td>O(n)</td><td>O(n)</td><td>自底向上，迭代递推</td></tr><tr><td>DP空间优化</td><td>O(n)</td><td>O(1)</td><td>仅保留必要状态，如滚动数组</td></tr></tbody></table><p><strong>DP核心步骤</strong>：</p><ol><li>定义状态：<code>dp[i][j]</code>表示机器人到达(i,j)的路径数</li><li>状态转移：<code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></li><li>边界条件：第一行和第一列均为1种路径</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五、动态规划的终极优化：空间压缩术"><a href="#五、动态规划的终极优化：空间压缩术" class="headerlink" title="五、动态规划的终极优化：空间压缩术"></a>五、动态规划的终极优化：空间压缩术</h2><p>通过观察状态依赖关系，可进一步压缩空间。例如在斐波那契问题中，只需维护前两个状态：</p><h3 id="滚动数组优化"><a href="#滚动数组优化" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> na<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token keyword">return</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>空间复杂度从O(n)降至O(1)</strong> ，如同用“滑动窗口”取代整个仓库。</p><p>在机器人问题中，若按行更新，可将二维DP压缩为一维：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dp_optimized</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六、算法选择：没有银弹，只有权衡"><a href="#六、算法选择：没有银弹，只有权衡" class="headerlink" title="六、算法选择：没有银弹，只有权衡"></a>六、算法选择：没有银弹，只有权衡</h2><table><thead><tr><th>算法</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>暴力搜索</td><td>小规模问题，验证思路</td><td>实现简单</td><td>效率低下</td></tr><tr><td>记忆化搜索</td><td>中等规模，状态转移复杂</td><td>易实现，接近递归思维</td><td>递归栈可能溢出</td></tr><tr><td>动态规划</td><td>大规模问题，最优子结构明显</td><td>时间空间高效</td><td>需要设计状态方程</td></tr><tr><td>剪枝</td><td>配合搜索算法使用</td><td>显著减少计算量</td><td>需设计剪枝策略</td></tr></tbody></table><blockquote><p><strong>启示</strong>：对于动态规划问题，可先用暴力递归写出“解题逻辑”，再逐步优化为DP，如同把草稿打磨成雕塑。</p></blockquote><hr><h2 id="结语：算法之美，在于演化"><a href="#结语：算法之美，在于演化" class="headerlink" title="结语：算法之美，在于演化"></a>结语：算法之美，在于演化</h2><p>从暴力的“穷举一切”到动态规划的“运筹帷幄”，算法优化之路彰显了人类思维的精妙。正如《Hello 算法》所言：“动态规划不是空中楼阁，而是建立在暴力尝试之上的智慧结晶”。掌握这一进化链条，你将在算法的世界里游刃有余。</p><p><strong>参考资料</strong>：<br>[1] WeetCode3 暴力递归-&gt;记忆化搜索-&gt;动态规划<br>[4] 从暴力搜索到动态规划，青蛙过河的终极解法！<br>[6] 动态规划–记忆化搜索<br>[9] 暴力递归到动态规划优化思路<br>[11][20] 动态规划基本模型与优化实践<br>[15] Hello 算法——动画图解、一键运行的算法教程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分答案：在算法世界中寻找最优解的「黄金分割术」</title>
      <link href="/2025/03/27/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%9A%E5%9C%A8%E7%AE%97%E6%B3%95%E4%B8%96%E7%95%8C%E4%B8%AD%E5%AF%BB%E6%89%BE%E6%9C%80%E4%BC%98%E8%A7%A3%E7%9A%84%E3%80%8C%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%E6%9C%AF%E3%80%8D/"/>
      <url>/2025/03/27/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%9A%E5%9C%A8%E7%AE%97%E6%B3%95%E4%B8%96%E7%95%8C%E4%B8%AD%E5%AF%BB%E6%89%BE%E6%9C%80%E4%BC%98%E8%A7%A3%E7%9A%84%E3%80%8C%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%E6%9C%AF%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="二分答案：在算法世界中寻找最优解的「黄金分割术」"><a href="#二分答案：在算法世界中寻找最优解的「黄金分割术」" class="headerlink" title="二分答案：在算法世界中寻找最优解的「黄金分割术」"></a>二分答案：在算法世界中寻找最优解的「黄金分割术」</h1><p>![二分答案示意图]<br><em>「在有序的世界里，二分法总能找到答案的曙光。」—— 算法艺术家</em></p><h2 id="引言：当暴力枚举遇上数学之美"><a href="#引言：当暴力枚举遇上数学之美" class="headerlink" title="引言：当暴力枚举遇上数学之美"></a>引言：当暴力枚举遇上数学之美</h2><p>想象你正在参加一场密室逃脱游戏，面前有1000个上锁的抽屉，其中只有一个藏着通关钥匙。如果逐个打开检查，最坏情况需要尝试999次。但若你掌握「每次排除一半可能」的二分策略，只需10次尝试就能锁定目标。这就是二分答案算法的魅力——将时间复杂度从O(n)骤降至O(logn)的魔法。</p><hr><h2 id="一、二分答案的数学根基"><a href="#一、二分答案的数学根基" class="headerlink" title="一、二分答案的数学根基"></a>一、二分答案的数学根基</h2><h3 id="1-1-定义与核心思想"><a href="#1-1-定义与核心思想" class="headerlink" title="1.1 定义与核心思想"></a>1.1 定义与核心思想</h3><p>二分答案(Binary Search on Answer)是一种通过<strong>验证候选解的可行性</strong>，在<strong>单调有序的解空间</strong>中快速定位最优解的算法。其本质是将<strong>最优化问题</strong>转化为<strong>判定性问题</strong>，适用于最大值最小化(Minimax)或最小值最大化(Maximin)类问题。</p><h3 id="1-2-算法四步曲"><a href="#1-2-算法四步曲" class="headerlink" title="1.2 算法四步曲"></a>1.2 算法四步曲</h3><ol><li><strong>划定边界</strong>：确定解空间[lower_bound, upper_bound]</li><li><strong>二分试探</strong>：计算中间值mid &#x3D; (low + high)&#x2F;2</li><li><strong>可行性验证</strong>：设计check(mid)函数</li><li><strong>动态调整</strong>：根据验证结果收缩区间</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 整数二分模板int binary_search(int l, int r) &#123;while(l &lt; r) &#123;int mid &#x3D; (l + r + 1) &gt;&gt; 1; &#x2F;&#x2F; 避免死循环if(check(mid)) l &#x3D; mid;else r &#x3D; mid - 1;&#125;return l;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-适用性三定律"><a href="#1-3-适用性三定律" class="headerlink" title="1.3 适用性三定律"></a>1.3 适用性三定律</h3><ol><li><strong>单调性</strong>：若x可行，则所有≥x（或≤x）的值都可行</li><li><strong>可验证性</strong>：能在O(f(n))内验证候选解的可行性</li><li><strong>离散性</strong>：解空间可被离散化（对连续问题需设定精度）</li></ol><hr><h2 id="二、经典应用场景全景扫描"><a href="#二、经典应用场景全景扫描" class="headerlink" title="二、经典应用场景全景扫描"></a>二、经典应用场景全景扫描</h2><h3 id="2-1-木材加工难题（洛谷P2440）"><a href="#2-1-木材加工难题（洛谷P2440）" class="headerlink" title="2.1 木材加工难题（洛谷P2440）"></a>2.1 木材加工难题（洛谷P2440）</h3><p><strong>问题</strong>：将n根原木切割为k段等长木材，求最大可能长度<br><strong>解法</strong>：二分长度L，验证$\sum_{i&#x3D;1}^n \lfloor \frac{len_i}{L} \rfloor \geq k$  </p><pre class="line-numbers language-none"><code class="language-none">pythondef check(L):return sum(x&#x2F;&#x2F;L for x in logs) &gt;&#x3D; k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-跳石头比赛（NOIP2015）"><a href="#2-2-跳石头比赛（NOIP2015）" class="headerlink" title="2.2 跳石头比赛（NOIP2015）"></a>2.2 跳石头比赛（NOIP2015）</h3><p><strong>问题</strong>：在河床中移走≤M块石头，使最小间距最大化<br><strong>关键验证</strong>：遍历岩石序列，当间距&lt;mid时移走当前岩石，统计移走数量≤M  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> curr <span class="token operator">:</span> rocks<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">-</span> prev <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> prev <span class="token operator">=</span> curr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-数字孪生工厂优化"><a href="#2-3-数字孪生工厂优化" class="headerlink" title="2.3 数字孪生工厂优化"></a>2.3 数字孪生工厂优化</h3><p>在工业4.0场景中，二分答案用于确定<strong>设备参数的最优配置</strong>：  </p><ul><li>机械臂运动速度与能耗的平衡点寻找</li><li>3D打印层厚在精度与效率间的黄金分割</li><li>生产线节拍时间的最大吞吐量计算</li></ul><hr><h2 id="三、编程竞赛中的屠龙宝刀"><a href="#三、编程竞赛中的屠龙宝刀" class="headerlink" title="三、编程竞赛中的屠龙宝刀"></a>三、编程竞赛中的屠龙宝刀</h2><h3 id="3-1-典型题单"><a href="#3-1-典型题单" class="headerlink" title="3.1 典型题单"></a>3.1 典型题单</h3><table><thead><tr><th>题目名称</th><th>考察重点</th><th>时间复杂度</th></tr></thead><tbody><tr><td>UVa 11413</td><td>管道填充（实数二分）</td><td>O(n logL)</td></tr><tr><td>Codeforces 492D</td><td>双攻击频率同步</td><td>O(log(max(x,y)))</td></tr><tr><td>ICPC 2023杭州站F题</td><td>动态规划+二分验证</td><td>O(n logM)</td></tr></tbody></table><h3 id="3-2-实战技巧"><a href="#3-2-实战技巧" class="headerlink" title="3.2 实战技巧"></a>3.2 实战技巧</h3><ol><li><strong>反向构造法</strong>：当直接设计check函数困难时，尝试将约束条件数学化</li><li><strong>离散化处理</strong>：对浮点数问题设定epsilon精度（通常取1e-6）</li><li><strong>记忆化验证</strong>：在动态规划验证中缓存中间结果加速查询</li></ol><hr><h2 id="四、二分答案-vs-二分查找"><a href="#四、二分答案-vs-二分查找" class="headerlink" title="四、二分答案 vs 二分查找"></a>四、二分答案 vs 二分查找</h2><table><thead><tr><th>维度</th><th>二分查找</th><th>二分答案</th></tr></thead><tbody><tr><td>输入结构</td><td>显式有序数组</td><td>隐式单调解空间</td></tr><tr><td>核心操作</td><td>比较元素值</td><td>验证候选解可行性</td></tr><tr><td>典型问题</td><td>元素存在性判断</td><td>最优化问题</td></tr><tr><td>时间复杂度</td><td>O(logn)</td><td>O(logn)*O(check)</td></tr><tr><td>代码复杂度</td><td>简单</td><td>依赖check函数设计</td></tr></tbody></table><hr><h2 id="五、常见错误与调试秘籍"><a href="#五、常见错误与调试秘籍" class="headerlink" title="五、常见错误与调试秘籍"></a>五、常见错误与调试秘籍</h2><h3 id="5-1-十大陷阱"><a href="#5-1-十大陷阱" class="headerlink" title="5.1 十大陷阱"></a>5.1 十大陷阱</h3><ol><li>整数除法导致死循环（需+1补偿）</li><li>未处理边界条件（如全选或全不选）</li><li>浮点数精度设置不当</li><li>check函数逻辑漏洞</li><li>初始区间设定错误</li></ol><h3 id="5-2-调试四步法"><a href="#5-2-调试四步法" class="headerlink" title="5.2 调试四步法"></a>5.2 调试四步法</h3><ol><li><strong>打印中间状态</strong>：输出每次mid值和check结果</li><li><strong>构造极端测试</strong>：全通过&#x2F;全不通过用例验证</li><li><strong>可视化追踪</strong>：使用<a href="https://www.cs.usfca.edu/~galles/visualization/Search.html">USFCA可视化工具</a>观察区间变化</li><li><strong>对拍验证</strong>：与暴力枚举法交叉检验</li></ol><hr><h2 id="六、延伸学习资源"><a href="#六、延伸学习资源" class="headerlink" title="六、延伸学习资源"></a>六、延伸学习资源</h2><h3 id="6-1-经典著作"><a href="#6-1-经典著作" class="headerlink" title="6.1 经典著作"></a>6.1 经典著作</h3><ul><li>《算法导论》第3章：形式化证明二分法的正确性</li><li>《编程珠玑》第2章：十行代码的二分查找启示录</li><li>《挑战程序设计竞赛》第3.1节：竞赛题型深度解析</li></ul><h3 id="6-2-可视化教程"><a href="#6-2-可视化教程" class="headerlink" title="6.2 可视化教程"></a>6.2 可视化教程</h3><ul><li><a href="https://www.bilibili.com/video/BV1ST4y1F78g">B站：二分法优化版</a> 动画演示区间收缩过程</li></ul><h3 id="6-3-论文精选"><a href="#6-3-论文精选" class="headerlink" title="6.3 论文精选"></a>6.3 论文精选</h3><ul><li>《A Method of Solving a Convex Programming Problem》作者：N.Z. Shor (1962)</li><li>《An optimal algorithm for approximate nearest neighbor searching》作者：S. Arya et al. (1998)</li></ul><hr><h2 id="结语：算法思维的哲学启示"><a href="#结语：算法思维的哲学启示" class="headerlink" title="结语：算法思维的哲学启示"></a>结语：算法思维的哲学启示</h2><p>二分答案教会我们的不仅是解决问题的技巧，更是一种<strong>化繁为简的思维艺术</strong>。就像古希腊哲学家赫拉克利特所说：”隐藏的和谐比显见的和谐更加强大”。当我们面对复杂系统时，找到那个关键的单调性维度，就能用对数级的智慧照亮指数级的黑暗。  </p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[复杂问题]</span> <span class="token arrow operator">--></span> B<span class="token text string">&#123;是否单调?&#125;</span>B <span class="token arrow operator">--></span><span class="token label property">|Yes|</span> C<span class="token text string">[二分答案]</span>B <span class="token arrow operator">--></span><span class="token label property">|No|</span> D<span class="token text string">[其他算法]</span>C <span class="token arrow operator">--></span> E<span class="token text string">[设计check函数]</span>E <span class="token arrow operator">--></span> F<span class="token text string">[确定边界]</span>F <span class="token arrow operator">--></span> G<span class="token text string">[二分迭代]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> 最优化 </tag>
            
            <tag> 编程竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务注解自调用问题及解决方案</title>
      <link href="/2025/03/26/Spring%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E8%87%AA%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2025/03/26/Spring%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E8%87%AA%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Spring中，经常使用<code>@Transactional</code>注解来声明方法需要事务支持。然而，当一个类中的方法自调用（即一个方法调用同类中的另一个方法）时，<code>@Transactional</code>注解可能会失效。这是因为Spring的事务管理是基于代理机制实现的，而自调用无法触发代理逻辑。</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是遇到的一个事务失效场景：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XXService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> idptKey <span class="token operator">=</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span>iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAcquireItem</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自调用导致事务失效</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAcquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">String</span> idptKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数据库操作</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span><span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d_%d_%s"</span><span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，调用了同类中的<code>doAcquireItem</code>方法，但由于是自调用，<code>@Transactional</code>注解没有生效。</p><hr><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>通过分析，了解到Spring的事务管理是通过AOP（面向切面编程）实现的：</p><ol><li>Spring会为带有<code>@Transactional</code>注解的方法生成代理对象。</li><li>当外部调用代理对象的方法时，代理会拦截调用并添加事务逻辑。</li><li>自调用时，调用的是目标对象本身，而不是代理对象，因此事务逻辑不会被触发。</li></ol><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：通过代理对象调用"><a href="#方法一：通过代理对象调用" class="headerlink" title="方法一：通过代理对象调用"></a>方法一：通过代理对象调用</h3><p>将自调用改为通过代理对象调用，确保事务逻辑生效。</p><h4 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XXService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LockService</span> lockService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XXDao</span> <span class="token class-name">XXDao</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> <span class="token class-name">XXServiceImpl</span> <span class="token class-name">XXServiceImp</span><span class="token punctuation">;</span> <span class="token comment">// 启用代理对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> idptKey <span class="token operator">=</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span>iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XXServiceImp</span><span class="token punctuation">.</span><span class="token function">doAcquireItem</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过代理对象调用</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@RedisLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#idptKey"</span><span class="token punctuation">,</span> waitTime <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAcquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">String</span> idptKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">XX</span> <span class="token constant">XX</span> <span class="token operator">=</span> <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">getByIdpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">XX</span> insert <span class="token operator">=</span> <span class="token constant">XX</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">iId</span><span class="token punctuation">(</span>iId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">YesOrNoEnum</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">idpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span><span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d_%d_%s"</span><span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><ul><li>使用了<code>@Lazy</code>注解延迟注入代理对象，避免循环依赖。</li><li>通过代理对象调用<code>doAcquireItem</code>方法，确保事务逻辑生效。</li></ul><h3 id="方法二：提取方法到另一个类"><a href="#方法二：提取方法到另一个类" class="headerlink" title="方法二：提取方法到另一个类"></a>方法二：提取方法到另一个类</h3><p>还尝试将需要事务支持的方法提取到另一个类中，由外部类调用。</p><h4 id="修改后的代码-1"><a href="#修改后的代码-1" class="headerlink" title="修改后的代码"></a>修改后的代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XXService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LockService</span> lockService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XXDao</span> <span class="token class-name">XXDao</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TransactionalService</span> transactionalService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> idptKey <span class="token operator">=</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span>iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionalService<span class="token punctuation">.</span><span class="token function">doAcquireItem</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用外部类方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span><span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d_%d_%s"</span><span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XXDao</span> <span class="token class-name">XXDao</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@RedisLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#idptKey"</span><span class="token punctuation">,</span> waitTime <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAcquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">String</span> idptKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">XX</span> <span class="token constant">XX</span> <span class="token operator">=</span> <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">getByIdpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">XX</span> insert <span class="token operator">=</span> <span class="token constant">XX</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">iId</span><span class="token punctuation">(</span>iId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">YesOrNoEnum</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">idpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h4><ul><li>将事务逻辑提取到<code>TransactionalService</code>类中，避免自调用。</li><li>原类通过<code>@Autowired</code>注入<code>TransactionalService</code>，调用其方法。</li></ul><h3 id="方法三：使用AopContext-currentProxy"><a href="#方法三：使用AopContext-currentProxy" class="headerlink" title="方法三：使用AopContext.currentProxy"></a>方法三：使用<code>AopContext.currentProxy</code></h3><p>最后，尝试通过<code>AopContext.currentProxy()</code>获取当前代理对象，并通过代理对象调用方法。</p><h4 id="修改后的代码-2"><a href="#修改后的代码-2" class="headerlink" title="修改后的代码"></a>修改后的代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XXService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LockService</span> lockService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XXDao</span> <span class="token class-name">XXDao</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> idptKey <span class="token operator">=</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span>iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">XXServiceImpl</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doAcquireItem</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用代理对象调用</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@RedisLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#idptKey"</span><span class="token punctuation">,</span> waitTime <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAcquireItem</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uuid<span class="token punctuation">,</span> <span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">String</span> idptKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">XX</span> <span class="token constant">XX</span> <span class="token operator">=</span> <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">getByIdpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">XX</span> insert <span class="token operator">=</span> <span class="token constant">XX</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">iId</span><span class="token punctuation">(</span>iId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">YesOrNoEnum</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">idpt</span><span class="token punctuation">(</span>idptKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XXDao</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getIdptKey</span><span class="token punctuation">(</span><span class="token class-name">Long</span> iId<span class="token punctuation">,</span> <span class="token class-name">IdptEnum</span> idptEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> affairId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d_%d_%s"</span><span class="token punctuation">,</span> iId<span class="token punctuation">,</span> idptEnum<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> affairId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键点-2"><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h4><ul><li>通过<code>AopContext.currentProxy()</code>获取当前代理对象。</li><li>确保在Spring配置中启用了<code>exposeProxy</code>属性：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exposeProxy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>在解决问题的过程中，还学习了Spring事务的多种传播行为（Propagation）：</p><ul><li><code>REQUIRED</code>（默认）：如果当前存在事务，则加入；否则创建新事务。</li><li><code>REQUIRES_NEW</code>：总是创建新事务，暂停当前事务。</li><li><code>NESTED</code>：嵌套事务，支持回滚到子事务。</li></ul><h3 id="事务失效的其他场景"><a href="#事务失效的其他场景" class="headerlink" title="事务失效的其他场景"></a>事务失效的其他场景</h3><ol><li><strong>非<code>public</code>方法</strong>：Spring AOP仅支持<code>public</code>方法。</li><li><strong>异常未被捕获</strong>：事务仅在未捕获的<code>RuntimeException</code>或<code>Error</code>时回滚。</li><li><strong>多线程调用</strong>：事务上下文无法跨线程传播。</li></ol><hr><p>通过这些方法，成功解决了Spring事务注解自调用失效的问题，并加深了对Spring事务机制的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> AOP </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot缓存注解详解：提升应用性能的最佳实践</title>
      <link href="/2025/03/26/springboot-cache-annotations/"/>
      <url>/2025/03/26/springboot-cache-annotations/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SpringBoot缓存"><a href="#什么是SpringBoot缓存" class="headerlink" title="什么是SpringBoot缓存"></a>什么是SpringBoot缓存</h2><p>SpringBoot提供了强大的缓存支持，通过注解驱动的方式，让开发者能够轻松地实现缓存功能，从而提升应用性能。本文将详细介绍SpringBoot中的缓存注解使用方法和最佳实践。</p><h2 id="缓存注解概述"><a href="#缓存注解概述" class="headerlink" title="缓存注解概述"></a>缓存注解概述</h2><p>SpringBoot提供了以下几个主要的缓存注解：</p><p><code>@Cacheable</code>：将方法的返回结果缓存起来<br><code>@CachePut</code>：更新缓存，不影响方法的执行<br><code>@CacheEvict</code>：清除缓存<br><code>@Caching</code>：组合多个缓存操作<br><code>@CacheConfig</code>：类级别的缓存配置</p><h2 id="开启缓存支持"><a href="#开启缓存支持" class="headerlink" title="开启缓存支持"></a>开启缓存支持</h2><p>在SpringBoot应用中启用缓存功能非常简单，只需要添加相关依赖并开启缓存支持：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- pom.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动类上添加<code>@EnableCaching</code>注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cacheable注解详解"><a href="#Cacheable注解详解" class="headerlink" title="@Cacheable注解详解"></a>@Cacheable注解详解</h2><p><code>@Cacheable</code>是最常用的缓存注解，用于将方法的返回结果存储到缓存中。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模拟从数据库获取用户信息</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><p><strong>value&#x2F;cacheNames</strong>：指定缓存的名称<br><strong>key</strong>：缓存的键，支持SpEL表达式<br><strong>condition</strong>：缓存的条件<br><strong>unless</strong>：不缓存的条件</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span>    key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span>    condition <span class="token operator">=</span> <span class="token string">"#id > 0"</span><span class="token punctuation">,</span>    unless <span class="token operator">=</span> <span class="token string">"#result == null"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CachePut注解使用"><a href="#CachePut注解使用" class="headerlink" title="@CachePut注解使用"></a>@CachePut注解使用</h2><p><code>@CachePut</code>注解用于更新缓存，它总是会执行方法并将结果更新到缓存中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#user.id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 更新用户信息</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CacheEvict注解使用"><a href="#CacheEvict注解使用" class="headerlink" title="@CacheEvict注解使用"></a>@CacheEvict注解使用</h2><p><code>@CacheEvict</code>用于删除缓存中的数据。</p><h3 id="删除单个缓存"><a href="#删除单个缓存" class="headerlink" title="删除单个缓存"></a>删除单个缓存</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清空整个缓存"><a href="#清空整个缓存" class="headerlink" title="清空整个缓存"></a>清空整个缓存</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearUserCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 清空users缓存</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Caching组合注解"><a href="#Caching组合注解" class="headerlink" title="@Caching组合注解"></a>@Caching组合注解</h2><p>当需要在一个方法上组合多个缓存操作时，可以使用<code>@Caching</code>注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>    cacheable <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#username"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    put <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.email"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CacheConfig类级别配置"><a href="#CacheConfig类级别配置" class="headerlink" title="@CacheConfig类级别配置"></a>@CacheConfig类级别配置</h2><p>使用<code>@CacheConfig</code>可以在类级别设置一些共同的缓存配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#user.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h2><h3 id="配置缓存管理器"><a href="#配置缓存管理器" class="headerlink" title="配置缓存管理器"></a>配置缓存管理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheManager<span class="token punctuation">.</span><span class="token function">setCaches</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCache</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCache</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Caffeine作为本地缓存"><a href="#使用Caffeine作为本地缓存" class="headerlink" title="使用Caffeine作为本地缓存"></a>使用Caffeine作为本地缓存</h3><p>Caffeine是一个高性能的Java本地缓存库，可以提供比ConcurrentMapCache更好的性能和更多的功能特性。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- pom.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置文件中启用Caffeine缓存：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># application.yml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> caffeine    <span class="token key atrule">caffeine</span><span class="token punctuation">:</span>      <span class="token key atrule">spec</span><span class="token punctuation">:</span> maximumSize=500<span class="token punctuation">,</span>expireAfterWrite=30s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义Caffeine缓存配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CaffeineCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 配置Caffeine缓存</span>        <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> caffeine <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token comment">// 最大缓存对象数</span>            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 写入后过期时间</span>            <span class="token punctuation">.</span><span class="token function">expireAfterAccess</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 访问后过期时间</span>            <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 开启统计</span>                  cacheManager<span class="token punctuation">.</span><span class="token function">setCaffeine</span><span class="token punctuation">(</span>caffeine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置缓存名称</span>        cacheManager<span class="token punctuation">.</span><span class="token function">setCacheNames</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"roles"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 监控Caffeine缓存状态</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheMetricsCollector</span> <span class="token function">cacheMetricsCollector</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CacheMetricsCollector</span> collector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheMetricsCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheManager <span class="token keyword">instanceof</span> <span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CaffeineCacheManager</span> caffeineCacheManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">)</span> cacheManager<span class="token punctuation">;</span>            caffeineCacheManager<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Cache</span> cache <span class="token operator">=</span> caffeineCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token keyword">instanceof</span> <span class="token class-name">CaffeineCache</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    collector<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CaffeineCache</span><span class="token punctuation">)</span> cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNativeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> collector<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Redis作为缓存"><a href="#使用Redis作为缓存" class="headerlink" title="使用Redis作为缓存"></a>使用Redis作为缓存</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># application.yml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="合理设置缓存过期时间"><a href="#合理设置缓存过期时间" class="headerlink" title="合理设置缓存过期时间"></a>合理设置缓存过期时间</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用合适的键生成策略"><a href="#使用合适的键生成策略" class="headerlink" title="使用合适的键生成策略"></a>使用合适的键生成策略</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"T(java.lang.String).format('user:%d', #id)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="避免缓存穿透"><a href="#避免缓存穿透" class="headerlink" title="避免缓存穿透"></a>避免缓存穿透</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span>    key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span>    unless <span class="token operator">=</span> <span class="token string">"#result == null"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合理使用condition和unless"><a href="#合理使用condition和unless" class="headerlink" title="合理使用condition和unless"></a>合理使用condition和unless</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span>    key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span>    condition <span class="token operator">=</span> <span class="token string">"#id != null"</span><span class="token punctuation">,</span>    unless <span class="token operator">=</span> <span class="token string">"#result == null || #result.status == 'INACTIVE'"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><p><strong>选择合适的缓存实现</strong><br>对于小型应用，可以使用ConcurrentMapCache<br>对于分布式应用，推荐使用Redis</p><p><strong>设置合理的缓存大小</strong><br>避免缓存过多数据导致内存压力<br>根据实际业务需求设置缓存容量</p><p><strong>使用缓存预热</strong><br>系统启动时预先加载热点数据<br>避免系统初期的性能问题</p><p><strong>监控缓存性能</strong><br>监控缓存命中率<br>监控缓存容量使用情况</p><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h3><p>问题：频繁查询不存在的数据导致请求直接打到数据库</p><p>解决方案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">"#result == null"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存击穿问题"><a href="#缓存击穿问题" class="headerlink" title="缓存击穿问题"></a>缓存击穿问题</h3><p>问题：热点数据过期导致大量请求直接访问数据库</p><p>解决方案：使用互斥锁或设置永不过期</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span> sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h3><p>问题：大量缓存同时失效</p><p>解决方案：设置随机过期时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SpringBoot的缓存注解提供了一种简单而强大的方式来实现应用程序的缓存功能。通过合理使用这些注解，可以显著提升应用性能。关键点包括：</p><p>选择合适的缓存注解<br>正确配置缓存参数<br>处理好缓存更新和失效<br>注意性能优化和问题处理</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统使用清华镜像源安装Qt 5.15完整指南</title>
      <link href="/2025/03/25/Qt5.15-Windows-Installation-Guide/"/>
      <url>/2025/03/25/Qt5.15-Windows-Installation-Guide/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像源配置与优势"><a href="#镜像源配置与优势" class="headerlink" title="镜像源配置与优势"></a>镜像源配置与优势</h2><h3 id="清华大学镜像站特点"><a href="#清华大学镜像站特点" class="headerlink" title="清华大学镜像站特点"></a>清华大学镜像站特点</h3><ul><li>国内CDN加速</li><li>同步官方仓库每日更新</li><li>支持HTTP&#x2F;HTTPS协议</li></ul><h3 id="镜像源地址配置"><a href="#镜像源地址配置" class="headerlink" title="镜像源地址配置"></a>镜像源地址配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用PowerShell设置临时镜像源</span><span class="token variable">$env</span>:QT_MIRROR_URL<span class="token operator">=</span><span class="token string">'https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="分步安装流程"><a href="#分步安装流程" class="headerlink" title="分步安装流程"></a>分步安装流程</h2><h3 id="步骤1：下载安装器"><a href="#步骤1：下载安装器" class="headerlink" title="步骤1：下载安装器"></a>步骤1：下载安装器</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 使用curl下载安装器</span>curl <span class="token operator">-</span>o qt-unified-windows<span class="token punctuation">.</span>exe https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn/qt/official_releases/online_installers/qt-unified-windows-x64-online<span class="token punctuation">.</span>exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="步骤2：运行安装程序"><a href="#步骤2：运行安装程序" class="headerlink" title="步骤2：运行安装程序"></a>步骤2：运行安装程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 带镜像源参数启动安装程序</span>./qt-unified-windows.exe <span class="token parameter variable">--mirror</span> <span class="token variable">$env</span>:QT_MIRROR_URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="步骤3：组件选择配置"><a href="#步骤3：组件选择配置" class="headerlink" title="步骤3：组件选择配置"></a>步骤3：组件选择配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 必须安装组件</span>• Qt <span class="token number">5.15</span>.2 主模块• MSVC <span class="token number">2019</span> <span class="token number">64</span>-bit编译套件• Qt Creator <span class="token number">4.14</span>开发环境• Debugging Tools <span class="token keyword">for</span> Windows<span class="token comment"># 推荐安装组件</span>• Qt Charts• Qt Quick Controls <span class="token number">2</span>• OpenSSL Toolkit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤4：环境变量配置"><a href="#步骤4：环境变量配置" class="headerlink" title="步骤4：环境变量配置"></a>步骤4：环境变量配置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 设置Qt主路径</span><span class="token namespace">[Environment]</span>::SetEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'QT_DIR'</span><span class="token punctuation">,</span> <span class="token string">'C:\Qt\5.15.2\msvc2019_64'</span><span class="token punctuation">,</span> <span class="token string">'Machine'</span><span class="token punctuation">)</span><span class="token comment"># 添加PATH环境变量</span><span class="token variable">$env</span>:Path <span class="token operator">+=</span> <span class="token string">";C:\Qt\Tools\QtCreator\bin;C:\Qt\5.15.2\msvc2019_64\bin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装验证"><a href="#安装验证" class="headerlink" title="安装验证"></a>安装验证</h2><h3 id="基础验证方法"><a href="#基础验证方法" class="headerlink" title="基础验证方法"></a>基础验证方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查Qt版本</span>qmake <span class="token parameter variable">-v</span><span class="token comment"># 验证编译器</span>cl.exe /?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题解决方案"><a href="#常见问题解决方案" class="headerlink" title="常见问题解决方案"></a>常见问题解决方案</h2><h3 id="镜像源失效处理"><a href="#镜像源失效处理" class="headerlink" title="镜像源失效处理"></a>镜像源失效处理</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 备用镜像源设置</span><span class="token variable">$env</span>:QT_MIRROR_URL=<span class="token string">'https://mirrors.aliyun.com/qt/'</span> <span class="token comment"># 离线安装包下载</span>https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn/qt/archive/qt/5<span class="token punctuation">.</span>15/5<span class="token punctuation">.</span>15<span class="token punctuation">.</span>2/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖缺失修复"><a href="#依赖缺失修复" class="headerlink" title="依赖缺失修复"></a>依赖缺失修复</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装Visual C++ Redistributable</span>winget install Microsoft<span class="token punctuation">.</span>VCRedist<span class="token punctuation">.</span>2019<span class="token punctuation">.</span>x64<span class="token comment"># 安装Windows SDK</span>choco install windows-sdk-10<span class="token punctuation">.</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 开发环境配置 </tag>
            
            <tag> 镜像源使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队天梯赛正则表达式应用详解</title>
      <link href="/2025/03/24/%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/24/%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="团队天梯赛正则表达式应用详解"><a href="#团队天梯赛正则表达式应用详解" class="headerlink" title="团队天梯赛正则表达式应用详解"></a>团队天梯赛正则表达式应用详解</h1><p>在团队天梯赛的编程题目中，正则表达式是一个非常重要的工具，它可以帮助我们高效地处理字符串匹配、验证和提取等问题。本文将系统地总结近三年团队天梯赛中涉及正则表达式的题目，并提供详细的解题思路和代码实现。</p><h2 id="1-正则表达式基础"><a href="#1-正则表达式基础" class="headerlink" title="1. 正则表达式基础"></a>1. 正则表达式基础</h2><h3 id="1-1-Java中的正则表达式API"><a href="#1-1-Java中的正则表达式API" class="headerlink" title="1.1 Java中的正则表达式API"></a>1.1 Java中的正则表达式API</h3><p>在Java中，我们主要通过<code>java.util.regex</code>包来使用正则表达式，其中最常用的类是：</p><ul><li><code>Pattern</code>：编译正则表达式的工具类</li><li><code>Matcher</code>：执行匹配操作的引擎</li></ul><p>基本用法示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 编译正则表达式</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 创建Matcher对象</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"abc123def456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 查找所有匹配</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-常用正则表达式元字符"><a href="#1-2-常用正则表达式元字符" class="headerlink" title="1.2 常用正则表达式元字符"></a>1.2 常用正则表达式元字符</h3><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字符</td></tr><tr><td>\d</td><td>匹配数字 [0-9]</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线</td></tr><tr><td>\s</td><td>匹配空白字符</td></tr><tr><td>\S</td><td>匹配非空白字符</td></tr><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次</td></tr><tr><td>{n}</td><td>精确匹配n次</td></tr><tr><td>{n,}</td><td>至少匹配n次</td></tr><tr><td>{n,m}</td><td>匹配n到m次</td></tr></tbody></table><h2 id="2-经典题型分析"><a href="#2-经典题型分析" class="headerlink" title="2. 经典题型分析"></a>2. 经典题型分析</h2><h3 id="2-1-邮箱地址验证"><a href="#2-1-邮箱地址验证" class="headerlink" title="2.1 邮箱地址验证"></a>2.1 邮箱地址验证</h3><p>这是团队天梯赛中常见的题型，要求验证给定的字符串是否是合法的邮箱地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailValidator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emails <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"test@example.com"</span><span class="token punctuation">,</span>            <span class="token string">"invalid.email@"</span><span class="token punctuation">,</span>            <span class="token string">"test.123@domain.co.uk"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> email <span class="token operator">:</span> emails<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-IP地址匹配"><a href="#2-2-IP地址匹配" class="headerlink" title="2.2 IP地址匹配"></a>2.2 IP地址匹配</h3><p>匹配IPv4地址是另一个常见题型，需要注意IP地址的每个段都是0-255的数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPValidator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidIPv4</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>            <span class="token string">"256.1.2.3"</span><span class="token punctuation">,</span>            <span class="token string">"1.2.3.4.5"</span><span class="token punctuation">,</span>            <span class="token string">"192.168.001.1"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ip <span class="token operator">:</span> ips<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">isValidIPv4</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-URL解析"><a href="#2-3-URL解析" class="headerlink" title="2.3 URL解析"></a>2.3 URL解析</h3><p>解析URL并提取其中的各个组成部分是一个较为复杂的应用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLParser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parseURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^(https?://)?([\\w.-]+)(:\\d+)?(/[\\w./]*)?(?:\\?([^#]*))?(?:#(.*))?$"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Protocol: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>                              matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"://"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Port: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>                              matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"80"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Path: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>                              matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Query: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fragment: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"https://example.com:8080/path/to/page?name=test#section1"</span><span class="token punctuation">;</span>        <span class="token function">parseURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-高级应用技巧"><a href="#3-高级应用技巧" class="headerlink" title="3. 高级应用技巧"></a>3. 高级应用技巧</h2><h3 id="3-1-正则表达式的优化"><a href="#3-1-正则表达式的优化" class="headerlink" title="3.1 正则表达式的优化"></a>3.1 正则表达式的优化</h3><ol><li>使用非捕获组<ul><li>使用<code>(?:pattern)</code>代替<code>(pattern)</code>可以提高性能</li><li>当不需要引用分组时，优先使用非捕获组</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 优化前</span><span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"(\\w+)://([\\w.]+)"</span><span class="token punctuation">;</span><span class="token comment">// 优化后</span><span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"(?:\\w+)://([\\w.]+)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>避免回溯<ul><li>使用具体的字符类代替通配符</li><li>合理使用量词的贪婪模式和非贪婪模式</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可能导致灾难性回溯</span><span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">".*foo"</span><span class="token punctuation">;</span><span class="token comment">// 优化后</span><span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"[^f]*foo"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-常用正则表达式模式"><a href="#3-2-常用正则表达式模式" class="headerlink" title="3.2 常用正则表达式模式"></a>3.2 常用正则表达式模式</h3><ol><li>提取HTML标签</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"&lt;([a-zA-Z][a-zA-Z0-9]*)[^>]*>([^&lt;]*)&lt;/\\1>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>匹配中文字符</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"[\\u4e00-\\u9fa5]+"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>匹配日期格式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^\\d&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-比赛实战技巧"><a href="#4-比赛实战技巧" class="headerlink" title="4. 比赛实战技巧"></a>4. 比赛实战技巧</h2><h3 id="4-1-快速验证正则表达式"><a href="#4-1-快速验证正则表达式" class="headerlink" title="4.1 快速验证正则表达式"></a>4.1 快速验证正则表达式</h3><p>在比赛中，我们可以使用以下方法快速验证正则表达式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexTester</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testRegex</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> testCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> test <span class="token operator">:</span> testCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Testing '%s': %b%n"</span><span class="token punctuation">,</span> test<span class="token punctuation">,</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 如果需要查看分组</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> matcher<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Group %d: %s%n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"(\\d&#123;2&#125;)([a-z]+)"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tests <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"12abc"</span><span class="token punctuation">,</span> <span class="token string">"34def"</span><span class="token punctuation">,</span> <span class="token string">"5xyz"</span><span class="token punctuation">,</span> <span class="token string">"78"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">testRegex</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> tests<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-常见陷阱和注意事项"><a href="#4-2-常见陷阱和注意事项" class="headerlink" title="4.2 常见陷阱和注意事项"></a>4.2 常见陷阱和注意事项</h3><ol><li><p>特殊字符转义</p><ul><li>在Java字符串中，反斜杠需要双重转义</li><li>正则表达式中的特殊字符（如<code>.</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>|</code>, <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>&#123;</code>, <code>&#125;</code>, <code>^</code>, <code>$</code>, <code>\</code>）需要转义</li></ul></li><li><p>性能考虑</p><ul><li>避免使用过于复杂的正则表达式</li><li>对于简单的字符串操作，考虑使用String类的方法</li><li>重复使用的正则表达式应该预编译</li></ul></li><li><p>边界情况处理</p><ul><li>考虑空字符串输入</li><li>考虑特殊字符输入</li><li>考虑超长字符串输入</li></ul></li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>在团队天梯赛中，正则表达式是一个强大的工具，掌握好它可以帮助我们更高效地解决字符串处理问题。关键点包括：</p><ol><li>熟练掌握基本语法和常用元字符</li><li>理解并能够编写常见的正则表达式模式</li><li>注意性能优化和边界情况处理</li><li>在实战中积累经验，建立自己的正则表达式工具库</li></ol><p>希望本文的总结能够帮助大家在团队天梯赛中更好地运用正则表达式解决问题。记住，正则表达式的掌握需要大量练习，建议大家多做题、多总结，逐步提高应用水平。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> 团队天梯赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛中Eclipse的使用与快捷键指南</title>
      <link href="/2025/03/24/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%ADEclipse%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/24/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%ADEclipse%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="算法竞赛中Eclipse的使用与快捷键指南"><a href="#算法竞赛中Eclipse的使用与快捷键指南" class="headerlink" title="算法竞赛中Eclipse的使用与快捷键指南"></a>算法竞赛中Eclipse的使用与快捷键指南</h1><p>在Java蓝桥杯等算法竞赛中，熟练使用Eclipse IDE可以显著提高编码效率和调试速度。本文将系统介绍Eclipse在算法竞赛中的实用技巧和快捷键，帮助参赛者在有限的比赛时间内发挥最大效率。</p><h2 id="1-Eclipse基础配置优化"><a href="#1-Eclipse基础配置优化" class="headerlink" title="1. Eclipse基础配置优化"></a>1. Eclipse基础配置优化</h2><h3 id="1-1-工作空间设置"><a href="#1-1-工作空间设置" class="headerlink" title="1.1 工作空间设置"></a>1.1 工作空间设置</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 打开设置：Window -&gt; Preferences&#x2F;&#x2F; 推荐设置项：1. General -&gt; Workspace -&gt; Text file encoding: UTF-82. General -&gt; Workspace -&gt; New text file line delimiter: Unix3. General -&gt; Editors -&gt; Text Editors -&gt; Show line numbers: 勾选4. General -&gt; Editors -&gt; Text Editors -&gt; Show print margin: 勾选 (设置为100或120)5. Java -&gt; Code Style -&gt; Formatter: 创建自定义格式化配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-内存优化"><a href="#1-2-内存优化" class="headerlink" title="1.2 内存优化"></a>1.2 内存优化</h3><p>在<code>eclipse.ini</code>文件中修改以下参数，提高Eclipse运行性能：</p><pre class="line-numbers language-none"><code class="language-none">-Xms512m-Xmx2048m-XX:MaxPermSize&#x3D;512m-XX:+UseG1GC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-自动保存设置"><a href="#1-3-自动保存设置" class="headerlink" title="1.3 自动保存设置"></a>1.3 自动保存设置</h3><pre class="line-numbers language-none"><code class="language-none">Window -&gt; Preferences -&gt; General -&gt; Editors -&gt; Autosave -&gt; 勾选 &quot;Autosave before build&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-代码模板配置"><a href="#2-代码模板配置" class="headerlink" title="2. 代码模板配置"></a>2. 代码模板配置</h2><h3 id="2-1-创建Java算法竞赛模板"><a href="#2-1-创建Java算法竞赛模板" class="headerlink" title="2.1 创建Java算法竞赛模板"></a>2.1 创建Java算法竞赛模板</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">FastReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 读取测试用例数量</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// int t = in.nextInt();</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在这里编写解题代码</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 快速读取类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FastReader</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br<span class="token punctuation">;</span>        <span class="token class-name">StringTokenizer</span> st<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token class-name">FastReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>st <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> <span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> <span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> <span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-配置代码模板"><a href="#2-2-配置代码模板" class="headerlink" title="2.2 配置代码模板"></a>2.2 配置代码模板</h3><ol><li>打开设置：<code>Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Templates</code></li><li>点击”New”创建新模板</li><li>设置名称（如”compcode”）和描述</li><li>粘贴上面的代码模板</li><li>设置自动补全快捷键（如”comp” + Tab）</li></ol><h2 id="3-常用快捷键"><a href="#3-常用快捷键" class="headerlink" title="3. 常用快捷键"></a>3. 常用快捷键</h2><h3 id="3-1-编辑快捷键"><a href="#3-1-编辑快捷键" class="headerlink" title="3.1 编辑快捷键"></a>3.1 编辑快捷键</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>Ctrl+Space</td><td>内容辅助（代码补全）</td></tr><tr><td>Alt+&#x2F;</td><td>单词补全</td></tr><tr><td>Ctrl+1</td><td>快速修复</td></tr><tr><td>Ctrl+D</td><td>删除当前行</td></tr><tr><td>Ctrl+Alt+↑&#x2F;↓</td><td>复制当前行到上&#x2F;下一行</td></tr><tr><td>Alt+↑&#x2F;↓</td><td>移动当前行</td></tr><tr><td>Shift+Enter</td><td>在当前行下方插入空行</td></tr><tr><td>Ctrl+Shift+Enter</td><td>在当前行上方插入空行</td></tr><tr><td>Ctrl+Shift+F</td><td>格式化代码</td></tr><tr><td>Ctrl+&#x2F;</td><td>注释&#x2F;取消注释当前行</td></tr><tr><td>Ctrl+Shift+&#x2F;</td><td>添加块注释</td></tr><tr><td>Ctrl+Shift+\</td><td>删除块注释</td></tr></tbody></table><h3 id="3-2-导航快捷键"><a href="#3-2-导航快捷键" class="headerlink" title="3.2 导航快捷键"></a>3.2 导航快捷键</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>Ctrl+L</td><td>跳转到指定行</td></tr><tr><td>Ctrl+O</td><td>显示大纲（快速跳转到方法）</td></tr><tr><td>F3</td><td>跳转到声明处</td></tr><tr><td>Alt+←&#x2F;→</td><td>前进&#x2F;后退导航历史</td></tr><tr><td>Ctrl+E</td><td>显示编辑器列表</td></tr><tr><td>Ctrl+F6</td><td>切换编辑器</td></tr><tr><td>Ctrl+F7</td><td>切换视图</td></tr><tr><td>Ctrl+F8</td><td>切换透视图</td></tr></tbody></table><h3 id="3-3-搜索快捷键"><a href="#3-3-搜索快捷键" class="headerlink" title="3.3 搜索快捷键"></a>3.3 搜索快捷键</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>Ctrl+F</td><td>查找</td></tr><tr><td>Ctrl+K</td><td>查找下一个</td></tr><tr><td>Ctrl+Shift+K</td><td>查找上一个</td></tr><tr><td>Ctrl+J</td><td>增量搜索</td></tr><tr><td>Ctrl+Shift+J</td><td>增量搜索（反向）</td></tr><tr><td>Ctrl+H</td><td>打开搜索对话框</td></tr></tbody></table><h2 id="4-调试技巧"><a href="#4-调试技巧" class="headerlink" title="4. 调试技巧"></a>4. 调试技巧</h2><h3 id="4-1-断点设置与管理"><a href="#4-1-断点设置与管理" class="headerlink" title="4.1 断点设置与管理"></a>4.1 断点设置与管理</h3><ul><li>设置断点：双击行号栏或按F9</li><li>条件断点：右键点击断点 -&gt; Breakpoint Properties -&gt; 设置条件</li><li>查看所有断点：Window -&gt; Show View -&gt; Breakpoints</li></ul><h3 id="4-2-调试控制"><a href="#4-2-调试控制" class="headerlink" title="4.2 调试控制"></a>4.2 调试控制</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>F11</td><td>启动调试</td></tr><tr><td>Ctrl+F11</td><td>运行程序</td></tr><tr><td>F5</td><td>单步跳入</td></tr><tr><td>F6</td><td>单步跳过</td></tr><tr><td>F7</td><td>单步返回</td></tr><tr><td>F8</td><td>继续执行</td></tr><tr><td>Ctrl+Shift+I</td><td>检查表达式</td></tr><tr><td>Ctrl+Shift+D</td><td>显示变量值</td></tr></tbody></table><h3 id="4-3-变量监视"><a href="#4-3-变量监视" class="headerlink" title="4.3 变量监视"></a>4.3 变量监视</h3><ol><li>在调试模式下，选中变量右键 -&gt; Watch</li><li>使用Expressions视图添加表达式监视</li><li>使用Variables视图查看当前变量值</li></ol><h2 id="5-实用插件推荐"><a href="#5-实用插件推荐" class="headerlink" title="5. 实用插件推荐"></a>5. 实用插件推荐</h2><h3 id="5-1-Eclipse-Color-Theme"><a href="#5-1-Eclipse-Color-Theme" class="headerlink" title="5.1 Eclipse Color Theme"></a>5.1 Eclipse Color Theme</h3><p>更改Eclipse的配色方案，减轻眼睛疲劳。</p><pre class="line-numbers language-none"><code class="language-none">安装方法：Help -&gt; Eclipse Marketplace -&gt; 搜索&quot;Color Theme&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-AnyEdit-Tools"><a href="#5-2-AnyEdit-Tools" class="headerlink" title="5.2 AnyEdit Tools"></a>5.2 AnyEdit Tools</h3><p>提供额外的编辑功能，如转换大小写、制表符与空格转换等。</p><pre class="line-numbers language-none"><code class="language-none">安装方法：Help -&gt; Eclipse Marketplace -&gt; 搜索&quot;AnyEdit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-EclEmma-Java-Code-Coverage"><a href="#5-3-EclEmma-Java-Code-Coverage" class="headerlink" title="5.3 EclEmma (Java Code Coverage)"></a>5.3 EclEmma (Java Code Coverage)</h3><p>代码覆盖率分析工具，帮助检查测试用例是否完整。</p><pre class="line-numbers language-none"><code class="language-none">安装方法：Help -&gt; Eclipse Marketplace -&gt; 搜索&quot;EclEmma&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-蓝桥杯比赛专用技巧"><a href="#6-蓝桥杯比赛专用技巧" class="headerlink" title="6. 蓝桥杯比赛专用技巧"></a>6. 蓝桥杯比赛专用技巧</h2><h3 id="6-1-快速创建测试用例"><a href="#6-1-快速创建测试用例" class="headerlink" title="6.1 快速创建测试用例"></a>6.1 快速创建测试用例</h3><ol><li>创建input.txt和output.txt文件</li><li>配置运行配置：Run -&gt; Run Configurations -&gt; Arguments -&gt; 重定向输入输出到文件</li></ol><h3 id="6-2-自定义代码片段"><a href="#6-2-自定义代码片段" class="headerlink" title="6.2 自定义代码片段"></a>6.2 自定义代码片段</h3><p>为常用算法创建代码片段：</p><ol><li>Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Templates</li><li>添加常用算法模板（如BFS、DFS、并查集等）</li></ol><p>示例 - 并查集模板：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>        <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">==</span> rootY<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span>            rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-比赛中的时间管理"><a href="#6-3-比赛中的时间管理" class="headerlink" title="6.3 比赛中的时间管理"></a>6.3 比赛中的时间管理</h3><ul><li>使用Eclipse的任务（Tasks）功能标记待完成项</li><li>添加TODO注释：<code>// TODO: 优化算法复杂度</code></li><li>查看所有TODO：Window -&gt; Show View -&gt; Tasks</li></ul><h2 id="7-常见问题解决"><a href="#7-常见问题解决" class="headerlink" title="7. 常见问题解决"></a>7. 常见问题解决</h2><h3 id="7-1-Eclipse启动缓慢"><a href="#7-1-Eclipse启动缓慢" class="headerlink" title="7.1 Eclipse启动缓慢"></a>7.1 Eclipse启动缓慢</h3><ol><li>清理工作空间：删除<code>.metadata/.plugins/org.eclipse.core.resources/.history</code></li><li>禁用不必要的插件：Help -&gt; About Eclipse -&gt; Installation Details -&gt; Installed Software</li></ol><h3 id="7-2-编译错误处理"><a href="#7-2-编译错误处理" class="headerlink" title="7.2 编译错误处理"></a>7.2 编译错误处理</h3><ol><li>项目 -&gt; Clean：清理项目缓存</li><li>检查JRE配置：项目属性 -&gt; Java Build Path -&gt; Libraries</li><li>更新项目：项目右键 -&gt; Maven -&gt; Update Project（如果使用Maven）</li></ol><h3 id="7-3-内存溢出问题"><a href="#7-3-内存溢出问题" class="headerlink" title="7.3 内存溢出问题"></a>7.3 内存溢出问题</h3><p>修改运行配置的JVM参数：</p><pre class="line-numbers language-none"><code class="language-none">Run -&gt; Run Configurations -&gt; Arguments -&gt; VM arguments:-Xmx512m -XX:MaxPermSize&#x3D;128m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>熟练掌握Eclipse的使用技巧和快捷键，可以在蓝桥杯等算法竞赛中节省大量时间，提高编码和调试效率。建议参赛者平时多练习这些技巧，形成肌肉记忆，在比赛中才能得心应手。</p><p>希望本文对参加Java蓝桥杯的选手有所帮助，祝大家在比赛中取得好成绩！</p>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java算法竞赛中树结构的应用</title>
      <link href="/2025/03/24/Java%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E6%A0%91%E7%BB%93%E6%9E%84%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/03/24/Java%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E6%A0%91%E7%BB%93%E6%9E%84%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java算法竞赛中树结构的应用"><a href="#Java算法竞赛中树结构的应用" class="headerlink" title="Java算法竞赛中树结构的应用"></a>Java算法竞赛中树结构的应用</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">树的基本概念</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E6%A0%91%E7%BB%93%E6%9E%84">常见树结构</a><ul><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a></li><li><a href="#%E5%B9%B3%E8%A1%A1%E6%A0%91">平衡树</a></li><li><a href="#%E7%BA%BF%E6%AE%B5%E6%A0%91">线段树</a></li></ul></li><li><a href="#%E6%A0%91%E5%9C%A8%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">树在算法竞赛中的应用场景</a></li><li><a href="#%E5%AE%9E%E9%99%85%E7%AB%9E%E8%B5%9B%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90">实际竞赛题目分析</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">代码实现</a></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90">参考资源</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>树结构在算法竞赛中扮演着重要角色，它们不仅能够高效地组织和管理数据，还能解决许多复杂的问题。本文将详细介绍树的基本概念、常见树结构及其在Java算法竞赛中的应用。</p><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树是一种非线性的数据结构，它由节点和边组成，每个节点有零个或多个子节点，没有父节点的节点称为根节点。</p><h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><ul><li>每个节点有零个或多个子节点</li><li>没有父节点的节点称为根节点</li><li>非根节点有且只有一个父节点</li></ul><h2 id="常见树结构"><a href="#常见树结构" class="headerlink" title="常见树结构"></a>常见树结构</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是每个节点最多有两个子节点的树结构，常用于搜索和排序算法。</p><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p>平衡树是一种特殊的二叉树，它通过自动调整树的结构来保持树的平衡，从而提高操作效率。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>线段树是一种用于处理区间查询和更新操作的数据结构，广泛应用于竞赛题目中。</p><h2 id="树在算法竞赛中的应用场景"><a href="#树在算法竞赛中的应用场景" class="headerlink" title="树在算法竞赛中的应用场景"></a>树在算法竞赛中的应用场景</h2><h3 id="搜索和排序"><a href="#搜索和排序" class="headerlink" title="搜索和排序"></a>搜索和排序</h3><p>二叉树和平衡树常用于实现高效的搜索和排序算法。</p><h3 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h3><p>线段树和树状数组常用于处理区间查询和更新操作。</p><h2 id="实际竞赛题目分析"><a href="#实际竞赛题目分析" class="headerlink" title="实际竞赛题目分析"></a>实际竞赛题目分析</h2><h3 id="题目1：二叉树的最大深度"><a href="#题目1：二叉树的最大深度" class="headerlink" title="题目1：二叉树的最大深度"></a>题目1：二叉树的最大深度</h3><p>给定一个二叉树，求其最大深度。</p><h3 id="题目2：平衡树的插入操作"><a href="#题目2：平衡树的插入操作" class="headerlink" title="题目2：平衡树的插入操作"></a>题目2：平衡树的插入操作</h3><p>实现一个平衡树的插入操作，并保持树的平衡。</p><h3 id="题目3：树状数组的区间求和"><a href="#题目3：树状数组的区间求和" class="headerlink" title="题目3：树状数组的区间求和"></a>题目3：树状数组的区间求和</h3><p>给定一个数组，实现一个树状数组来支持区间求和和单点更新操作。</p><h3 id="题目4：字典树的前缀匹配"><a href="#题目4：字典树的前缀匹配" class="headerlink" title="题目4：字典树的前缀匹配"></a>题目4：字典树的前缀匹配</h3><p>实现一个字典树来支持前缀匹配查询，统计具有相同前缀的单词数量。</p><h3 id="题目5：线段树的区间更新"><a href="#题目5：线段树的区间更新" class="headerlink" title="题目5：线段树的区间更新"></a>题目5：线段树的区间更新</h3><p>实现一个线段树来支持区间更新和区间查询操作。</p><h3 id="题目6：并查集的应用"><a href="#题目6：并查集的应用" class="headerlink" title="题目6：并查集的应用"></a>题目6：并查集的应用</h3><p>使用并查集数据结构解决连通性问题。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="线段树的区间更新"><a href="#线段树的区间更新" class="headerlink" title="线段树的区间更新"></a>线段树的区间更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SegmentTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lazy<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>        lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">buildTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">buildTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">buildTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">updateRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end <span class="token operator">||</span> start <span class="token operator">></span> r <span class="token operator">||</span> end <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">updateRange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateRange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">queryRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">queryRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">queryRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end <span class="token operator">||</span> start <span class="token operator">></span> r <span class="token operator">||</span> end <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>                lazy<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">queryRange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">queryRange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> node <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并查集的应用"><a href="#并查集的应用" class="headerlink" title="并查集的应用"></a>并查集的应用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span>            rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">+=</span> rank<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">=</span> rootQ<span class="token punctuation">;</span>            rank<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">+=</span> rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://cp-algorithms.com/data_structures/segment_tree.html">线段树教程</a></li><li><a href="https://leetcode.com/problems/redundant-connection/solution/">并查集应用</a></li><li><a href="https://visualgo.net/en">算法可视化平台</a></li><li><a href="https://www.topcoder.com/thrive/articles/Binary%20Indexed%20Trees">树状数组教程</a></li><li><a href="https://leetcode.com/problems/implement-trie-prefix-tree/solution/">字典树应用</a></li><li><a href="https://codeforces.com/">算法竞赛平台</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)">树结构维基百科</a></li><li><a href="https://www.algorithm-competition-guide.com/">Java算法竞赛指南</a></li></ul><h2 id="树的遍历方法"><a href="#树的遍历方法" class="headerlink" title="树的遍历方法"></a>树的遍历方法</h2><h3 id="基础遍历原理"><a href="#基础遍历原理" class="headerlink" title="基础遍历原理"></a>基础遍历原理</h3><ul><li>前序遍历：根节点→左子树→右子树</li><li>中序遍历：左子树→根节点→右子树</li><li>后序遍历：左子树→右子树→根节点</li></ul><h3 id="递归与迭代实现"><a href="#递归与迭代实现" class="headerlink" title="递归与迭代实现"></a>递归与迭代实现</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前序递归</span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 中序递归</span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序递归</span><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序遍历递归解法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>### 题目<span class="token number">2</span>：平衡树的插入操作（增加中序遍历验证）```java<span class="token comment">// 插入后中序遍历验证有序性</span><span class="token keyword">void</span> <span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目4：字典树的前缀匹配-1"><a href="#题目4：字典树的前缀匹配-1" class="headerlink" title="题目4：字典树的前缀匹配"></a>题目4：字典树的前缀匹配</h3><p>（补充前序遍历实现）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前序遍历输出所有匹配前缀的单词</span><span class="token keyword">void</span> <span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token class-name">TrieNode</span> node<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrderSearch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前序迭代（使用栈）</span><span class="token keyword">void</span> <span class="token function">preOrderIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 中序迭代（指针+栈）</span><span class="token keyword">void</span> <span class="token function">inOrderIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> curr <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        curr <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序迭代（双栈法）</span><span class="token keyword">void</span> <span class="token function">postOrderIterative</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>DFS深度优先搜索</strong>：前序遍历实现路径查找（如LeetCode 113路径总和II）</li><li><strong>BFS广度优先搜索</strong>：层序遍历处理分层结构（如LeetCode 102二叉树的层序遍历）</li><li><strong>表达式解析</strong>：中序遍历构建语法树（如计算器表达式求值）</li><li><strong>序列化&#x2F;反序列化</strong>：前序遍历实现紧凑存储（如LeetCode 297序列化二叉树）</li><li><strong>镜像判断</strong>：后序遍历检查树对称性（如LeetCode 101对称二叉树）</li><li><strong>BST验证</strong>：中序遍历验证二叉搜索树性质（如LeetCode 98验证BST）</li></ul><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="层序遍历-BFS-实现"><a href="#层序遍历-BFS-实现" class="headerlink" title="层序遍历(BFS)实现"></a>层序遍历(BFS)实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用队列实现层序遍历</span><span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> levelSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> levelSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 换行显示层级</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 树结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite安装和使用指南</title>
      <link href="/2025/03/24/SQLite%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/24/SQLite%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLite安装和使用指南"><a href="#SQLite安装和使用指南" class="headerlink" title="SQLite安装和使用指南"></a>SQLite安装和使用指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装指南</a><ul><li><a href="#windows%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85">Windows平台安装</a></li><li><a href="#linux%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85">Linux平台安装</a></li><li><a href="#macos%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85">macOS平台安装</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">基本使用</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">创建数据库</a></li><li><a href="#%E8%A1%A8%E6%93%8D%E4%BD%9C">表操作</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C">数据操作</a></li></ul></li><li><a href="#%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8">进阶使用</a></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQLite是一个C语言编写的、轻量级的、自给自足的、高可靠性的、全功能的SQL数据库引擎。它是世界上使用最广泛的数据库引擎之一。SQLite的源代码不受版权限制，你可以将其用于任何目的，包括商业用途。</p><h3 id="SQLite的特点"><a href="#SQLite的特点" class="headerlink" title="SQLite的特点"></a>SQLite的特点</h3><ul><li>零配置 - 无需安装和管理配置</li><li>单一文件 - 整个数据库存储在一个文件中</li><li>事务性 - 满足ACID特性</li><li>高可靠性 - 广泛的测试覆盖</li><li>跨平台 - 支持所有主流操作系统</li></ul><h2 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h2><h3 id="Windows平台安装"><a href="#Windows平台安装" class="headerlink" title="Windows平台安装"></a>Windows平台安装</h3><ol><li><p>下载预编译二进制文件</p><ul><li>访问SQLite下载页面：<a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a></li><li>下载<code>sqlite-tools-win32-x86-*.zip</code>文件</li><li>解压文件到指定目录（如：<code>C:\sqlite</code>）</li></ul></li><li><p>配置环境变量</p><ul><li>右键”此电脑” -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</li><li>在系统变量Path中添加SQLite解压目录</li></ul></li><li><p>验证安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlite3 <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="Linux平台安装"><a href="#Linux平台安装" class="headerlink" title="Linux平台安装"></a>Linux平台安装</h3><ol><li><p>Debian&#x2F;Ubuntu系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> sqlite3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>CentOS&#x2F;RHEL系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> sqlite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlite3 <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="macOS平台安装"><a href="#macOS平台安装" class="headerlink" title="macOS平台安装"></a>macOS平台安装</h3><ol><li><p>使用Homebrew安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> sqlite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlite3 <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol><li><p>创建新数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlite3 test<span class="token punctuation">.</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>常用命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">.</span>help    <span class="token comment">-- 显示帮助信息</span><span class="token punctuation">.</span><span class="token keyword">tables</span>  <span class="token comment">-- 显示所有表</span><span class="token punctuation">.</span><span class="token keyword">schema</span>  <span class="token comment">-- 显示表结构</span><span class="token punctuation">.</span>quit    <span class="token comment">-- 退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ol><li><p>创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>    id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> AUTOINCREMENT<span class="token punctuation">,</span>    name <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">TEXT</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    age <span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> phone <span class="token keyword">TEXT</span><span class="token punctuation">;</span><span class="token comment">-- 重命名表</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> new_users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ol><li><p>插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 单行插入</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan@example.com'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 多行插入</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'lisi@example.com'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'wangwu@example.com'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 基本查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span><span class="token comment">-- 条件查询</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> age <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">-- 排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 分组</span><span class="token keyword">SELECT</span> age<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">FROM</span> users <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">26</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li><p>创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_users_name <span class="token keyword">ON</span> users<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建唯一索引</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_users_email <span class="token keyword">ON</span> users<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_users_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 执行操作</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'zhaoliu@example.com'</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 回滚事务</span><span class="token comment">-- ROLLBACK;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> adult_users <span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">-- 使用视图</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> adult_users<span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> adult_users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p>数据库设计</p><ul><li>合理使用主键和外键</li><li>适当的字段类型选择</li><li>规范的命名约定</li></ul></li><li><p>性能优化</p><ul><li>合理使用索引</li><li>避免使用SELECT *</li><li>使用准备语句（Prepared Statements）</li><li>定期VACUUM数据库</li></ul></li><li><p>安全性</p><ul><li>使用参数化查询防止SQL注入</li><li>合理设置文件权限</li><li>定期备份数据</li></ul></li><li><p>并发处理</p><ul><li>合理使用事务</li><li>注意锁的使用</li><li>避免长事务</li></ul></li><li><p>维护建议</p><ul><li>定期更新SQLite版本</li><li>监控数据库大小</li><li>保持良好的文档记录</li></ul></li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p>数据库锁定</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看锁定状态</span>PRAGMA busy_timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>  <span class="token comment">-- 设置超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>数据库优化</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">VACUUM<span class="token punctuation">;</span>  <span class="token comment">-- 整理数据库文件</span><span class="token keyword">ANALYZE</span><span class="token punctuation">;</span> <span class="token comment">-- 收集统计信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>数据库备份</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlite3 test.db <span class="token string">".backup 'backup.db'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://www.sqlite.org/docs.html">SQLite官方文档</a></li><li><a href="https://www.sqlitetutorial.net/">SQLite教程</a></li><li><a href="https://www.sqlite.org/cli.html">SQLite命令参考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图论算法竞赛应用详解</title>
      <link href="/2025/03/24/Java%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/24/Java%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java图论算法竞赛应用详解"><a href="#Java图论算法竞赛应用详解" class="headerlink" title="Java图论算法竞赛应用详解"></a>Java图论算法竞赛应用详解</h1><h2 id="一、图的基本概念"><a href="#一、图的基本概念" class="headerlink" title="一、图的基本概念"></a>一、图的基本概念</h2><h3 id="1-1-什么是图"><a href="#1-1-什么是图" class="headerlink" title="1.1 什么是图"></a>1.1 什么是图</h3><p>图（Graph）是一种非线性数据结构，由顶点（Vertex）的集合和边（Edge）的集合组成。在计算机科学中，图被广泛应用于表示各种实际问题，如社交网络、地图导航、网络拓扑等。</p><h3 id="1-2-图的基本术语"><a href="#1-2-图的基本术语" class="headerlink" title="1.2 图的基本术语"></a>1.2 图的基本术语</h3><ul><li>顶点（Vertex）：图中的节点</li><li>边（Edge）：连接两个顶点的线段</li><li>有向图：边有方向</li><li>无向图：边无方向</li><li>权重：边上的数值</li><li>度：与顶点相连的边的数量</li></ul><h3 id="1-3-图的存储方式"><a href="#1-3-图的存储方式" class="headerlink" title="1.3 图的存储方式"></a>1.3 图的存储方式</h3><h4 id="1-3-1-邻接矩阵"><a href="#1-3-1-邻接矩阵" class="headerlink" title="1.3.1 邻接矩阵"></a>1.3.1 邻接矩阵</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyMatrix</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">;</span> <span class="token comment">// 顶点数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">;</span> <span class="token comment">// 邻接矩阵</span>        <span class="token keyword">public</span> <span class="token class-name">AdjacencyMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">V</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 添加边</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        matrix<span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">[</span>dest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span>dest<span class="token punctuation">]</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无向图需要这行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2-邻接表"><a href="#1-3-2-邻接表" class="headerlink" title="1.3.2 邻接表"></a>1.3.2 邻接表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjacencyList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AdjacencyList</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">V</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            adj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无向图需要这行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、图的基本算法"><a href="#二、图的基本算法" class="headerlink" title="二、图的基本算法"></a>二、图的基本算法</h2><h3 id="2-1-深度优先搜索（DFS）"><a href="#2-1-深度优先搜索（DFS）" class="headerlink" title="2.1 深度优先搜索（DFS）"></a>2.1 深度优先搜索（DFS）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> adj<span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>adj<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-广度优先搜索（BFS）"><a href="#2-2-广度优先搜索（BFS）" class="headerlink" title="2.2 广度优先搜索（BFS）"></a>2.2 广度优先搜索（BFS）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BFS</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> adj<span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>adj<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-最短路径算法"><a href="#2-3-最短路径算法" class="headerlink" title="2.3 最短路径算法"></a>2.3 最短路径算法</h3><h4 id="2-3-1-Dijkstra算法"><a href="#2-3-1-Dijkstra算法" class="headerlink" title="2.3.1 Dijkstra算法"></a>2.3.1 Dijkstra算法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dijkstra</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INF</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">V</span> <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token constant">INF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">INF</span> <span class="token operator">&amp;&amp;</span>                     dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token constant">INF</span><span class="token punctuation">,</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                minIndex <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> minIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-最小生成树"><a href="#2-4-最小生成树" class="headerlink" title="2.4 最小生成树"></a>2.4 最小生成树</h3><h4 id="2-4-1-Kruskal算法"><a href="#2-4-1-Kruskal算法" class="headerlink" title="2.4.1 Kruskal算法"></a>2.4.1 Kruskal算法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kruskal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">-</span> other<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">DisjointSet</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span>                <span class="token class-name">DisjointSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> xRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> yRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">=</span> yRoot<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                parent<span class="token punctuation">[</span>yRoot<span class="token punctuation">]</span> <span class="token operator">=</span> xRoot<span class="token punctuation">;</span>                rank<span class="token punctuation">[</span>xRoot<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kruskalMST</span><span class="token punctuation">(</span><span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DisjointSet</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisjointSet</span><span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Edge</span> nextEdge <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>nextEdge<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>nextEdge<span class="token punctuation">.</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>e<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nextEdge<span class="token punctuation">;</span>                ds<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、实际应用案例"><a href="#三、实际应用案例" class="headerlink" title="三、实际应用案例"></a>三、实际应用案例</h2><h3 id="3-1-图的连通性判断"><a href="#3-1-图的连通性判断" class="headerlink" title="3.1 图的连通性判断"></a>3.1 图的连通性判断</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectivityCheck</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConnectivityCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">V</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            adj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> v <span class="token operator">:</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-拓扑排序"><a href="#3-2-拓扑排序" class="headerlink" title="3.2 拓扑排序"></a>3.2 拓扑排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopologicalSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> adj<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TopologicalSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">V</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            adj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">topologicalSortUtil</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">,</span>                                     <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">topologicalSortUtil</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">topologicalSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">topologicalSortUtil</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">V</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、优化技巧与注意事项"><a href="#四、优化技巧与注意事项" class="headerlink" title="四、优化技巧与注意事项"></a>四、优化技巧与注意事项</h2><h3 id="4-1-数据结构选择"><a href="#4-1-数据结构选择" class="headerlink" title="4.1 数据结构选择"></a>4.1 数据结构选择</h3><ul><li>稀疏图（边较少）：使用邻接表，空间复杂度O(V+E)</li><li>稠密图（边较多）：使用邻接矩阵，空间复杂度O(V²)</li><li>需要快速判断两点是否相连：使用邻接矩阵</li><li>需要遍历某个顶点的所有邻接点：使用邻接表</li></ul><h3 id="4-2-时间复杂度分析"><a href="#4-2-时间复杂度分析" class="headerlink" title="4.2 时间复杂度分析"></a>4.2 时间复杂度分析</h3><ul><li>DFS&#x2F;BFS：O(V+E)</li><li>Dijkstra：O(V²)，使用优先队列可优化到O((V+E)logV)</li><li>Kruskal：O(ElogE)</li><li>拓扑排序：O(V+E)</li></ul><h3 id="4-3-常见优化方法"><a href="#4-3-常见优化方法" class="headerlink" title="4.3 常见优化方法"></a>4.3 常见优化方法</h3><ol><li>使用优先队列优化Dijkstra算法</li><li>路径压缩优化并查集</li><li>使用BitSet代替boolean数组标记访问状态</li><li>预处理技术（如Floyd-Warshall算法）</li></ol><h3 id="4-4-竞赛中的注意事项"><a href="#4-4-竞赛中的注意事项" class="headerlink" title="4.4 竞赛中的注意事项"></a>4.4 竞赛中的注意事项</h3><ol><li>初始化：注意数组大小，避免越界</li><li>边界条件：处理特殊情况（如空图、单个节点）</li><li>数据范围：注意整型溢出</li><li>输入输出：使用BufferedReader&#x2F;BufferedWriter加速IO</li><li>代码复用：封装常用操作为工具方法</li></ol><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>图论算法在竞赛中是一个重要的知识点，掌握好基本概念和常用算法的实现是关键。在实际应用中，需要根据具体问题选择合适的算法和数据结构，同时注意代码的效率和正确性。通过不断练习和总结，才能在竞赛中游刃有余地运用图论算法解决各种问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java哈希表在算法竞赛中的应用</title>
      <link href="/2025/03/24/Java%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9C%A8%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/03/24/Java%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9C%A8%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java哈希表在算法竞赛中的应用"><a href="#Java哈希表在算法竞赛中的应用" class="headerlink" title="Java哈希表在算法竞赛中的应用"></a>Java哈希表在算法竞赛中的应用</h1><h2 id="一、哈希表基础概念"><a href="#一、哈希表基础概念" class="headerlink" title="一、哈希表基础概念"></a>一、哈希表基础概念</h2><h3 id="1-什么是哈希表"><a href="#1-什么是哈希表" class="headerlink" title="1. 什么是哈希表"></a>1. 什么是哈希表</h3><p>哈希表（Hash Table）是一种基于哈希函数实现的数据结构，它提供了近乎O(1)时间复杂度的查询、插入和删除操作。在Java中，主要通过HashMap和HashSet两个类来实现哈希表的功能。</p><h3 id="2-Java中的哈希表实现"><a href="#2-Java中的哈希表实现" class="headerlink" title="2. Java中的哈希表实现"></a>2. Java中的哈希表实现</h3><ol><li><strong>HashMap</strong>：用于存储键值对</li><li><strong>HashSet</strong>：用于存储不重复元素的集合</li><li><strong>LinkedHashMap</strong>：保持插入顺序的HashMap</li><li><strong>TreeMap</strong>：基于红黑树的有序映射</li></ol><h3 id="3-基本操作时间复杂度"><a href="#3-基本操作时间复杂度" class="headerlink" title="3. 基本操作时间复杂度"></a>3. 基本操作时间复杂度</h3><ul><li>插入：O(1)平均</li><li>删除：O(1)平均</li><li>查找：O(1)平均</li><li>遍历：O(n)</li></ul><h2 id="二、HashMap的基本用法"><a href="#二、HashMap的基本用法" class="headerlink" title="二、HashMap的基本用法"></a>二、HashMap的基本用法</h2><h3 id="1-创建和基本操作"><a href="#1-创建和基本操作" class="headerlink" title="1. 创建和基本操作"></a>1. 创建和基本操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建HashMap</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入元素</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取元素</span><span class="token keyword">int</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回1</span><span class="token keyword">int</span> defaultValue <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 键不存在时返回默认值</span><span class="token comment">// 检查键是否存在</span><span class="token keyword">boolean</span> exists <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 删除元素</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取大小</span><span class="token keyword">int</span> size <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空map</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-遍历方式"><a href="#2-遍历方式" class="headerlink" title="2. 遍历方式"></a>2. 遍历方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 遍历键值对</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历键</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、HashSet的基本用法"><a href="#三、HashSet的基本用法" class="headerlink" title="三、HashSet的基本用法"></a>三、HashSet的基本用法</h2><h3 id="1-创建和基本操作-1"><a href="#1-创建和基本操作-1" class="headerlink" title="1. 创建和基本操作"></a>1. 创建和基本操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建HashSet</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查元素是否存在</span><span class="token keyword">boolean</span> exists <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 删除元素</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取大小</span><span class="token keyword">int</span> size <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空set</span>set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-集合操作"><a href="#2-集合操作" class="headerlink" title="2. 集合操作"></a>2. 集合操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 并集</span>set1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 交集</span>set1<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 差集</span>set1<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、竞赛中的典型应用场景"><a href="#四、竞赛中的典型应用场景" class="headerlink" title="四、竞赛中的典型应用场景"></a>四、竞赛中的典型应用场景</h2><h3 id="1-Two-Sum问题"><a href="#1-Two-Sum问题" class="headerlink" title="1. Two Sum问题"></a>1. Two Sum问题</h3><p>给定一个整数数组和目标值，找出数组中两个数之和等于目标值的下标。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字符串匹配"><a href="#2-字符串匹配" class="headerlink" title="2. 字符串匹配"></a>2. 字符串匹配</h3><p>判断两个字符串是否是字母异位词（包含相同的字母，但排列不同）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 统计第一个字符串中字符出现次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 检查第二个字符串</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-频率统计"><a href="#3-频率统计" class="headerlink" title="3. 频率统计"></a>3. 频率统计</h3><p>找出数组中出现次数最多的k个元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 统计频率</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> frequency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        frequency<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> frequency<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用优先队列找出前k个高频元素</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> pq <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pq<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>frequency<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-子数组问题"><a href="#4-子数组问题" class="headerlink" title="4. 子数组问题"></a>4. 子数组问题</h3><p>求和为k的连续子数组的个数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>        count <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、性能优化技巧"><a href="#五、性能优化技巧" class="headerlink" title="五、性能优化技巧"></a>五、性能优化技巧</h2><h3 id="1-初始容量设置"><a href="#1-初始容量设置" class="headerlink" title="1. 初始容量设置"></a>1. 初始容量设置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当知道大约需要存储的元素个数时，设置初始容量可以减少重哈希次数</span><span class="token keyword">int</span> expectedSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>expectedSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-负载因子选择"><a href="#2-负载因子选择" class="headerlink" title="2. 负载因子选择"></a>2. 负载因子选择</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认负载因子是0.75，可以根据需求调整</span><span class="token keyword">float</span> loadFactor <span class="token operator">=</span> <span class="token number">0.8f</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>expectedSize<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-避免哈希冲突"><a href="#3-避免哈希冲突" class="headerlink" title="3. 避免哈希冲突"></a>3. 避免哈希冲突</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义对象作为键时，确保正确实现hashCode()和equals()</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> other<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、实战案例分析"><a href="#六、实战案例分析" class="headerlink" title="六、实战案例分析"></a>六、实战案例分析</h2><h3 id="1-LRU缓存实现"><a href="#1-LRU缓存实现" class="headerlink" title="1. LRU缓存实现"></a>1. LRU缓存实现</h3><p>使用LinkedHashMap实现LRU（最近最少使用）缓存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-单词模式匹配"><a href="#2-单词模式匹配" class="headerlink" title="2. 单词模式匹配"></a>2. 单词模式匹配</h3><p>判断字符串是否遵循给定的模式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> charToWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">></span></span> wordToChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> word <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>charToWord<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wordToChar<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            charToWord<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>            wordToChar<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>charToWord<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、注意事项与最佳实践"><a href="#七、注意事项与最佳实践" class="headerlink" title="七、注意事项与最佳实践"></a>七、注意事项与最佳实践</h2><ol><li><p><strong>选择合适的集合类型</strong></p><ul><li>需要键值对：使用HashMap</li><li>只需要去重：使用HashSet</li><li>需要保持插入顺序：使用LinkedHashMap</li><li>需要排序：使用TreeMap</li></ul></li><li><p><strong>避免常见错误</strong></p><ul><li>确保键类型的hashCode()和equals()正确实现</li><li>注意可变对象作为键的潜在问题</li><li>处理null值的情况</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>合理设置初始容量</li><li>避免频繁的扩容操作</li><li>注意内存使用</li></ul></li></ol><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>哈希表在算法竞赛中是一个非常重要的数据结构，它能够：</p><ol><li>提供O(1)时间复杂度的基本操作</li><li>简化很多复杂问题的解决方案</li><li>在空间换时间的场景中发挥重要作用</li></ol><p>合理使用哈希表可以：</p><ol><li>提高代码效率</li><li>简化代码结构</li><li>解决各种映射和统计问题</li></ol><p>在实际竞赛中，应该根据具体问题选择合适的哈希表实现，并注意性能优化和边界情况的处理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Java官方文档</li><li>《算法》（第4版）</li><li>LeetCode题解集</li><li>蓝桥杯竞赛真题集</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> HashMap </tag>
            
            <tag> HashSet </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流式操作在算法竞赛中的应用</title>
      <link href="/2025/03/23/Java%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E5%9C%A8%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/03/23/Java%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E5%9C%A8%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java流式操作在算法竞赛中的应用"><a href="#Java流式操作在算法竞赛中的应用" class="headerlink" title="Java流式操作在算法竞赛中的应用"></a>Java流式操作在算法竞赛中的应用</h1><h2 id="一、Stream-API基础概念"><a href="#一、Stream-API基础概念" class="headerlink" title="一、Stream API基础概念"></a>一、Stream API基础概念</h2><h3 id="1-什么是Stream"><a href="#1-什么是Stream" class="headerlink" title="1. 什么是Stream"></a>1. 什么是Stream</h3><p>Stream（流）是Java 8引入的一个重要特性，它提供了一种函数式编程的方式来处理集合数据。Stream API让我们可以以声明式的方式处理数据，而不是使用传统的命令式编程方式。在算法竞赛中，合理使用Stream可以让代码更加简洁、易读，同时在某些场景下还能提供不错的性能。</p><h3 id="2-Stream的特点"><a href="#2-Stream的特点" class="headerlink" title="2. Stream的特点"></a>2. Stream的特点</h3><ol><li><strong>声明式编程</strong>：通过描述想要的结果而不是具体的步骤</li><li><strong>链式操作</strong>：可以将多个操作串联起来</li><li><strong>惰性求值</strong>：中间操作不会立即执行</li><li><strong>并行处理</strong>：可以轻松实现并行操作</li></ol><h2 id="二、常用Stream操作在竞赛中的应用"><a href="#二、常用Stream操作在竞赛中的应用" class="headerlink" title="二、常用Stream操作在竞赛中的应用"></a>二、常用Stream操作在竞赛中的应用</h2><h3 id="1-数组转换与处理"><a href="#1-数组转换与处理" class="headerlink" title="1. 数组转换与处理"></a>1. 数组转换与处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数组转List</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组去重</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> unique <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组排序</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sorted <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据过滤与映射"><a href="#2-数据过滤与映射" class="headerlink" title="2. 数据过滤与映射"></a>2. 数据过滤与映射</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 过滤偶数</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evens <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组元素平方</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> squares <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 过滤并转换</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数值统计"><a href="#3-数值统计" class="headerlink" title="3. 数值统计"></a>3. 数值统计</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 求和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最大值</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 统计信息</span><span class="token class-name">IntSummaryStatistics</span> stats <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值: "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值: "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值: "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和: "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数量: "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、竞赛中的实际应用场景"><a href="#三、竞赛中的实际应用场景" class="headerlink" title="三、竞赛中的实际应用场景"></a>三、竞赛中的实际应用场景</h2><h3 id="1-处理输入数据"><a href="#1-处理输入数据" class="headerlink" title="1. 处理输入数据"></a>1. 处理输入数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取一行数字并转换为int数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取多行并处理</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>sc<span class="token operator">::</span><span class="token function">nextLine</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-图论问题中的应用"><a href="#2-图论问题中的应用" class="headerlink" title="2. 图论问题中的应用"></a>2. 图论问题中的应用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 邻接表表示的图</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取节点的所有邻居</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> neighbors <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>next <span class="token operator">-></span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取入度为0的节点</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> startNodes <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-组合问题"><a href="#3-组合问题" class="headerlink" title="3. 组合问题"></a>3. 组合问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生成所有可能的数字组合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> combinations <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>j <span class="token operator">-></span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 生成指定范围内的数字</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> range <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、性能优化建议"><a href="#四、性能优化建议" class="headerlink" title="四、性能优化建议"></a>四、性能优化建议</h2><h3 id="1-避免不必要的装箱-拆箱"><a href="#1-避免不必要的装箱-拆箱" class="headerlink" title="1. 避免不必要的装箱&#x2F;拆箱"></a>1. 避免不必要的装箱&#x2F;拆箱</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不推荐</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 推荐</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-合理使用并行流"><a href="#2-合理使用并行流" class="headerlink" title="2. 合理使用并行流"></a>2. 合理使用并行流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据量大且操作独立时使用并行流</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">heavyComputation</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-避免过度使用流"><a href="#3-避免过度使用流" class="headerlink" title="3. 避免过度使用流"></a>3. 避免过度使用流</h3><p>有些场景下，传统的循环可能更清晰或性能更好：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 简单循环更好</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不必要的流操作</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、实战案例分析"><a href="#五、实战案例分析" class="headerlink" title="五、实战案例分析"></a>五、实战案例分析</h2><h3 id="1-蓝桥杯真题示例"><a href="#1-蓝桥杯真题示例" class="headerlink" title="1. 蓝桥杯真题示例"></a>1. 蓝桥杯真题示例</h3><p>以下是一个处理数字序列的问题示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取并处理数据</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-></span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出结果</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-复杂数据处理"><a href="#2-复杂数据处理" class="headerlink" title="2. 复杂数据处理"></a>2. 复杂数据处理</h3><p>处理学生成绩统计的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理学生数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取成绩大于80的学生名单</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> highScoreStudents <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计算平均分</span><span class="token keyword">double</span> avgScore <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span>score<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>Stream API在Java算法竞赛中是一个强大的工具，它可以帮助我们：</p><ol><li>简化代码结构，提高可读性</li><li>减少中间变量，使逻辑更清晰</li><li>提供函数式编程的范式</li><li>在某些场景下提供更好的性能</li></ol><p>但同时我们也要注意：</p><ol><li>不是所有场景都适合使用Stream</li><li>要注意性能开销，特别是装箱&#x2F;拆箱操作</li><li>在竞赛中要权衡代码编写速度和运行效率</li></ol><p>合理使用Stream API可以让我们的竞赛代码更加优雅，但也要避免过度使用。在实际竞赛中，应该根据具体问题选择最适合的解决方案。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Java 8 Stream API文档</li><li>《Java 8实战》</li><li>蓝桥杯竞赛真题集</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream API </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组详解与应用</title>
      <link href="/2025/03/23/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2025/03/23/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组详解与应用"><a href="#树状数组详解与应用" class="headerlink" title="树状数组详解与应用"></a>树状数组详解与应用</h1><h2 id="一、树状数组简介"><a href="#一、树状数组简介" class="headerlink" title="一、树状数组简介"></a>一、树状数组简介</h2><p>树状数组（Binary Indexed Tree，简称BIT），也称为Fenwick Tree，是一种用于高效处理数组前缀和问题的数据结构。它能够以O(log n)的时间复杂度完成以下操作：</p><ol><li>单点更新：修改数组中某一位置的值</li><li>区间查询：求解数组中某一区间的和</li></ol><p>相比于传统的前缀和数组，树状数组在处理数组元素频繁更新的场景下具有显著优势。</p><h2 id="二、树状数组的基本原理"><a href="#二、树状数组的基本原理" class="headerlink" title="二、树状数组的基本原理"></a>二、树状数组的基本原理</h2><h3 id="1-数据存储方式"><a href="#1-数据存储方式" class="headerlink" title="1. 数据存储方式"></a>1. 数据存储方式</h3><p>树状数组本质上是一个数组，但它巧妙地利用了二进制的性质来组织数据。在树状数组中，每个位置i存储的是原数组中一段区间的和，这个区间的长度与i的二进制表示有关。</p><p>具体来说，树状数组中的每个元素tree[i]存储的是原数组中从(i-lowbit(i)+1)到i这一段区间的和。其中，lowbit(i)表示i的二进制表示中最低位1所对应的值。</p><h3 id="2-lowbit函数解析"><a href="#2-lowbit函数解析" class="headerlink" title="2. lowbit函数解析"></a>2. lowbit函数解析</h3><p>树状数组的核心是lowbit函数，它用于获取一个数的二进制表示中最低位1所对应的值。例如：</p><ul><li>lowbit(6) &#x3D; lowbit(110₂) &#x3D; 2</li><li>lowbit(5) &#x3D; lowbit(101₂) &#x3D; 1</li><li>lowbit(8) &#x3D; lowbit(1000₂) &#x3D; 8</li></ul><p>在Java中，lowbit函数的实现非常简洁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个函数利用了补码的性质：对于一个整数x，-x的二进制表示是x的二进制取反加1。因此，x &amp; (-x)的结果恰好是x的二进制表示中最低位1所对应的值。</p><h2 id="三、树状数组的基本操作"><a href="#三、树状数组的基本操作" class="headerlink" title="三、树状数组的基本操作"></a>三、树状数组的基本操作</h2><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><p>树状数组的初始化很简单，只需要创建一个大小为n+1的数组（下标从1开始）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-单点更新（update操作）"><a href="#2-单点更新（update操作）" class="headerlink" title="2. 单点更新（update操作）"></a>2. 单点更新（update操作）</h3><p>当我们需要将原数组中位置i的值增加delta时，需要更新树状数组中所有包含位置i的区间。更新的过程如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个过程的时间复杂度是O(log n)。</p><h3 id="3-前缀和查询（query操作）"><a href="#3-前缀和查询（query操作）" class="headerlink" title="3. 前缀和查询（query操作）"></a>3. 前缀和查询（query操作）</h3><p>当我们需要查询原数组中从1到i的前缀和时，需要将树状数组中多个区间的和加起来。查询的过程如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个过程的时间复杂度也是O(log n)。</p><h3 id="4-区间查询"><a href="#4-区间查询" class="headerlink" title="4. 区间查询"></a>4. 区间查询</h3><p>如果要查询原数组中从l到r的区间和，可以利用前缀和的性质：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、树状数组的实现示例"><a href="#四、树状数组的实现示例" class="headerlink" title="四、树状数组的实现示例"></a>四、树状数组的实现示例</h2><p>以下是一个完整的树状数组实现示例，包括基本的更新和查询操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FenwickTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">FenwickTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回x的二进制表示中最低位1所对应的值</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 将位置i的值增加delta</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 查询从1到i的前缀和</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 查询从l到r的区间和</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、树状数组的应用场景"><a href="#五、树状数组的应用场景" class="headerlink" title="五、树状数组的应用场景"></a>五、树状数组的应用场景</h2><h3 id="1-区间和查询"><a href="#1-区间和查询" class="headerlink" title="1. 区间和查询"></a>1. 区间和查询</h3><p>树状数组最基本的应用是处理区间和查询问题，特别是在数组元素频繁更新的情况下。</p><h3 id="2-逆序对计数"><a href="#2-逆序对计数" class="headerlink" title="2. 逆序对计数"></a>2. 逆序对计数</h3><p>树状数组可以高效地解决逆序对计数问题。通过从右到左遍历数组，对于每个元素，查询比它小的元素的个数，然后将该元素加入树状数组。</p><h3 id="3-二维树状数组"><a href="#3-二维树状数组" class="headerlink" title="3. 二维树状数组"></a>3. 二维树状数组</h3><p>树状数组可以扩展到二维空间，用于处理矩阵的区域和查询问题。</p><h3 id="4-动态维护前缀最值"><a href="#4-动态维护前缀最值" class="headerlink" title="4. 动态维护前缀最值"></a>4. 动态维护前缀最值</h3><p>通过一些技巧，树状数组也可以用于动态维护前缀最大值或最小值。</p><h2 id="六、树状数组与线段树的比较"><a href="#六、树状数组与线段树的比较" class="headerlink" title="六、树状数组与线段树的比较"></a>六、树状数组与线段树的比较</h2><p>树状数组和线段树都是用于处理区间查询问题的数据结构，但它们各有优缺点：</p><ol><li><strong>实现复杂度</strong>：树状数组的实现更加简洁，代码量更少。</li><li><strong>空间复杂度</strong>：树状数组的空间复杂度为O(n)，而线段树的空间复杂度为O(4n)。</li><li><strong>功能</strong>：线段树功能更加强大，可以处理更复杂的区间操作，如区间修改、区间最值查询等。</li><li><strong>常数因子</strong>：在实际应用中，树状数组的常数因子通常小于线段树，因此在只需要处理区间和查询的场景下，树状数组可能更快。</li></ol><h2 id="七、实际应用示例"><a href="#七、实际应用示例" class="headerlink" title="七、实际应用示例"></a>七、实际应用示例</h2><p>以下是一个使用树状数组解决实际问题的示例。这个问题来自于我们的代码库中的一个例子，涉及到对不同颜色点的计数和查询：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FenwickTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FenwickTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">preSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret <span class="token operator">+=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">rangeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">preSum</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">preSum</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用树状数组解决问题</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读入所有的点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x坐标</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y坐标</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 颜色</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span> w<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 对点进行排序，先按x升序，然后按y升序</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立三种颜色对应的树状数组</span>    <span class="token class-name">FenwickTree</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FenwickTree</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FenwickTree</span><span class="token punctuation">(</span><span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">// 枚举排序好的点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x坐标</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// y坐标</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 颜色</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 相同颜色被排除掉</span>            <span class="token comment">// 累加答案，计算当前点的有效配对数量</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rangeSum</span><span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 更新树状数组</span>        tree<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们使用树状数组来高效地计算满足特定条件的点对数量。通过对点按照x坐标和y坐标排序，然后利用树状数组维护不同颜色点的计数，我们可以在O(n log n)的时间复杂度内解决这个问题。</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>树状数组是一种简洁而强大的数据结构，特别适合处理需要频繁更新的区间和查询问题。它的核心思想是利用二进制的性质来组织数据，通过lowbit函数确定每个位置存储的区间范围。</p><p>与其他数据结构相比，树状数组的优势在于实现简单、空间效率高、常数因子小。虽然功能不如线段树强大，但在适用的场景下，树状数组往往是更优的选择。</p><p>掌握树状数组，不仅能够帮助我们高效地解决各种区间查询问题，还能够加深我们对二进制运算和数据结构设计的理解。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>《算法竞赛入门经典》</li><li>《算法导论》</li><li><a href="https://en.wikipedia.org/wiki/Fenwick_tree">维基百科：Fenwick树</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令速查表</title>
      <link href="/2025/03/23/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>/2025/03/23/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h1><p>Git是目前世界上最先进的分布式版本控制系统，本文整理了日常开发中最常用的Git命令，方便快速查阅。</p><h2 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment"># 下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span>$ <span class="token function">git</span> config <span class="token parameter variable">--list</span><span class="token comment"># 编辑Git配置文件</span>$ <span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment"># 设置提交代码时的用户信息</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除和重命名文件"><a href="#删除和重命名文件" class="headerlink" title="删除和重命名文件"></a>删除和重命名文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span><span class="token comment"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-v</span><span class="token comment"># 使用一次新的commit，替代上一次提交</span><span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment"># 列出所有远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-r</span><span class="token comment"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，与远程分支同步，并切换到该分支</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支合并与删除"><a href="#分支合并与删除" class="headerlink" title="分支合并与删除"></a>分支合并与删除</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 选择一个commit，合并进当前分支</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span>$ <span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除本地tag</span>$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--tags</span><span class="token comment"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><h3 id="基本信息查看"><a href="#基本信息查看" class="headerlink" title="基本信息查看"></a>基本信息查看</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示有变更的文件</span>$ <span class="token function">git</span> status<span class="token comment"># 显示当前分支的版本历史</span>$ <span class="token function">git</span> log<span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span>$ <span class="token function">git</span> log <span class="token parameter variable">--stat</span><span class="token comment"># 搜索提交历史，根据关键词</span>$ <span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--grep</span> feature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件历史查看"><a href="#文件历史查看" class="headerlink" title="文件历史查看"></a>文件历史查看</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示某个文件的版本历史，包括文件改名</span>$ <span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示指定文件相关的每一次diff</span>$ <span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示过去5次提交</span>$ <span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span><span class="token comment"># 显示所有提交过的用户，按提交次数排序</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span><span class="token comment"># 显示指定文件是什么人在什么时间修改过</span>$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示暂存区和工作区的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment"># 显示两次提交之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment"># 显示今天你写了多少行代码</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">"@&#123;0 day ago&#125;"</span><span class="token comment"># 显示某次提交的元数据和内容变化</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交发生变化的文件</span>$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交时，某个文件的内容</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 显示当前分支的最近几次提交</span>$ <span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载远程仓库的所有变动</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 显示某个远程仓库的信息</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 上传本地指定分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--force</span><span class="token comment"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><h3 id="文件恢复"><a href="#文件恢复" class="headerlink" title="文件恢复"></a>文件恢复</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 重置暂存区与工作区，与上一次commit保持一致</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span><span class="token comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--keep</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个commit，用来撤销指定commit</span><span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="暂存操作"><a href="#暂存操作" class="headerlink" title="暂存操作"></a>暂存操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span>$ <span class="token function">git</span> stash$ <span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> archive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看提交者统计信息"><a href="#查看提交者统计信息" class="headerlink" title="查看提交者统计信息"></a>查看提交者统计信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看提交者排名前5</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span> --no-merges <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span><span class="token comment"># 查看指定时间段的提交者排名</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span> --no-merges <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">"2022-01-01"</span> <span class="token parameter variable">--before</span><span class="token operator">=</span><span class="token string">"2023-01-01"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看仓库大小"><a href="#查看仓库大小" class="headerlink" title="查看仓库大小"></a>查看仓库大小</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看仓库大小</span>$ <span class="token function">git</span> count-objects <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Git是一个功能强大的版本控制工具，掌握这些常用命令可以帮助你更高效地进行代码管理和团队协作。随着使用的深入，你会发现Git还有更多高级功能等待探索。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lucas定理和费马小定理在竞赛中的应用</title>
      <link href="/2025/03/21/Lucas%E5%AE%9A%E7%90%86%E5%92%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E5%9C%A8%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/03/21/Lucas%E5%AE%9A%E7%90%86%E5%92%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E5%9C%A8%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文详细介绍Lucas定理和费马小定理的数学原理及其在算法竞赛中的应用，并提供Java代码实现和实际竞赛例题分析。</p></blockquote><h2 id="一、数学原理介绍"><a href="#一、数学原理介绍" class="headerlink" title="一、数学原理介绍"></a>一、数学原理介绍</h2><h3 id="1-1-费马小定理-Fermat’s-Little-Theorem"><a href="#1-1-费马小定理-Fermat’s-Little-Theorem" class="headerlink" title="1.1 费马小定理(Fermat’s Little Theorem)"></a>1.1 费马小定理(Fermat’s Little Theorem)</h3><p>费马小定理是数论中的一个重要定理，由法国数学家皮埃尔·德·费马提出。</p><p><strong>定理内容</strong>：如果p是质数，a是整数且不是p的倍数，则有：</p><pre class="line-numbers language-none"><code class="language-none">a^(p-1) ≡ 1 (mod p)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价形式：对于任意整数a和质数p，有：</p><pre class="line-numbers language-none"><code class="language-none">a^p ≡ a (mod p)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>证明思路</strong>：</p><ul><li>考虑集合S &#x3D; {1, 2, …, p-1}</li><li>将S中每个元素乘以a（模p），得到集合T &#x3D; {a·1 mod p, a·2 mod p, …, a·(p-1) mod p}</li><li>可以证明T中的元素互不相同且都不为0</li><li>因此T是S的一个排列</li><li>两个集合的元素乘积相等：(a·1)·(a·2)·…·(a·(p-1)) ≡ 1·2·…·(p-1) (mod p)</li><li>整理得：a^(p-1)·(p-1)! ≡ (p-1)! (mod p)</li><li>由于(p-1)!与p互质，可以消去，得到a^(p-1) ≡ 1 (mod p)</li></ul><h3 id="1-2-Lucas定理-Lucas’-Theorem"><a href="#1-2-Lucas定理-Lucas’-Theorem" class="headerlink" title="1.2 Lucas定理(Lucas’ Theorem)"></a>1.2 Lucas定理(Lucas’ Theorem)</h3><p>Lucas定理用于在模质数p的情况下计算组合数。</p><p><strong>定理内容</strong>：对于非负整数n和m，以及质数p，有：</p><pre class="line-numbers language-none"><code class="language-none">C(n, m) ≡ C(n0, m0) × C(n1, m1) × ... × C(nk, mk) (mod p)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，n &#x3D; n0 + n1·p + n2·p² + … + nk·p^k，m &#x3D; m0 + m1·p + m2·p² + … + mk·p^k，是n和m的p进制表示。</p><p><strong>简化理解</strong>：</p><ul><li>将n和m表示为p进制</li><li>分别计算每一位上的组合数</li><li>将这些组合数相乘，结果即为C(n,m) mod p</li></ul><h2 id="二、竞赛中的应用场景"><a href="#二、竞赛中的应用场景" class="headerlink" title="二、竞赛中的应用场景"></a>二、竞赛中的应用场景</h2><h3 id="2-1-费马小定理的应用"><a href="#2-1-费马小定理的应用" class="headerlink" title="2.1 费马小定理的应用"></a>2.1 费马小定理的应用</h3><ol><li><p><strong>模运算下的除法</strong>：</p><ul><li>在模p下，a&#x2F;b可以表示为a·b^(-1) mod p</li><li>利用费马小定理，b^(-1) ≡ b^(p-2) (mod p)</li><li>因此a&#x2F;b ≡ a·b^(p-2) (mod p)</li></ul></li><li><p><strong>快速幂取模</strong>：</p><ul><li>计算a^b mod p时，可以利用费马小定理降低指数</li><li>当b很大时，可以用b mod (p-1)替代b</li></ul></li><li><p><strong>逆元计算</strong>：</p><ul><li>在模p下，a的乘法逆元是a^(p-2)</li><li>用于解决除法取模问题</li></ul></li></ol><h3 id="2-2-Lucas定理的应用"><a href="#2-2-Lucas定理的应用" class="headerlink" title="2.2 Lucas定理的应用"></a>2.2 Lucas定理的应用</h3><ol><li><p><strong>大组合数取模</strong>：</p><ul><li>当n和m非常大时，直接计算C(n,m)会溢出</li><li>使用Lucas定理可以将大组合数分解为小组合数的乘积</li></ul></li><li><p><strong>组合数取模质数幂</strong>：</p><ul><li>扩展Lucas定理可以处理模质数幂的情况</li></ul></li><li><p><strong>数位DP问题</strong>：</p><ul><li>在某些数位DP问题中，需要计算组合数取模</li></ul></li></ol><h2 id="三、Java代码实现"><a href="#三、Java代码实现" class="headerlink" title="三、Java代码实现"></a>三、Java代码实现</h2><h3 id="3-1-费马小定理实现"><a href="#3-1-费马小定理实现" class="headerlink" title="3.1 费马小定理实现"></a>3.1 费马小定理实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FermatTheorem</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算 (a^b) % mod</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">%=</span> mod<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用费马小定理计算乘法逆元</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">modInverse</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"Modular inverse does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">fastPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算最大公约数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用费马小定理计算模p下的除法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">modDivide</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token function">modInverse</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-Lucas定理实现"><a href="#3-2-Lucas定理实现" class="headerlink" title="3.2 Lucas定理实现"></a>3.2 Lucas定理实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LucasTheorem</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算组合数 C(n,m)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n <span class="token operator">-</span> m<span class="token punctuation">)</span> m <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span>                <span class="token keyword">long</span> numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            numerator <span class="token operator">=</span> <span class="token punctuation">(</span>numerator <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            denominator <span class="token operator">=</span> <span class="token punctuation">(</span>denominator <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token class-name">FermatTheorem</span><span class="token punctuation">.</span><span class="token function">modDivide</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Lucas定理实现</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">lucas</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">combination</span><span class="token punctuation">(</span>n <span class="token operator">%</span> p<span class="token punctuation">,</span> m <span class="token operator">%</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span>                 <span class="token function">lucas</span><span class="token punctuation">(</span>n <span class="token operator">/</span> p<span class="token punctuation">,</span> m <span class="token operator">/</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-扩展Lucas定理（处理质数幂）"><a href="#3-3-扩展Lucas定理（处理质数幂）" class="headerlink" title="3.3 扩展Lucas定理（处理质数幂）"></a>3.3 扩展Lucas定理（处理质数幂）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedLucas</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 扩展欧几里得算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> x <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> y <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>        result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算乘法逆元（不使用费马小定理）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">modInverse</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算n!中因子p的个数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">factorialPrimePower</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            n <span class="token operator">/=</span> p<span class="token punctuation">;</span>            count <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算n! mod p^k，其中p^k不整除n!</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">factorialModPrimePower</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">long</span> pk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> pk<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 计算循环节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> pk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token function">factorialModPrimePower</span><span class="token punctuation">(</span>n <span class="token operator">/</span> pk<span class="token punctuation">,</span> p<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> pk<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算组合数C(n,m) mod p^k</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">combinationModPrimePower</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">long</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> pk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 计算n!、m!和(n-m)!中p的幂次</span>        <span class="token keyword">long</span> pn <span class="token operator">=</span> <span class="token function">factorialPrimePower</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> pm <span class="token operator">=</span> <span class="token function">factorialPrimePower</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> pnm <span class="token operator">=</span> <span class="token function">factorialPrimePower</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果p的幂次不够，返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pn <span class="token operator">></span> pm <span class="token operator">+</span> pnm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 计算不包含p因子的部分</span>        <span class="token keyword">long</span> numerator <span class="token operator">=</span> <span class="token function">factorialModPrimePower</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">factorialModPrimePower</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> pk<span class="token punctuation">)</span> <span class="token operator">*</span>                            <span class="token function">factorialModPrimePower</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> pk<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>numerator <span class="token operator">*</span> <span class="token function">modInverse</span><span class="token punctuation">(</span>denominator<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> pk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 中国剩余定理合并结果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">chineseRemainderTheorem</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainders<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> moduli<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> product <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> mod <span class="token operator">:</span> moduli<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            product <span class="token operator">*=</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> remainders<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> m <span class="token operator">=</span> product <span class="token operator">/</span> moduli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> inverse <span class="token operator">=</span> <span class="token function">modInverse</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> moduli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">+</span> remainders<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token operator">*</span> inverse<span class="token punctuation">)</span> <span class="token operator">%</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 扩展Lucas定理</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">extendedLucas</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">long</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对于质数幂p^k，使用组合数模质数幂的方法</span>        <span class="token keyword">return</span> <span class="token function">combinationModPrimePower</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、竞赛例题分析"><a href="#四、竞赛例题分析" class="headerlink" title="四、竞赛例题分析"></a>四、竞赛例题分析</h2><h3 id="例题1：大组合数取模（基础应用）"><a href="#例题1：大组合数取模（基础应用）" class="headerlink" title="例题1：大组合数取模（基础应用）"></a>例题1：大组合数取模（基础应用）</h3><p><strong>题目描述</strong>：<br>计算C(n,m) mod p，其中n和m可能非常大（n,m ≤ 10^18），p是质数（p ≤ 10^5）。</p><p><strong>分析</strong>：</p><ul><li>直接计算C(n,m)会溢出</li><li>使用Lucas定理可以解决</li></ul><p><strong>Java实现</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeCombinatorialNumber</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LucasTheorem</span><span class="token punctuation">.</span><span class="token function">lucas</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题2：模运算下的除法（费马小定理应用）"><a href="#例题2：模运算下的除法（费马小定理应用）" class="headerlink" title="例题2：模运算下的除法（费马小定理应用）"></a>例题2：模运算下的除法（费马小定理应用）</h3><p><strong>题目描述</strong>：<br>给定n个正整数a₁, a₂, …, aₙ和质数p，计算(a₁ × a₂ × … × aₙ)⁻¹ mod p。</p><p><strong>分析</strong>：</p><ul><li>需要计算乘积的模逆元</li><li>使用费马小定理计算每个数的逆元，然后相乘</li></ul><p><strong>Java实现</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModularInverseProduct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 计算a的逆元</span>            <span class="token keyword">long</span> inverse <span class="token operator">=</span> <span class="token class-name">FermatTheorem</span><span class="token punctuation">.</span><span class="token function">modInverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> inverse<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题3：组合数取模质数幂（扩展Lucas定理应用）"><a href="#例题3：组合数取模质数幂（扩展Lucas定理应用）" class="headerlink" title="例题3：组合数取模质数幂（扩展Lucas定理应用）"></a>例题3：组合数取模质数幂（扩展Lucas定理应用）</h3><p><strong>题目描述</strong>：<br>计算C(n,m) mod p^k，其中n,m ≤ 10^6，p是质数，k ≤ 10。</p><p><strong>分析</strong>：</p><ul><li>基本Lucas定理只适用于模质数的情况</li><li>需要使用扩展Lucas定理处理模质数幂的情况</li></ul><p><strong>Java实现</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CombinationModPrimePower</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ExtendedLucas</span><span class="token punctuation">.</span><span class="token function">extendedLucas</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题4：快速幂与费马小定理结合（优化大指数）"><a href="#例题4：快速幂与费马小定理结合（优化大指数）" class="headerlink" title="例题4：快速幂与费马小定理结合（优化大指数）"></a>例题4：快速幂与费马小定理结合（优化大指数）</h3><p><strong>题目描述</strong>：<br>计算a^b mod p，其中a,b,p ≤ 10^18，p是质数。</p><p><strong>分析</strong>：</p><ul><li>直接使用快速幂计算a^b mod p，当b非常大时效率低下</li><li>根据费马小定理，a^(p-1) ≡ 1 (mod p)</li><li>因此a^b ≡ a^(b mod (p-1)) (mod p)，当b ≥ p-1时</li><li>特别地，当b &lt; p-1时，直接计算a^b mod p</li></ul><p><strong>Java实现</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeExponentiation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 处理特殊情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 处理a是p的倍数的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 应用费马小定理优化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b <span class="token operator">=</span> b <span class="token operator">%</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 特殊情况：b变为0，实际上是p-1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                b <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">FermatTheorem</span><span class="token punctuation">.</span><span class="token function">fastPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题5：组合数学问题（Lucas定理实际应用）"><a href="#例题5：组合数学问题（Lucas定理实际应用）" class="headerlink" title="例题5：组合数学问题（Lucas定理实际应用）"></a>例题5：组合数学问题（Lucas定理实际应用）</h3><p><strong>题目描述</strong>：<br>有n个不同的球和m个不同的盒子，每个盒子可以放任意数量的球，求不同的放置方法数量，对10^9+7取模。</p><p><strong>分析</strong>：</p><ul><li>这是一个经典的组合数学问题，等价于将n个球放入m个盒子，每个盒子至少放一个球</li><li>答案为C(n-1, m-1)，即从n-1个位置中选择m-1个隔板的方法数</li><li>当n和m很大时，需要使用Lucas定理计算</li></ul><p><strong>Java实现</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BallsAndBoxes</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span> <span class="token comment">// 10^9 + 7</span>                <span class="token comment">// 特殊情况处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 盒子比球多，不可能每个盒子至少一个球</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 计算C(n-1, m-1) mod (10^9 + 7)</span>        <span class="token comment">// 由于10^9 + 7是质数，可以直接使用Lucas定理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LucasTheorem</span><span class="token punctuation">.</span><span class="token function">combination</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结与拓展"><a href="#五、总结与拓展" class="headerlink" title="五、总结与拓展"></a>五、总结与拓展</h2><h3 id="5-1-两个定理的联系"><a href="#5-1-两个定理的联系" class="headerlink" title="5.1 两个定理的联系"></a>5.1 两个定理的联系</h3><p>费马小定理和Lucas定理在竞赛中经常结合使用：</p><ul><li>费马小定理用于计算模质数情况下的乘法逆元</li><li>Lucas定理利用这些逆元计算大组合数取模</li></ul><h3 id="5-2-实际应用技巧"><a href="#5-2-实际应用技巧" class="headerlink" title="5.2 实际应用技巧"></a>5.2 实际应用技巧</h3><ol><li><p><strong>预处理优化</strong>：</p><ul><li>对于多次查询的情况，可以预处理阶乘及其逆元</li><li>时间复杂度从O(n)降至O(1)查询</li></ul></li><li><p><strong>模数分解</strong>：</p><ul><li>当模数不是质数时，可以分解为质数幂的乘积</li><li>使用中国剩余定理合并结果</li></ul></li><li><p><strong>数值溢出处理</strong>：</p><ul><li>使用long类型或BigInteger处理大数</li><li>中间计算过程及时取模</li></ul></li></ol><h3 id="5-3-相关拓展"><a href="#5-3-相关拓展" class="headerlink" title="5.3 相关拓展"></a>5.3 相关拓展</h3><ol><li><p><strong>Wilson定理</strong>：对于质数p，有(p-1)! ≡ -1 (mod p)</p></li><li><p><strong>欧拉定理</strong>：费马小定理的推广，若gcd(a,n)&#x3D;1，则a^φ(n) ≡ 1 (mod n)，其中φ(n)为欧拉函数</p></li><li><p><strong>扩展Lucas定理</strong>：处理模数为质数幂或合数的情况</p></li></ol><p>在算法竞赛中，熟练掌握这些数论工具可以有效解决各种组合数学和模运算问题，是提高竞赛水平的重要一环。</p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop 启动失败解决方案(Docker failed to initialize)</title>
      <link href="/2025/03/16/docker-desktop-%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-docker-failed-to-initialize/"/>
      <url>/2025/03/16/docker-desktop-%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-docker-failed-to-initialize/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将详细介绍Docker Desktop启动失败的常见原因和解决方案，帮助开发者快速恢复Docker环境。</p></blockquote><h2 id="常见启动失败原因"><a href="#常见启动失败原因" class="headerlink" title="常见启动失败原因"></a>常见启动失败原因</h2><h3 id="1-WSL相关问题"><a href="#1-WSL相关问题" class="headerlink" title="1. WSL相关问题"></a>1. WSL相关问题</h3><ul><li>WSL未正确安装或版本不兼容</li><li>WSL2后端未启用</li><li>Linux内核组件缺失</li></ul><h3 id="2-系统配置问题"><a href="#2-系统配置问题" class="headerlink" title="2. 系统配置问题"></a>2. 系统配置问题</h3><ul><li>虚拟化功能未开启</li><li>Windows功能组件缺失</li><li>系统资源不足</li></ul><h3 id="3-Docker服务问题"><a href="#3-Docker服务问题" class="headerlink" title="3. Docker服务问题"></a>3. Docker服务问题</h3><ul><li>Docker服务未正常启动</li><li>配置文件损坏</li><li>端口冲突</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-WSL问题解决"><a href="#1-WSL问题解决" class="headerlink" title="1. WSL问题解决"></a>1. WSL问题解决</h3><ol><li>检查WSL安装状态：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>更新WSL：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>确保WSL2是默认版本：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-系统配置检查"><a href="#2-系统配置检查" class="headerlink" title="2. 系统配置检查"></a>2. 系统配置检查</h3><ol><li><p>检查虚拟化：</p><ul><li>打开任务管理器</li><li>切换到”性能”标签</li><li>查看”虚拟化”是否已启用</li></ul></li><li><p>启用必要的Windows功能：</p><ul><li>Hyper-V</li><li>虚拟机平台</li><li>Windows子系统for Linux</li></ul></li><li><p>系统资源优化：</p><ul><li>关闭不必要的后台程序</li><li>检查内存使用情况</li><li>确保有足够的磁盘空间</li></ul></li></ol><h3 id="3-Docker服务修复"><a href="#3-Docker服务修复" class="headerlink" title="3. Docker服务修复"></a>3. Docker服务修复</h3><ol><li><p>重置Docker Desktop：</p><ul><li>打开Docker Desktop</li><li>点击设置图标</li><li>选择”Troubleshoot”</li><li>点击”Reset to factory defaults”</li></ul></li><li><p>修复配置文件：</p><ul><li>备份现有配置</li><li>删除配置文件</li><li>重新安装Docker Desktop</li></ul></li><li><p>检查端口占用：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">netstat <span class="token operator">-</span>ano <span class="token punctuation">|</span> findstr 2375netstat <span class="token operator">-</span>ano <span class="token punctuation">|</span> findstr 2376<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h2><h3 id="1-定期维护"><a href="#1-定期维护" class="headerlink" title="1. 定期维护"></a>1. 定期维护</h3><ul><li>及时更新Docker Desktop</li><li>定期清理未使用的镜像和容器</li><li>监控系统资源使用情况</li></ul><h3 id="2-配置优化"><a href="#2-配置优化" class="headerlink" title="2. 配置优化"></a>2. 配置优化</h3><ul><li>合理分配资源限制</li><li>使用稳定版本的Docker</li><li>保持WSL组件更新</li></ul><h3 id="3-备份策略"><a href="#3-备份策略" class="headerlink" title="3. 备份策略"></a>3. 备份策略</h3><ul><li>定期备份重要容器数据</li><li>导出关键镜像配置</li><li>记录自定义设置</li></ul><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><h3 id="1-资源配置"><a href="#1-资源配置" class="headerlink" title="1. 资源配置"></a>1. 资源配置</h3><ul><li>适当增加内存分配</li><li>调整CPU使用限制</li><li>配置合适的磁盘空间</li></ul><h3 id="2-网络优化"><a href="#2-网络优化" class="headerlink" title="2. 网络优化"></a>2. 网络优化</h3><ul><li>配置国内镜像源</li><li>优化DNS设置</li><li>检查防火墙规则</li></ul><h3 id="3-开发环境优化"><a href="#3-开发环境优化" class="headerlink" title="3. 开发环境优化"></a>3. 开发环境优化</h3><ul><li>使用Docker Compose管理服务</li><li>实施多阶段构建</li><li>优化Dockerfile</li></ul><h2 id="常见错误代码解析"><a href="#常见错误代码解析" class="headerlink" title="常见错误代码解析"></a>常见错误代码解析</h2><h3 id="1-Error-0x80070002"><a href="#1-Error-0x80070002" class="headerlink" title="1. Error 0x80070002"></a>1. Error 0x80070002</h3><ul><li>原因：找不到指定文件</li><li>解决：重新安装Docker Desktop</li></ul><h3 id="2-Error-0x80004005"><a href="#2-Error-0x80004005" class="headerlink" title="2. Error 0x80004005"></a>2. Error 0x80004005</h3><ul><li>原因：访问被拒绝</li><li>解决：以管理员身份运行</li></ul><h3 id="3-Error-0x80073D54"><a href="#3-Error-0x80073D54" class="headerlink" title="3. Error 0x80073D54"></a>3. Error 0x80073D54</h3><ul><li>原因：Windows功能未启用</li><li>解决：开启相关Windows功能</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文详细介绍了Docker Desktop启动失败的主要原因和解决方案。通过系统的问题排查和优化配置，大多数启动问题都能得到解决。建议用户在使用中注意预防措施，定期维护系统环境，这样可以大大减少启动失败的概率。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java队列(Queue)用法详解</title>
      <link href="/2025/03/14/Java%E9%98%9F%E5%88%97Queue%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/14/Java%E9%98%9F%E5%88%97Queue%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java队列-Queue-用法详解"><a href="#Java队列-Queue-用法详解" class="headerlink" title="Java队列(Queue)用法详解"></a>Java队列(Queue)用法详解</h1><p>队列(Queue)是一种常用的线性数据结构，遵循先进先出(FIFO, First-In-First-Out)的原则，即最先添加的元素最先被移除。本文将详细介绍Java中队列的实现、常用方法以及在ACM算法竞赛中的应用场景。</p><h2 id="一、队列的基本概念"><a href="#一、队列的基本概念" class="headerlink" title="一、队列的基本概念"></a>一、队列的基本概念</h2><h3 id="1-1-队列的定义"><a href="#1-1-队列的定义" class="headerlink" title="1.1 队列的定义"></a>1.1 队列的定义</h3><p>队列是一种特殊的线性表，它只允许在表的前端（队头）进行删除操作，而在表的后端（队尾）进行插入操作。</p><h3 id="1-2-队列的特点"><a href="#1-2-队列的特点" class="headerlink" title="1.2 队列的特点"></a>1.2 队列的特点</h3><ul><li><strong>先进先出(FIFO)</strong>: 最先进入队列的元素最先被移除</li><li><strong>单向操作</strong>: 只能从队尾插入，从队头删除</li><li><strong>线性结构</strong>: 元素之间是一对一的关系</li></ul><h3 id="1-3-队列的基本操作"><a href="#1-3-队列的基本操作" class="headerlink" title="1.3 队列的基本操作"></a>1.3 队列的基本操作</h3><ul><li><strong>入队(enqueue)</strong>: 将元素添加到队列的末尾</li><li><strong>出队(dequeue)</strong>: 从队列的开头移除元素</li><li><strong>查看队首元素(peek)</strong>: 查看队列开头的元素但不移除</li><li><strong>判断队列是否为空(isEmpty)</strong>: 检查队列中是否有元素</li></ul><h3 id="1-4-队列的结构示意图"><a href="#1-4-队列的结构示意图" class="headerlink" title="1.4 队列的结构示意图"></a>1.4 队列的结构示意图</h3><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">       入队                                出队        ↓                                  ↑+-----+-----+-----+-----+-----+-----+|  6  |  5  |  4  |  3  |  2  |  1  |  -&gt; 队列+-----+-----+-----+-----+-----+-----+ 队尾                              队头<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Java中的队列接口与实现"><a href="#二、Java中的队列接口与实现" class="headerlink" title="二、Java中的队列接口与实现"></a>二、Java中的队列接口与实现</h2><h3 id="2-1-Queue接口"><a href="#2-1-Queue接口" class="headerlink" title="2.1 Queue接口"></a>2.1 Queue接口</h3><p>Java中的<code>Queue</code>是一个接口，位于<code>java.util</code>包中，它扩展了<code>Collection</code>接口。<code>Queue</code>接口定义了队列的基本操作。</p><h4 id="2-1-1-Queue接口的主要方法"><a href="#2-1-1-Queue接口的主要方法" class="headerlink" title="2.1.1 Queue接口的主要方法"></a>2.1.1 Queue接口的主要方法</h4><table><thead><tr><th>方法</th><th>描述</th><th>队列为空时的行为</th></tr></thead><tbody><tr><td><code>boolean add(E e)</code></td><td>将元素添加到队列尾部</td><td>抛出异常</td></tr><tr><td><code>boolean offer(E e)</code></td><td>将元素添加到队列尾部</td><td>返回false</td></tr><tr><td><code>E remove()</code></td><td>移除并返回队列头部的元素</td><td>抛出异常</td></tr><tr><td><code>E poll()</code></td><td>移除并返回队列头部的元素</td><td>返回null</td></tr><tr><td><code>E element()</code></td><td>返回队列头部的元素但不移除</td><td>抛出异常</td></tr><tr><td><code>E peek()</code></td><td>返回队列头部的元素但不移除</td><td>返回null</td></tr></tbody></table><h3 id="2-2-常用的Queue实现类"><a href="#2-2-常用的Queue实现类" class="headerlink" title="2.2 常用的Queue实现类"></a>2.2 常用的Queue实现类</h3><h4 id="2-2-1-LinkedList"><a href="#2-2-1-LinkedList" class="headerlink" title="2.2.1 LinkedList"></a>2.2.1 LinkedList</h4><p><code>LinkedList</code>是<code>Queue</code>接口的一个实现，它基于链表实现，适合频繁的插入和删除操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListQueueExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建队列</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查看队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首元素: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除的元素: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次查看队列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除后的队列: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 判断队列是否为空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列是否为空: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取队列大小</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列大小: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">队列: [Java, Python, C++]队首元素: Java移除的元素: Java移除后的队列: [Python, C++]队列是否为空: false队列大小: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-ArrayDeque"><a href="#2-2-2-ArrayDeque" class="headerlink" title="2.2.2 ArrayDeque"></a>2.2.2 ArrayDeque</h4><p><code>ArrayDeque</code>是基于可调整大小的数组实现的双端队列，它比<code>LinkedList</code>有更好的性能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayDeque</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDequeExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建队列</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查看队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首元素: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除的元素: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次查看队列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除后的队列: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">队列: [10, 20, 30]队首元素: 10移除的元素: 10移除后的队列: [20, 30]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-PriorityQueue"><a href="#2-2-3-PriorityQueue" class="headerlink" title="2.2.3 PriorityQueue"></a>2.2.3 PriorityQueue</h4><p><code>PriorityQueue</code>是一个基于优先级堆的优先队列实现，元素按照自然顺序或者自定义的<code>Comparator</code>进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueueExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建优先队列（小顶堆）</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素</span>        minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优先队列: "</span> <span class="token operator">+</span> minHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查看队首元素（最小值）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首元素: "</span> <span class="token operator">+</span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除的元素: "</span> <span class="token operator">+</span> minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次查看队列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除后的队列: "</span> <span class="token operator">+</span> minHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建大顶堆</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素</span>        maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n大顶堆: "</span> <span class="token operator">+</span> maxHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查看队首元素（最大值）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首元素: "</span> <span class="token operator">+</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除队首元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除的元素: "</span> <span class="token operator">+</span> maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次查看队列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除后的队列: "</span> <span class="token operator">+</span> maxHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">优先队列: [10, 30, 20]队首元素: 10移除的元素: 10移除后的队列: [20, 30]大顶堆: [30, 10, 20]队首元素: 30移除的元素: 30移除后的队列: [20, 10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Deque接口（双端队列）"><a href="#2-3-Deque接口（双端队列）" class="headerlink" title="2.3 Deque接口（双端队列）"></a>2.3 Deque接口（双端队列）</h3><p><code>Deque</code>接口扩展了<code>Queue</code>接口，支持在队列的两端进行插入和删除操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayDeque</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Deque</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DequeExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建双端队列</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 在队尾添加元素</span>        deque<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deque<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 在队首添加元素</span>        deque<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双端队列: "</span> <span class="token operator">+</span> deque<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查看队首和队尾元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队首元素: "</span> <span class="token operator">+</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队尾元素: "</span> <span class="token operator">+</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除队首和队尾元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除队首元素: "</span> <span class="token operator">+</span> deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除队尾元素: "</span> <span class="token operator">+</span> deque<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次查看队列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除后的队列: "</span> <span class="token operator">+</span> deque<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">双端队列: [C++, Java, Python]队首元素: C++队尾元素: Python移除队首元素: C++移除队尾元素: Python移除后的队列: [Java]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、队列在ACM算法中的应用"><a href="#三、队列在ACM算法中的应用" class="headerlink" title="三、队列在ACM算法中的应用"></a>三、队列在ACM算法中的应用</h2><h3 id="3-1-广度优先搜索-BFS"><a href="#3-1-广度优先搜索-BFS" class="headerlink" title="3.1 广度优先搜索(BFS)"></a>3.1 广度优先搜索(BFS)</h3><p>BFS是图论中的一种搜索算法，它从图的某一节点开始，先访问该节点的所有邻接节点，然后再按照同样的方法访问这些邻接节点的邻接节点。队列是实现BFS的核心数据结构。</p><h4 id="3-1-1-迷宫问题"><a href="#3-1-1-迷宫问题" class="headerlink" title="3.1.1 迷宫问题"></a>3.1.1 迷宫问题</h4><p>以下是一个使用BFS解决迷宫最短路径问题的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MazeBFS</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 四个方向：上、右、下、左</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DIRECTIONS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maze<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> maze<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment">// 标记已访问的位置</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 创建队列，存储位置和距离</span>        <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;行, 列, 距离&#125;</span>        visited<span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> row <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> col <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> distance <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果到达终点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">==</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> distance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 尝试四个方向</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">:</span> <span class="token constant">DIRECTIONS</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> newRow <span class="token operator">=</span> row <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> newCol <span class="token operator">=</span> col <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token comment">// 检查新位置是否有效</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newRow <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newRow <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> newCol <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newCol <span class="token operator">&lt;</span> cols                     <span class="token operator">&amp;&amp;</span> maze<span class="token punctuation">[</span>newRow<span class="token punctuation">]</span><span class="token punctuation">[</span>newCol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>newRow<span class="token punctuation">]</span><span class="token punctuation">[</span>newCol<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visited<span class="token punctuation">[</span>newRow<span class="token punctuation">]</span><span class="token punctuation">[</span>newCol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>newRow<span class="token punctuation">,</span> newCol<span class="token punctuation">,</span> distance <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无法到达终点</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maze <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token char">'#'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> shortestDistance <span class="token operator">=</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从起点到终点的最短距离: "</span> <span class="token operator">+</span> shortestDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-优先队列在贪心算法中的应用"><a href="#3-2-优先队列在贪心算法中的应用" class="headerlink" title="3.2 优先队列在贪心算法中的应用"></a>3.2 优先队列在贪心算法中的应用</h3><p>优先队列常用于贪心算法中，可以高效地获取当前最优选择。</p><h4 id="3-2-1-Dijkstra算法"><a href="#3-2-1-Dijkstra算法" class="headerlink" title="3.2.1 Dijkstra算法"></a>3.2.1 Dijkstra算法</h4><p>Dijkstra算法是一种求解单源最短路径的经典算法，它使用优先队列来选择当前距离最小的节点进行扩展。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DijkstraAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span> weight<span class="token punctuation">;</span>                <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> vertex<span class="token punctuation">,</span> distance<span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vertex <span class="token operator">=</span> vertex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 使用优先队列，按照距离排序</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">.</span>distance <span class="token operator">-</span> b<span class="token punctuation">.</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> current <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> current<span class="token punctuation">.</span>vertex<span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> current<span class="token punctuation">.</span>distance<span class="token punctuation">;</span>                        <span class="token comment">// 如果当前距离大于已知最短距离，跳过</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">></span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token comment">// 遍历所有邻接节点</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span> edge <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> weight <span class="token operator">=</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                                <span class="token comment">// 如果找到更短的路径</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>                    pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 节点数量</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">></span><span class="token punctuation">></span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加边</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distances <span class="token operator">=</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从节点 "</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">" 到各节点的最短距离："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> distances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-贪心算法解决会议室安排问题"><a href="#3-2-2-贪心算法解决会议室安排问题" class="headerlink" title="3.2.2 贪心算法解决会议室安排问题"></a>3.2.2 贪心算法解决会议室安排问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MeetingRooms</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Meeting</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>                <span class="token class-name">Meeting</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minMeetingRooms</span><span class="token punctuation">(</span><span class="token class-name">Meeting</span><span class="token punctuation">[</span><span class="token punctuation">]</span> meetings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>meetings <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> meetings<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 按照开始时间排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>meetings<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">.</span>start <span class="token operator">-</span> b<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用优先队列（小顶堆）跟踪当前会议室的结束时间</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> rooms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Meeting</span> meeting <span class="token operator">:</span> meetings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果当前最早结束的会议室已经结束，可以重用</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rooms<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rooms<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> meeting<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                rooms<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 分配一个会议室（添加结束时间到队列）</span>            rooms<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>meeting<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 队列大小即为所需的会议室数量</span>        <span class="token keyword">return</span> rooms<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Meeting</span><span class="token punctuation">[</span><span class="token punctuation">]</span> meetings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Meeting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Meeting</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Meeting</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> rooms <span class="token operator">=</span> <span class="token function">minMeetingRooms</span><span class="token punctuation">(</span>meetings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要的会议室数量: "</span> <span class="token operator">+</span> rooms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-双端队列在滑动窗口问题中的应用"><a href="#3-3-双端队列在滑动窗口问题中的应用" class="headerlink" title="3.3 双端队列在滑动窗口问题中的应用"></a>3.3 双端队列在滑动窗口问题中的应用</h3><p>双端队列（Deque）在处理滑动窗口问题时非常有用，可以在O(1)时间内获取窗口中的最大值或最小值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowMaximum</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ri <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 使用双端队列存储元素的索引</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 移除队列中所有小于当前元素的值（它们不可能是最大值）</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                deque<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 添加当前元素索引到队列</span>            deque<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 移除超出窗口范围的元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 当窗口大小达到k时，记录最大值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>ri<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"滑动窗口最大值: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、队列的性能比较与选择"><a href="#四、队列的性能比较与选择" class="headerlink" title="四、队列的性能比较与选择"></a>四、队列的性能比较与选择</h2><h3 id="4-1-不同队列实现的性能特点"><a href="#4-1-不同队列实现的性能特点" class="headerlink" title="4.1 不同队列实现的性能特点"></a>4.1 不同队列实现的性能特点</h3><table><thead><tr><th>实现类</th><th>底层数据结构</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><code>LinkedList</code></td><td>双向链表</td><td>插入和删除操作O(1)，但需要额外的内存开销</td><td>频繁插入删除，不关心随机访问性能</td></tr><tr><td><code>ArrayDeque</code></td><td>循环数组</td><td>比LinkedList更高效，没有链表的额外开销</td><td>一般用途的队列，双端队列操作</td></tr><tr><td><code>PriorityQueue</code></td><td>二叉堆</td><td>插入和删除操作O(log n)，但能保证取出的是优先级最高的元素</td><td>需要按优先级处理元素的场景</td></tr></tbody></table><h3 id="4-2-队列选择建议"><a href="#4-2-队列选择建议" class="headerlink" title="4.2 队列选择建议"></a>4.2 队列选择建议</h3><ol><li><strong>一般用途</strong>：使用<code>ArrayDeque</code>，它比<code>LinkedList</code>有更好的性能，除非需要频繁在队列中间进行操作。</li><li><strong>需要优先级</strong>：使用<code>PriorityQueue</code>，它能自动按照优先级排序。</li><li><strong>双端操作</strong>：使用<code>ArrayDeque</code>作为<code>Deque</code>的实现，它在两端的操作都很高效。</li><li><strong>线程安全</strong>：考虑使用<code>ConcurrentLinkedQueue</code>或<code>BlockingQueue</code>的实现类，如<code>LinkedBlockingQueue</code>。</li></ol><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>队列是一种重要的数据结构，在Java中有多种实现方式，每种实现都有其特点和适用场景。在ACM算法竞赛中，队列常用于BFS、贪心算法和滑动窗口等问题的解决。掌握队列的使用方法和选择合适的队列实现，对提高算法效率和代码质量有很大帮助。</p><p>在实际应用中，应根据具体需求选择合适的队列实现，并注意队列操作的时间复杂度和空间复杂度，以优化程序性能。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop Redis连接指南</title>
      <link href="/2025/03/14/Docker-Desktop-Redis%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/14/Docker-Desktop-Redis%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将详细介绍如何连接Docker Desktop中运行的Redis服务，包括命令行连接、代码示例和常见问题解决方案。</p></blockquote><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>在开始连接之前，请确保：</p><ol><li>Docker Desktop已正确安装并运行</li><li>Redis容器已成功启动（参考<a href="/Docker-Desktop%E9%85%8D%E7%BD%AE-Redis/">Docker Desktop配置Redis</a>）</li><li>已正确配置Redis的端口映射（默认6379）</li></ol><h2 id="命令行连接"><a href="#命令行连接" class="headerlink" title="命令行连接"></a>命令行连接</h2><h3 id="使用redis-cli"><a href="#使用redis-cli" class="headerlink" title="使用redis-cli"></a>使用redis-cli</h3><ol><li>直接使用Docker命令连接：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>通过本地端口连接：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>如果设置了密码，添加认证：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> your_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h3><p>连接成功后，可以执行以下操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试连接</span><span class="token function">ping</span><span class="token comment"># 设置键值对</span><span class="token builtin class-name">set</span> mykey <span class="token string">"Hello Redis"</span><span class="token comment"># 获取值</span>get mykey<span class="token comment"># 查看所有键</span>keys *<span class="token comment"># 删除键</span>del mykey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java代码示例"><a href="#Java代码示例" class="headerlink" title="Java代码示例"></a>Java代码示例</h2><h3 id="使用Jedis"><a href="#使用Jedis" class="headerlink" title="使用Jedis"></a>使用Jedis</h3><ol><li>添加Maven依赖：</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>基本连接示例：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建Jedis对象</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果设置了密码</span>        <span class="token comment">// jedis.auth("your_password");</span>                <span class="token comment">// 测试连接</span>        <span class="token class-name">String</span> pong <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> pong<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置键值对</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"Hello from Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取值</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Spring-Boot"><a href="#使用Spring-Boot" class="headerlink" title="使用Spring Boot"></a>使用Spring Boot</h3><ol><li>添加依赖：</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置Redis连接：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># application.yml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token comment"># password: your_password  # 如果设置了密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用示例：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接故障排查"><a href="#连接故障排查" class="headerlink" title="连接故障排查"></a>连接故障排查</h2><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>连接被拒绝</p><ul><li>检查Redis容器状态：<code>docker ps | grep redis</code></li><li>验证端口映射：<code>docker port my-redis</code></li><li>确认防火墙设置</li></ul></li><li><p>认证失败</p><ul><li>确认密码是否正确</li><li>检查Redis配置文件中的requirepass设置</li><li>验证连接字符串格式</li></ul></li><li><p>性能问题</p><ul><li>检查网络延迟：<code>redis-cli --latency</code></li><li>监控内存使用：<code>info memory</code></li><li>查看客户端连接数：<code>info clients</code></li></ul></li></ol><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><ol><li>查看Redis日志：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs my-redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>监控Redis操作：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli monitor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>检查网络连接：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> findstr <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="连接池配置"><a href="#连接池配置" class="headerlink" title="连接池配置"></a>连接池配置</h3><ol><li>Jedis连接池：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JedisPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用连接池中的连接</span>    jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Spring Boot连接池配置：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><ol><li>设置强密码</li><li>限制允许的IP地址</li><li>定期备份数据</li><li>监控异常连接</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了多种连接Docker中Redis服务的方法，包括命令行工具和Java代码示例。通过合理配置和使用连接池，可以确保Redis连接的稳定性和性能。在实际应用中，要注意安全性配置和性能优化。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis官方文档</a></li><li><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/">Spring Data Redis文档</a></li><li><a href="https://github.com/redis/jedis">Jedis GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop RocketMQ Topic创建指南</title>
      <link href="/2025/03/14/Docker-Desktop-RocketMQ-Topic%E5%88%9B%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/14/Docker-Desktop-RocketMQ-Topic%E5%88%9B%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将详细介绍如何在Docker Desktop环境下的RocketMQ中创建和管理Topic，包括命令行和控制台两种方式。</p></blockquote><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>在开始之前，请确保：</p><ol><li>Docker Desktop已正确安装并运行</li><li>RocketMQ服务已在Docker中部署并正常运行</li><li>已安装RocketMQ控制台（可选）</li></ol><h2 id="使用命令行创建Topic"><a href="#使用命令行创建Topic" class="headerlink" title="使用命令行创建Topic"></a>使用命令行创建Topic</h2><h3 id="1-进入RocketMQ容器"><a href="#1-进入RocketMQ容器" class="headerlink" title="1. 进入RocketMQ容器"></a>1. 进入RocketMQ容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看运行中的容器</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 进入broker容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rmqbroker <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建Topic"><a href="#2-创建Topic" class="headerlink" title="2. 创建Topic"></a>2. 创建Topic</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本语法</span>mqadmin updateTopic <span class="token parameter variable">-n</span> localhost:9876 <span class="token parameter variable">-t</span> 主题名称 <span class="token parameter variable">-c</span> DefaultCluster<span class="token comment"># 示例：创建一个名为TestTopic的主题</span>mqadmin updateTopic <span class="token parameter variable">-n</span> localhost:9876 <span class="token parameter variable">-t</span> TestTopic <span class="token parameter variable">-c</span> DefaultCluster<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mqadmin updateTopic -n localhost:9876 -t user_login_send_msg -c DefaultCluster</p><h3 id="3-主要参数说明"><a href="#3-主要参数说明" class="headerlink" title="3. 主要参数说明"></a>3. 主要参数说明</h3><ul><li><code>-n</code>：NameServer地址</li><li><code>-t</code>：Topic名称</li><li><code>-c</code>：集群名称</li><li><code>-r</code>：读队列数（可选，默认为4）</li><li><code>-w</code>：写队列数（可选，默认为4）</li><li><code>-p</code>：权限（可选，2&#x3D;读写，4&#x3D;只读，6&#x3D;只写）</li></ul><h2 id="使用控制台创建Topic"><a href="#使用控制台创建Topic" class="headerlink" title="使用控制台创建Topic"></a>使用控制台创建Topic</h2><h3 id="1-访问RocketMQ控制台"><a href="#1-访问RocketMQ控制台" class="headerlink" title="1. 访问RocketMQ控制台"></a>1. 访问RocketMQ控制台</h3><ul><li>打开浏览器访问：<code>http://localhost:8080</code></li><li>默认用户名和密码：admin&#x2F;admin</li></ul><h3 id="2-创建Topic步骤"><a href="#2-创建Topic步骤" class="headerlink" title="2. 创建Topic步骤"></a>2. 创建Topic步骤</h3><ol><li>点击左侧菜单中的「Topic」</li><li>点击「添加Topic」按钮</li><li>填写Topic信息：<ul><li>Topic名称（必填）</li><li>集群名称（必选）</li><li>读写队列数（可选）</li><li>权限设置（可选）</li></ul></li><li>点击「确认」完成创建</li></ol><h2 id="Topic命名规范"><a href="#Topic命名规范" class="headerlink" title="Topic命名规范"></a>Topic命名规范</h2><h3 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1. 命名规则"></a>1. 命名规则</h3><ul><li>使用英文字母、数字、下划线和中划线</li><li>长度建议不超过64个字符</li><li>建议使用有意义的前缀</li></ul><h3 id="2-命名示例"><a href="#2-命名示例" class="headerlink" title="2. 命名示例"></a>2. 命名示例</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 推荐的命名格式&#123;业务&#125;.&#123;模块&#125;.&#123;功能&#125;&#x2F;&#x2F; 示例order.payment.notificationuser.register.eventlog.error.collect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-队列数量设置"><a href="#1-队列数量设置" class="headerlink" title="1. 队列数量设置"></a>1. 队列数量设置</h3><ul><li>读写队列数建议设置相同</li><li>单个Topic队列数建议4-8个</li><li>根据消息量和消费者数量适当调整</li></ul><h3 id="2-容量规划"><a href="#2-容量规划" class="headerlink" title="2. 容量规划"></a>2. 容量规划</h3><ul><li>评估单个Topic的消息量</li><li>考虑消息存储时间</li><li>预留足够的磁盘空间</li></ul><h3 id="3-权限控制"><a href="#3-权限控制" class="headerlink" title="3. 权限控制"></a>3. 权限控制</h3><ul><li>生产环境建议开启权限控制</li><li>按照最小权限原则设置</li><li>定期审查Topic权限</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-Topic创建失败"><a href="#1-Topic创建失败" class="headerlink" title="1. Topic创建失败"></a>1. Topic创建失败</h3><p>可能原因：</p><ul><li>NameServer连接失败</li><li>权限不足</li><li>Topic名称已存在</li></ul><p>解决方案：</p><ol><li>检查NameServer连接</li><li>确认操作权限</li><li>使用新的Topic名称</li></ol><h3 id="2-队列数调整"><a href="#2-队列数调整" class="headerlink" title="2. 队列数调整"></a>2. 队列数调整</h3><ul><li>Topic创建后可以增加队列数</li><li>不建议减少队列数</li><li>调整时注意评估影响</li></ul><h2 id="监控与维护"><a href="#监控与维护" class="headerlink" title="监控与维护"></a>监控与维护</h2><h3 id="1-Topic状态监控"><a href="#1-Topic状态监控" class="headerlink" title="1. Topic状态监控"></a>1. Topic状态监控</h3><ul><li>监控消息堆积情况</li><li>关注消息延迟</li><li>检查消息成功率</li></ul><h3 id="2-定期维护"><a href="#2-定期维护" class="headerlink" title="2. 定期维护"></a>2. 定期维护</h3><ul><li>清理无用Topic</li><li>优化队列配置</li><li>更新权限设置</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理的Topic创建和管理对于消息中间件的稳定运行至关重要。通过遵循最佳实践和规范，可以提高系统的可用性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://rocketmq.apache.org/docs/quick-start/">RocketMQ官方文档</a></li><li><a href="https://rocketmq.apache.org/docs/best-practice-broker/">RocketMQ最佳实践</a></li><li><a href="https://docs.docker.com/desktop/">Docker Desktop文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop 连接Idea</title>
      <link href="/2025/03/14/Docker-Desktop-%E8%BF%9E%E6%8E%A5Idea/"/>
      <url>/2025/03/14/Docker-Desktop-%E8%BF%9E%E6%8E%A5Idea/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将详细介绍如何在IntelliJ IDEA中配置和使用Docker Desktop，帮助开发者更高效地进行容器化开发。</p></blockquote><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>在开始配置之前，请确保：</p><ol><li>已安装并正确运行Docker Desktop</li><li>已安装IntelliJ IDEA（Ultimate版本）</li><li>Docker Desktop服务正常运行</li></ol><h2 id="IDEA-Docker插件安装"><a href="#IDEA-Docker插件安装" class="headerlink" title="IDEA Docker插件安装"></a>IDEA Docker插件安装</h2><ol><li>打开IDEA，进入<code>Settings/Preferences</code> → <code>Plugins</code></li><li>在Marketplace中搜索”Docker”，找到官方Docker插件</li><li>点击Install安装插件</li><li>重启IDEA使插件生效</li></ol><h2 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h2><h3 id="Windows系统配置"><a href="#Windows系统配置" class="headerlink" title="Windows系统配置"></a>Windows系统配置</h3><ol><li>打开IDEA，进入<code>Settings/Preferences</code> → <code>Build, Execution, Deployment</code> → <code>Docker</code></li><li>点击<code>+</code>号添加新的Docker配置</li><li>选择<code>Docker for Windows</code></li><li>TCP连接设置（默认）：<ul><li>Engine API URL: <code>tcp://localhost:2375</code></li><li>或使用命名管道连接：<code>npipe://./pipe/docker_engine</code></li></ul></li></ol><h3 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h3><ol><li>配置完成后，点击<code>Test Connection</code>测试连接</li><li>如果显示”Connection successful”，说明配置成功</li></ol><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="1-Docker视图"><a href="#1-Docker视图" class="headerlink" title="1. Docker视图"></a>1. Docker视图</h3><ul><li>打开<code>View</code> → <code>Tool Windows</code> → <code>Docker</code></li><li>可以查看本地镜像、容器、网络等资源</li><li>支持直接在IDE中管理Docker资源</li></ul><h3 id="2-Dockerfile支持"><a href="#2-Dockerfile支持" class="headerlink" title="2. Dockerfile支持"></a>2. Dockerfile支持</h3><ul><li>语法高亮和自动补全</li><li>错误检查和提示</li><li>快速构建镜像</li></ul><h3 id="3-Docker-Compose集成"><a href="#3-Docker-Compose集成" class="headerlink" title="3. Docker Compose集成"></a>3. Docker Compose集成</h3><ul><li>支持docker-compose.yml文件编辑</li><li>可视化管理多容器应用</li><li>一键启动&#x2F;停止所有服务</li></ul><h3 id="4-运行配置"><a href="#4-运行配置" class="headerlink" title="4. 运行配置"></a>4. 运行配置</h3><ol><li><p>创建Docker Run Configuration：</p><ul><li>点击<code>Run</code> → <code>Edit Configurations</code></li><li>添加Docker配置</li><li>选择Dockerfile或docker-compose.yml</li></ul></li><li><p>调试容器：</p><ul><li>支持远程调试</li><li>可以直接查看容器日志</li><li>方便的端口映射管理</li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-性能优化"><a href="#1-性能优化" class="headerlink" title="1. 性能优化"></a>1. 性能优化</h3><ul><li>合理设置Docker资源限制</li><li>使用.dockerignore排除不必要文件</li><li>优化镜像层级结构</li></ul><h3 id="2-开发技巧"><a href="#2-开发技巧" class="headerlink" title="2. 开发技巧"></a>2. 开发技巧</h3><ul><li>使用Docker Volume持久化数据</li><li>利用Docker Compose管理开发环境</li><li>配置热重载提高开发效率</li></ul><h3 id="3-常见问题解决"><a href="#3-常见问题解决" class="headerlink" title="3. 常见问题解决"></a>3. 常见问题解决</h3><ol><li><p>连接超时：</p><ul><li>检查Docker服务是否运行</li><li>验证防火墙设置</li><li>确认Docker Desktop权限</li></ul></li><li><p>构建失败：</p><ul><li>检查Dockerfile语法</li><li>确保网络连接正常</li><li>查看构建日志定位问题</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>IDE集成Docker不仅简化了容器化开发流程，还提供了丰富的可视化工具和调试功能。掌握IDEA的Docker集成功能，可以显著提升开发效率和项目质量。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.docker.com/">Docker官方文档</a></li><li><a href="https://www.jetbrains.com/help/idea/docker.html">IntelliJ IDEA Docker插件文档</a></li><li><a href="https://docs.docker.com/desktop/">Docker Desktop文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop的Redis的搭建和使用</title>
      <link href="/2025/03/14/Docker-Desktop%E9%85%8D%E7%BD%AE-Redis/"/>
      <url>/2025/03/14/Docker-Desktop%E9%85%8D%E7%BD%AE-Redis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将详细介绍如何在Docker Desktop环境下安装、配置和使用Redis，包括基本操作和进阶配置。</p></blockquote><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>Windows 10&#x2F;11操作系统</li><li>已安装并正确配置Docker Desktop</li><li>确保Docker服务正在运行</li></ul><h2 id="Redis镜像获取"><a href="#Redis镜像获取" class="headerlink" title="Redis镜像获取"></a>Redis镜像获取</h2><h3 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建Redis容器"><a href="#创建Redis容器" class="headerlink" title="创建Redis容器"></a>创建Redis容器</h2><h3 id="基本启动命令"><a href="#基本启动命令" class="headerlink" title="基本启动命令"></a>基本启动命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> my-redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="带配置启动命令"><a href="#带配置启动命令" class="headerlink" title="带配置启动命令"></a>带配置启动命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> my-redis <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /d/Redis/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /d/Redis/data:/data <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker run --name my-redis -p 6379:6379 -v &#x2F;d&#x2F;Redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;d&#x2F;Redis&#x2F;data:&#x2F;data -d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis配置说明"><a href="#Redis配置说明" class="headerlink" title="Redis配置说明"></a>Redis配置说明</h2><h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><p>在redis.conf中添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># RDB持久化配置save 900 1      # 900秒内至少1个key发生变化，则触发保存save 300 10     # 300秒内至少10个key发生变化，则触发保存save 60 10000   # 60秒内至少10000个key发生变化，则触发保存# AOF持久化配置appendonly yesappendfsync everysec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">requirepass your_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="远程访问配置"><a href="#远程访问配置" class="headerlink" title="远程访问配置"></a>远程访问配置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">bind 0.0.0.0protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h2><h3 id="连接Redis容器"><a href="#连接Redis容器" class="headerlink" title="连接Redis容器"></a>连接Redis容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本数据操作"><a href="#基本数据操作" class="headerlink" title="基本数据操作"></a>基本数据操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置键值对</span>SET key value<span class="token comment"># 获取值</span>GET key<span class="token comment"># 删除键</span>DEL key<span class="token comment"># 查看所有键</span>KEYS *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol><li>合理设置内存大小</li></ol><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory 2gbmaxmemory-policy allkeys-lru<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>优化持久化策略</li></ol><ul><li>根据实际需求选择RDB或AOF</li><li>调整持久化触发频率</li></ul><ol start="3"><li>网络优化</li></ol><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">tcp-keepalive 300timeout 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="连接超时"><a href="#连接超时" class="headerlink" title="连接超时"></a>连接超时</h3><ol><li>检查端口映射是否正确</li><li>确认防火墙设置</li><li>验证Redis服务状态</li></ol><h3 id="数据持久化失败"><a href="#数据持久化失败" class="headerlink" title="数据持久化失败"></a>数据持久化失败</h3><ol><li>检查磁盘权限</li><li>确保数据目录存在</li><li>验证配置文件格式</li></ol><h3 id="内存占用过高"><a href="#内存占用过高" class="headerlink" title="内存占用过高"></a>内存占用过高</h3><ol><li>检查内存限制设置</li><li>优化数据结构</li><li>及时清理过期数据</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis官方文档</a></li><li><a href="https://hub.docker.com/_/redis">Docker Hub Redis</a></li></ul><h2 id="安装测试验证"><a href="#安装测试验证" class="headerlink" title="安装测试验证"></a>安装测试验证</h2><h3 id="基本连接测试"><a href="#基本连接测试" class="headerlink" title="基本连接测试"></a>基本连接测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入Redis命令行界面</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-cli<span class="token comment"># 如果设置了密码，需要先认证</span>AUTH your_password<span class="token comment"># 测试连接是否成功</span>PING<span class="token comment"># 如果返回PONG，说明连接成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据操作测试"><a href="#数据操作测试" class="headerlink" title="数据操作测试"></a>数据操作测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 写入测试</span>SET test_key <span class="token string">"Hello Redis"</span><span class="token comment"># 读取测试</span>GET test_key<span class="token comment"># 删除测试</span>DEL test_key<span class="token comment"># 批量操作测试</span>MSET key1 <span class="token string">"value1"</span> key2 <span class="token string">"value2"</span>MGET key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="持久化测试"><a href="#持久化测试" class="headerlink" title="持久化测试"></a>持久化测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 写入测试数据</span>SET persistent_key <span class="token string">"test_value"</span><span class="token comment"># 2. 保存数据</span>SAVE<span class="token comment"># 3. 重启容器</span><span class="token function">docker</span> restart my-redis<span class="token comment"># 4. 重新连接并验证数据</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-cliGET persistent_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用redis-benchmark工具进行性能测试</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-benchmark <span class="token parameter variable">-n</span> <span class="token number">100000</span> <span class="token parameter variable">-c</span> <span class="token number">50</span><span class="token comment"># 测试特定命令的性能</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-benchmark <span class="token parameter variable">-t</span> set,get <span class="token parameter variable">-n</span> <span class="token number">100000</span> <span class="token parameter variable">-c</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果验证"><a href="#测试结果验证" class="headerlink" title="测试结果验证"></a>测试结果验证</h3><ol><li><p>连接测试成功标准：</p><ul><li>PING命令返回PONG</li><li>能够正常执行基本的读写操作</li></ul></li><li><p>性能测试参考值：</p><ul><li>SET操作：≥50000 ops&#x2F;sec</li><li>GET操作：≥50000 ops&#x2F;sec</li><li>延迟：&lt;1ms</li></ul></li><li><p>持久化测试验证点：</p><ul><li>数据写入成功</li><li>重启后数据仍然存在</li><li>AOF&#x2F;RDB文件正常生成</li></ul></li></ol><h3 id="常见测试问题"><a href="#常见测试问题" class="headerlink" title="常见测试问题"></a>常见测试问题</h3><ol><li><p>连接被拒绝</p><ul><li>检查Redis服务是否正常运行：<code>docker ps | grep redis</code></li><li>验证端口映射：<code>docker port my-redis</code></li><li>确认防火墙设置</li></ul></li><li><p>性能测试结果不理想</p><ul><li>检查系统资源使用情况</li><li>调整Redis配置参数</li><li>优化网络设置</li></ul></li><li><p>持久化测试失败</p><ul><li>确认配置文件中的持久化设置</li><li>检查数据目录权限</li><li>查看Redis日志：<code>docker logs my-redis</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop的RocketMQ的搭建和使用</title>
      <link href="/2025/03/14/Docker%20Desktop%E7%9A%84RocketMQ%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/03/14/Docker%20Desktop%E7%9A%84RocketMQ%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>RocketMQ是阿里巴巴开源的分布式消息中间件，在微服务架构中扮演着重要角色。本文将详细介绍如何在Windows系统中使用Docker来搭建和使用RocketMQ环境。</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p> 访问Docker官网下载Docker Desktop for Windows<br> 安装完成后，确保Docker服务正常运行<br> 打开PowerShell，运行以下命令验证安装：<br>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><img src="/img/downloaded/aHR0cHM6_e5299e1d483b462e802d3e9df5f8de2a.png" alt="在这里插入图片描述"></p><h2 id="RocketMQ部署"><a href="#RocketMQ部署" class="headerlink" title="RocketMQ部署"></a>RocketMQ部署</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取nameserver镜像</span><span class="token function">docker</span> pull apache/rocketmq:4.9.4<span class="token comment"># 拉取控制台镜像</span><span class="token function">docker</span> pull apacherocketmq/rocketmq-dashboard:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_a274f0d0d629436ca937017498639de1.png" alt="在这里插入图片描述"><br>第二个之前拉过了，步骤和上面一样的</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><blockquote><p>翻译：错误响应来自守护程序：在等待连接时取消请求”<a href="https://registry-1.docker.io/v2/%22%EF%BC%9Anet/http%EF%BC%9A%E5%9C%A8%E7%AD%89%E5%BE%85%E6%A0%87%E5%A4%B4%E6%97%B6%E8%B6%85%E8%BF%87%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B6%85%E6%97%B6">https://registry-1.docker.io/v2/&quot;：net/http：在等待标头时超过客户端超时</a></p></blockquote><p>更改源可以解决报错问题<br><a href="https://blog.csdn.net/qq_23311271/article/details/146259874">站内参考 我的文章 Docker Desktop 配置国内镜像源教程 </a></p><h3 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h3><p>在本地创建以下目录用于数据持久化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> rocketmq<span class="token builtin class-name">cd</span> rocketmq<span class="token function">mkdir</span> data<span class="token function">mkdir</span> data<span class="token punctuation">\</span>namesrv<span class="token function">mkdir</span> data<span class="token punctuation">\</span>broker<span class="token function">mkdir</span> conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在d盘打开PowerShell<br><img src="/img/downloaded/aHR0cHM6_296e5354ae474e849e6e5903f058fa8b.png" alt="在这里插入图片描述"></p><h3 id="配置Broker"><a href="#配置Broker" class="headerlink" title="配置Broker"></a>配置Broker</h3><p>在conf目录下创建broker.conf文件，内容如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">brokerClusterName</span> <span class="token punctuation">=</span> <span class="token value attr-value">DefaultCluster</span><span class="token key attr-name">brokerName</span> <span class="token punctuation">=</span> <span class="token value attr-value">broker-a</span><span class="token key attr-name">brokerId</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span class="token key attr-name">deleteWhen</span> <span class="token punctuation">=</span> <span class="token value attr-value">04</span><span class="token key attr-name">fileReservedTime</span> <span class="token punctuation">=</span> <span class="token value attr-value">48</span><span class="token key attr-name">brokerRole</span> <span class="token punctuation">=</span> <span class="token value attr-value">ASYNC_MASTER</span><span class="token key attr-name">flushDiskType</span> <span class="token punctuation">=</span> <span class="token value attr-value">ASYNC_FLUSH</span><span class="token key attr-name">brokerIP1</span> <span class="token punctuation">=</span> <span class="token value attr-value">&#123;your_host_ip&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数名称</th><th>参数值</th><th>含义</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>brokerClusterName</td><td>DefaultCluster</td><td>指定 Broker 所属的集群名称</td><td>在分布式消息系统中，通过集群名称区分不同的集群。</td><td>该 Broker 属于名为“DefaultCluster”的集群。</td></tr><tr><td>brokerName</td><td>broker-a</td><td>指定 Broker 的名称</td><td>在集群中标识不同的 Broker 实例。</td><td>该 Broker 的名称为“broker-a”。</td></tr><tr><td>brokerId</td><td>0</td><td>指定 Broker 的 ID</td><td>在集群中区分不同的 Broker 实例。</td><td>主 Broker 的 ID 为 0，表示该 Broker 是主 Broker。</td></tr><tr><td>deleteWhen</td><td>04</td><td>指定删除文件的时间</td><td>设置每天删除过期文件的时间点。</td><td>每天 4 点删除过期文件。</td></tr><tr><td>fileReservedTime</td><td>48</td><td>指定文件保留的时间</td><td>设置文件在磁盘上保留的时长（单位：小时）。</td><td>文件在磁盘上保留 48 小时，超过该时间的文件将被删除。</td></tr><tr><td>brokerRole</td><td>ASYNC_MASTER</td><td>指定 Broker 的角色</td><td>在主从复制模式下，定义 Broker 是主节点还是从节点。</td><td>表示该 Broker 是异步主节点，消息异步复制到从节点。</td></tr><tr><td>flushDiskType</td><td>ASYNC_FLUSH</td><td>指定磁盘刷新类型</td><td>设置消息写入磁盘的方式。</td><td>采用异步刷新磁盘的方式，消息先写入内存，再异步刷新到磁盘，性能较高。</td></tr><tr><td>brokerIP1</td><td>{your_host_ip}</td><td>指定 Broker 的 IP 地址</td><td>设置 Broker 所在服务器的 IP 地址。</td><td>默认可能绑定到 127.0.0.1（仅限本机访问），需替换为实际服务器 IP 地址。</td></tr></tbody></table><h3 id="启动NameServer"><a href="#启动NameServer" class="headerlink" title="启动NameServer"></a>启动NameServer</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rmqnamesrv <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>your_path<span class="token punctuation">&#125;</span>/data/namesrv/logs: /home/rocketmq/logs <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>your_path<span class="token punctuation">&#125;</span>/data/namesrv/store: /home/rocketmq/store <span class="token punctuation">\</span><span class="token parameter variable">--memory</span> <span class="token string">"512m"</span> <span class="token punctuation">\</span>apache/rocketmq:4.9.4 <span class="token function">sh</span> mqnamesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Docker 命令中，<code>&#123;your_path&#125;</code> 是 <strong>你本地宿主机的自定义目录路径</strong>，用于将 RocketMQ 的日志和存储数据持久化到宿主机（而非容器内部）。你需要根据操作系统和实际需求替换成具体的路径。<br>windows 下</p><blockquote><p>– 在 PowerShell 中并不是一个标准的参数前缀，因此解析器会将其误解为一元运算符。上面代码会报错</p></blockquote><p>在rocketmq创建一个<code>startNameServer.bat</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name rmqnamesrv <span class="token operator">-</span>p <span class="token number">9876</span><span class="token operator">:</span><span class="token number">9876</span> <span class="token operator">-</span>v d<span class="token operator">:</span><span class="token operator">/</span>rocketmq<span class="token operator">/</span>data<span class="token operator">/</span>namesrv<span class="token operator">/</span>logs<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>logs <span class="token operator">-</span>v d<span class="token operator">:</span><span class="token operator">/</span>rocketmq<span class="token operator">/</span>data<span class="token operator">/</span>namesrv<span class="token operator">/</span>store<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>store <span class="token operator">--</span>memory <span class="token string">"512m"</span> apache<span class="token operator">/</span>rocketmq<span class="token operator">:</span><span class="token number">4.9</span><span class="token number">.4</span> sh mqnamesrv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存通过PowerShell运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>/startNameServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_9d68a524532d4407a4f7f50965600fb4.png" alt="在这里插入图片描述"></p><hr><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>参数</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td><code>docker run</code></td><td>运行容器</td><td>命令用于启动一个新的容器。</td></tr><tr><td><code>-d</code></td><td>后台运行</td><td>表示容器在后台运行，不占用当前终端。</td></tr><tr><td><code>--name rmqnamesrv</code></td><td>指定容器名称</td><td>将容器命名为“rmqnamesrv”，便于管理和识别。</td></tr><tr><td><code>-p 9876:9876</code></td><td>端口映射</td><td>将宿主机的 9876 端口映射到容器的 9876 端口，使外部可以通过该端口访问容器内的服务。</td></tr><tr><td><code>-v &#123;your_path&#125;/data/namesrv/logs:/home/rocketmq/logs</code></td><td>挂载日志目录</td><td>将宿主机的指定路径挂载到容器内的 <code>/home/rocketmq/logs</code> 目录，用于存储日志文件。</td></tr><tr><td><code>-v &#123;your_path&#125;/data/namesrv/store:/home/rocketmq/store</code></td><td>挂载存储目录</td><td>将宿主机的指定路径挂载到容器内的 <code>/home/rocketmq/store</code> 目录，用于存储相关数据。</td></tr><tr><td><code>--memory &quot;512m&quot;</code></td><td>限制容器内存</td><td>设置容器可用内存为 512MB，防止容器占用过多内存资源。</td></tr><tr><td><code>apache/rocketmq:4.9.4</code></td><td>指定镜像及版本</td><td>使用 Apache RocketMQ 的 4.9.4 版本镜像来创建容器。</td></tr><tr><td><code>sh mqnamesrv</code></td><td>启动命令</td><td>在容器启动后执行 <code>sh mqnamesrv</code> 命令，用于启动 RocketMQ 的 NameServer 服务。</td></tr></tbody></table><h4 id="作用说明"><a href="#作用说明" class="headerlink" title="作用说明"></a><strong>作用说明</strong></h4><ul><li><strong><code>-v &#123;your_path&#125;/data/namesrv/logs:/home/rocketmq/logs</code></strong><br>将容器内的日志目录 <code>/home/rocketmq/logs</code> 挂载到宿主机的 <code>&#123;your_path&#125;/data/namesrv/logs</code> 目录。</li><li><strong><code>-v &#123;your_path&#125;/data/namesrv/store:/home/rocketmq/store</code></strong><br>将容器内的存储目录 <code>/home/rocketmq/store</code> 挂载到宿主机的 <code>&#123;your_path&#125;/data/namesrv/store</code> 目录。</li></ul><table><thead><tr><th>参数</th><th>替换内容</th><th>示例路径（宿主机）</th></tr></thead><tbody><tr><td><code>&#123;your_path&#125;</code></td><td>你本地实际的根目录路径</td><td><code>/home/user/rocketmq</code>（Linux）<br><code>C:\rocketmq</code>（Windows）</td></tr><tr><td><code>logs</code> 和 <code>store</code></td><td>RocketMQ 的日志和持久化数据</td><td>自动关联到容器内对应目录</td></tr></tbody></table><p>通过指定 <code>&#123;your_path&#125;</code>，你可以确保 RocketMQ 的数据不会因容器删除而丢失。  </p><h3 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rmqbroker <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>your_path<span class="token punctuation">&#125;</span>/data/broker/logs:/home/rocketmq/logs <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>your_path<span class="token punctuation">&#125;</span>/data/broker/store:/home/rocketmq/store <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>your_path<span class="token punctuation">&#125;</span>/conf/broker.conf:/home/rocketmq/broker.conf <span class="token punctuation">\</span><span class="token parameter variable">--memory</span> 1g <span class="token punctuation">\</span><span class="token parameter variable">--link</span> rmqnamesrv:namesrv <span class="token punctuation">\</span>apache/rocketmq:4.9.4 <span class="token function">sh</span> mqbroker <span class="token parameter variable">-c</span> /conf/broker.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同上<br><strong>window下创建startBroker并运行</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name rmqbroker <span class="token operator">-</span>p <span class="token number">10911</span><span class="token operator">:</span><span class="token number">10911</span> <span class="token operator">-</span>p <span class="token number">10909</span><span class="token operator">:</span><span class="token number">10909</span> <span class="token operator">-</span>v d<span class="token operator">:</span><span class="token operator">/</span>rocketmq<span class="token operator">/</span>data<span class="token operator">/</span>broker<span class="token operator">/</span>logs<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>logs <span class="token operator">-</span>v d<span class="token operator">:</span><span class="token operator">/</span>rocketmq<span class="token operator">/</span>data<span class="token operator">/</span>broker<span class="token operator">/</span>store<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>store <span class="token operator">-</span>v d<span class="token operator">:</span><span class="token operator">/</span>rocketmq<span class="token operator">/</span>conf<span class="token operator">/</span>broker<span class="token punctuation">.</span>conf<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>broker<span class="token punctuation">.</span>conf <span class="token operator">--</span>memory <span class="token number">1</span>g <span class="token operator">--</span>link rmqnamesrv<span class="token operator">:</span>namesrv apache<span class="token operator">/</span>rocketmq<span class="token operator">:</span><span class="token number">4.9</span><span class="token number">.4</span> sh mqbroker <span class="token operator">-</span>c <span class="token operator">/</span>home<span class="token operator">/</span>rocketmq<span class="token operator">/</span>broker<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：在Windows环境下，Docker挂载路径必须使用绝对路径，且使用正斜杠(&#x2F;)而不是反斜杠()。请确保d:&#x2F;rocketmq目录下已经创建了相应的文件夹结构。<br><img src="/img/downloaded/aHR0cHM6_599ca160ea6640adbb18693bcb028d68.png" alt="在这里插入图片描述"></p></blockquote><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>参数</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td><code>docker run</code></td><td>运行容器</td><td>命令用于启动一个新的容器。</td></tr><tr><td><code>-d</code></td><td>后台运行</td><td>表示容器在后台运行，不占用当前终端。</td></tr><tr><td><code>--name rmqbroker</code></td><td>指定容器名称</td><td>将容器命名为“rmqbroker”，便于管理和识别。</td></tr><tr><td><code>-p 10911:10911 -p 10909:10909</code></td><td>端口映射</td><td>将宿主机的 10911 和 10909 端口分别映射到容器的对应端口，使外部可以通过这些端口访问容器内的服务。</td></tr><tr><td><code>-v &#123;your_path&#125;/data/broker/logs:/home/rocketmq/logs</code></td><td>挂载日志目录</td><td>将宿主机的指定路径挂载到容器内的 <code>/home/rocketmq/logs</code> 目录，用于存储日志文件。</td></tr><tr><td><code>-v &#123;your_path&#125;/data/broker/store:/home/rocketmq/store</code></td><td>挂载存储目录</td><td>将宿主机的指定路径挂载到容器内的 <code>/home/rocketmq/store</code> 目录，用于存储相关数据。</td></tr><tr><td><code>-v &#123;your_path&#125;/conf/broker.conf:/home/rocketmq/broker.conf</code></td><td>挂载配置文件</td><td>将宿主机的指定配置文件挂载到容器内的 <code>/home/rocketmq/broker.conf</code> 路径，用于自定义 Broker 的配置。</td></tr><tr><td><code>--memory 1g</code></td><td>限制容器内存</td><td>设置容器可用内存为 1GB，防止容器占用过多内存资源。</td></tr><tr><td><code>--link rmqnamesrv:namesrv</code></td><td>容器间链接</td><td>将当前容器与名为“rmqnamesrv”的容器链接，并将“namesrv”作为别名解析到目标容器。</td></tr><tr><td><code>apache/rocketmq:4.9.4</code></td><td>指定镜像及版本</td><td>使用 Apache RocketMQ 的 4.9.4 版本镜像来创建容器。</td></tr><tr><td><code>sh mqbroker -c /conf/broker.conf</code></td><td>启动命令</td><td>在容器启动后执行 <code>sh mqbroker -c /conf/broker.conf</code> 命令，用于启动 RocketMQ 的 Broker 服务，并指定配置文件路径。</td></tr></tbody></table><h3 id="启动管理控制台"><a href="#启动管理控制台" class="headerlink" title="启动管理控制台"></a>启动管理控制台</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rmqdashboard <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876"</span> <span class="token punctuation">\</span><span class="token parameter variable">--link</span> rmqnamesrv:rmqnamesrv <span class="token punctuation">\</span>apacherocketmq/rocketmq-dashboard:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>windows下创建 startrmqdashboard.bat</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name rmqdashboard <span class="token operator">-</span>p <span class="token number">8080</span><span class="token operator">:</span><span class="token number">8080</span> <span class="token operator">-</span>e <span class="token string">"JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876"</span>  <span class="token operator">--</span>link rmqnamesrv<span class="token operator">:</span>rmqnamesrv  apacherocketmq<span class="token operator">/</span>rocketmq<span class="token operator">-</span>dashboard<span class="token operator">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_e24691f721fc482f984c60ad546296c0.png" alt="在这里插入图片描述"></p><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>参数</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td><code>docker run</code></td><td>运行容器</td><td>命令用于启动一个新的容器。</td></tr><tr><td><code>-d</code></td><td>后台运行</td><td>表示容器在后台运行，不占用当前终端。</td></tr><tr><td><code>--name rmqdashboard</code></td><td>指定容器名称</td><td>将容器命名为“rmqdashboard”，便于管理和识别。</td></tr><tr><td><code>-p 8080:8080</code></td><td>端口映射</td><td>将宿主机的 8080 端口映射到容器的 8080 端口，使外部可以通过该端口访问容器内的服务。</td></tr><tr><td><code>-e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876&quot;</code></td><td>设置环境变量</td><td>设置 Java 应用的环境变量，指定 RocketMQ NameServer 的地址为 <code>rmqnamesrv:9876</code>。</td></tr><tr><td><code>--link rmqnamesrv:rmqnamesrv</code></td><td>容器间链接</td><td>将当前容器与名为“rmqnamesrv”的容器链接，并将“rmqnamesrv”作为别名解析到目标容器。</td></tr><tr><td><code>apacherocketmq/rocketmq-dashboard:latest</code></td><td>指定镜像及版本</td><td>使用 Apache RocketMQ Dashboard 的最新版本镜像来创建容器。</td></tr></tbody></table><h2 id="验证部署"><a href="#验证部署" class="headerlink" title="验证部署"></a>验证部署</h2><p> 访问控制台：<a href="http://localhost:8080/">http://localhost:8080</a><br> 查看集群信息和broker状态<br> 使用控制台发送测试消息</p><p><img src="/img/downloaded/aHR0cHM6_f081978691ad4d08ba45ea888233ea30.png" alt="在这里插入图片描述"></p><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><table><thead><tr><th>问题</th><th>解决办法</th></tr></thead><tbody><tr><td>内存不足</td><td>适当调整容器内存限制，修改JVM参数</td></tr><tr><td>连接超时</td><td>检查端口映射，确认防火墙设置，验证broker.conf中的IP配置</td></tr><tr><td>数据持久化</td><td>确保挂载目录权限正确，定期清理日志文件</td></tr><tr><td>性能优化建议</td><td>合理配置系统参数：调整commitLog大小，优化刷盘策略；监控指标：消息堆积、磁盘使用率、TPS&#x2F;延迟</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> <a href="https://rocketmq.apache.org/docs/quick-start/">RocketMQ官方文档</a><br> <a href="https://docs.docker.com/">Docker官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> RocketMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop配置国内镜像源教程</title>
      <link href="/2025/03/14/Docker%20Desktop%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%95%99%E7%A8%8B/"/>
      <url>/2025/03/14/Docker%20Desktop%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用Docker时，由于默认镜像源在国外，经常会遇到下载速度慢、连接超时等问题。本文将详细介绍如何在Windows系统中为Docker配置国内镜像源，以提升镜像拉取速度。</p></blockquote><h2 id="常用国内镜像源"><a href="#常用国内镜像源" class="headerlink" title="常用国内镜像源"></a>常用国内镜像源</h2><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;docker.1ms.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 清华镜像源<br> <pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;docker.mirrors.tuna.tsinghua.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>阿里云镜像源</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网易镜像源</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;hub-mirror.c.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中科大镜像源</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>腾讯云镜像源</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;mirror.ccs.tencentyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="方法一：通过Docker-Desktop配置"><a href="#方法一：通过Docker-Desktop配置" class="headerlink" title="方法一：通过Docker Desktop配置"></a>方法一：通过Docker Desktop配置</h3><p>打开Docker Desktop<br>点击右上角的设置图标（⚙️）<br>选择左侧菜单中的「Docker Engine」<br>在右侧JSON配置中添加或修改registry-mirrors字段：<br><img src="/img/downloaded/aHR0cHM6_b6912e78e0af4d22b4ecf78c16d83632.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://mirror.ccs.tencentyun.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://mirrors.aliyun.com"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_cb3462d53f6b419781d8a863cb8ac7e4.png" alt="在这里插入图片描述"></p><p>点击「Apply &amp; Restart」应用配置并重启Docker</p><h3 id="方法二：直接修改配置文件"><a href="#方法二：直接修改配置文件" class="headerlink" title="方法二：直接修改配置文件"></a>方法二：直接修改配置文件</h3><p>打开配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置文件位置</span>%USERPROFILE%<span class="token punctuation">\</span>.docker<span class="token punctuation">\</span>daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>win + r</code> 打开 %USERPROFILE%</p><p><img src="/img/downloaded/aHR0cHM6_68187f6209ca4fd88a7b34205ac80e42.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_5e9db95845ab44f4bf91ab0c4785004b.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_cc44686052d94b7ba3971876d0d47281.png" alt="在这里插入图片描述"></p><p>如果文件不存在，创建新文件并添加以下内容：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://mirror.ccs.tencentyun.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://mirrors.aliyun.com"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存文件后重启Docker Desktop<br><img src="/img/downloaded/aHR0cHM6_d1bbf5165bcc4b638a280a950d2f90c6.png" alt="在这里插入图片描述"></p><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><p>打开PowerShell，运行以下命令查看当前配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在输出信息中查找Registry Mirrors部分，确认配置的镜像源已生效<br><img src="/img/downloaded/aHR0cHM6_876cad6637c344dd98915a93b5274377.png" alt="在这里插入图片描述"></p><h2 id="使用阿里云镜像加速器"><a href="#使用阿里云镜像加速器" class="headerlink" title="使用阿里云镜像加速器"></a>使用阿里云镜像加速器</h2><p><a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images#df2f013a1ez0f">配置镜像加速器_容器镜像服务 (ACR)阿里云帮助中心</a><br><img src="/img/downloaded/aHR0cHM6_3f2dfcd3715b4b6ea015502d34f597cd.png" alt="在这里插入图片描述"></p><p><strong>登录<a href="https://cr.console.aliyun.com/?spm=a2c4g.11186623.0.0.27881d82e0msvY">阿里云控制台</a></strong></p><p>搜索「容器镜像服务」<br>在左侧菜单选择「镜像工具」-&gt;「镜像加速器」<br>获取专属加速器地址<br>将地址添加到registry-mirrors配置中</p><p><img src="/img/downloaded/aHR0cHM6_5caf424f961c499ea8b28f4bcc1f910a.png" alt="在这里插入图片描述"></p><p>同上其他方法配置重启即可</p><h2 id="定期清理本地缓存"><a href="#定期清理本地缓存" class="headerlink" title="定期清理本地缓存"></a>定期清理本地缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清理未使用的镜像</span><span class="token function">docker</span> image prune <span class="token parameter variable">-a</span><span class="token comment"># 清理未使用的数据卷</span><span class="token function">docker</span> volume prune<span class="token comment"># 清理构建缓存</span><span class="token function">docker</span> builder prune<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合理使用镜像标签<br>   使用具体版本号而不是latest标签 及时更新过时的镜像</p><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="配置不生效"><a href="#配置不生效" class="headerlink" title="配置不生效"></a>配置不生效</h3><p>检查配置文件格式是否正确<br>确保Docker Desktop完全重启<br>检查系统防火墙设置</p><h3 id="镜像源连接失败"><a href="#镜像源连接失败" class="headerlink" title="镜像源连接失败"></a>镜像源连接失败</h3><p>尝试更换其他镜像源<br>检查网络连接<br>验证镜像源地址是否有效</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.docker.com/">Docker官方文档</a><br><a href="https://cr.console.aliyun.com/">阿里云镜像服务</a><br><a href="https://cloud.tencent.com/developer/article/2485043">Docker&#x2F;DockerHub 国内镜像源 &#x2F; 加速列表（3 月 12 日更新 长期维护）腾讯云开发者社区 腾讯云</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记 —— 数据结构概述及线性表</title>
      <link href="/2025/03/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构笔记"><a href="#数据结构笔记" class="headerlink" title="数据结构笔记"></a>数据结构笔记</h1><pre><code>基于王道数据结构的笔记</code></pre><hr><h2 id="数据结构是什么？"><a href="#数据结构是什么？" class="headerlink" title="数据结构是什么？"></a>数据结构是什么？</h2><p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据元素是数据的基本单位，数据元素由多个数据项组成，数据项是数据不可分割的最小单位。</strong></p><blockquote><p>数据是<strong>信息的载体</strong>,是描述客观事物属性的数、字符及所有能输入到计算机中并<strong>被计算机程序识别和处理</strong>的符号的集合。数据是计算机程序加工的原料。</p></blockquote><hr><h2 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h2><ol><li><strong>逻辑结构</strong>：数据元素之间的关系。常见的逻辑结构有集合、线性结构、树形结构和图形结构。</li><li><strong>存储结构</strong>：数据元素在计算机中的存储方式。常见的存储结构有顺序存储结构和链式存储结构。</li><li><strong>运算</strong>：对数据元素的操作。常见的运算有插入、删除、查找、排序等。</li></ol><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构:"></a>逻辑结构:</h3><p><img src="/img/downloaded/aHR0cHM6_2628c1533654a88a2ee313c9597ab454.png"></p><p>集合：（并查集）是数学中的概念<br>线性结构：线性的数据结构（第二、三章） 例：排行榜<br>树形结构：（第四章）例：思维导图、文件夹（文件系统）<br>网状结构（图结构）：（第五章）例：道路信息，朋友圈   </p><h3 id="数据计算（运算）"><a href="#数据计算（运算）" class="headerlink" title="数据计算（运算）"></a>数据计算（运算）</h3><p>针对某种逻辑结构，结合实际需求，定义基本运算。<br>逻辑架构-线性结构的运算： 1.查找第i个数据元素 2.在第i个位置插入数据元素 3.删除数据元素</p><h3 id="存储结构（物理结构）"><a href="#存储结构（物理结构）" class="headerlink" title="存储结构（物理结构）"></a>存储结构（物理结构）</h3><p>数据的存储结构：顺序存储、链式存储、索引存储、散列存储</p><blockquote><p>如何用计算机表示数据元素的逻辑关系？<br>数据元素的三要素<br><img src="/img/downloaded/aHR0cHM6_6b0efcbf82715a7b6a75fa01745256ad.png"></p></blockquote><pre><code>数据类型、抽象数据类型  </code></pre><p>数据类型：数据类型是一个值的集合和定义在此集合上的一组操作的总称。<br>原子类型:不可再分的数据类型。<br>结构类型：可以在分解成若干成分（分量）的数据类型。<br>抽象数据类型：由用户定义，用以表示应用问题的数据模型，仅取决于逻辑特性，与计算机内部如何实现无关，即独立于实现。</p><hr><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote><p>程序 &#x3D; 数据结构 + 算法</p></blockquote><p>算法是对特定问题的求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作。</p><h3 id="算法的特性："><a href="#算法的特性：" class="headerlink" title="算法的特性："></a>算法的特性：</h3><pre><code>有穷性、确定性、可行性、输入、输出</code></pre><p>有穷性：算法必须在执行有限个步骤之后终止。<br>确定性：算法的每一个步骤都必须是确定的。<br>可行性：算法的每一步都必须是可行的。<br>输入：一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出了初始条件。<br>输出：一个算法有一个或多个输出，以反映对输入数据加工后的结果。没有输出的算法是没有意义的。</p><p>※与函数类似</p><h3 id="“好”算法的特质"><a href="#“好”算法的特质" class="headerlink" title="“好”算法的特质"></a>“好”算法的特质</h3><p>1.正确性：算法应满足具体问题的需求。<br>2.可读性：算法应易于理解，便于调试、修改和扩充。<br>3.健壮性：当输入非法数据时，算法能适当地做出反应或进行处理，而不会产生不正确的结果。<br>4.高效性：执行时间短，存储空间省。<br>5.低存储量：存储空间省。</p><h3 id="算法时间开销度量"><a href="#算法时间开销度量" class="headerlink" title="算法时间开销度量"></a>算法时间开销度量</h3><pre><code>事后统计法、事前分析估算法</code></pre><p>事后统计法：运行程序，统计时间开销。<br>事前分析估算法：根据统计规律，对算法时间开销做出估算。✅</p><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><pre><code>算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，其时间量度记作T(n) = O(f(n))，称作算法的渐近时间复杂度，简称时间复杂度。</code></pre><p>✅最坏情况时间复杂度：最坏情况下，执行算法的全部过程所需要的时间。<br>✅平均时间复杂度：所有可能输入实例在等概率前提下，算出平均时间复杂度。<br>❌最好情况时间复杂度：最好情况下，执行算法的全部过程所需要的时间。</p><p>加法原则：T(n) &#x3D; T1(n) + T2(n) &#x3D; O(f(n)) + O(g(n)) &#x3D; O(max(f(n), g(n)))<br>乘法原则：T(n) &#x3D; T1(n) * T2(n) &#x3D; O(f(n)) * O(g(n)) &#x3D; O(f(n) * g(n))</p><p>大小比较：O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)<br>口诀：常对幂指阶<br>通过数学方式比较算法复杂度<br>趋近于0则分子时间复杂度速度增大快 无穷小比阶</p><hr><h2 id="线性表-Linear-List"><a href="#线性表-Linear-List" class="headerlink" title="线性表(Linear List)"></a>线性表(Linear List)</h2><p>数据结构三要素</p><blockquote><p>线性表是具有相同数据类型的n个数据元素的有限序列。n为表长，当n&#x3D;0时，线性表是一个空表。<br>每个数据元素占用空间一样大，相邻的两个数据元素逻辑上彼此<strong>紧邻</strong>。<br>第一个数据元素没有前驱，称为<strong>首元素</strong>；最后一个数据元素没有后继，称为<strong>尾元素</strong>。<br>除第一个和最后一个之外，其他数据元素都有<strong>唯一</strong>的前驱和后继。</p></blockquote><p>线性表是具有相同数据类型的n个数据元素的有限序列。其中，n表示表长度，当n&#x3D;0时，该表称为空表。<br>若用L命名线性表，则其一般表示为：<br>    L &#x3D; (a1,a2,…,an)<br>L表示线性表的名字，ai是线性表中第i个元素，n为线性表的表长（即元素个数）。ai-1和ai为相邻两个数据元素。a1表示第一个元素表头元素，an表示最后一个元素表尾元素。</p><h3 id="线性表的位序"><a href="#线性表的位序" class="headerlink" title="线性表的位序"></a>线性表的位序</h3><pre><code>线性表中每个元素都有一个序号，称为位序。位序是从1开始。首元素a1的位序为1，尾元素an的位序为n。  </code></pre><p>线性表中第一个元素a1的位序是1，最后一个元素an的位序是n，当位序i&gt;2时，ai-1和ai为相邻的数据元素，ai-1称为ai的<strong>直接前驱，ai称为ai-1的直接后继</strong>。  </p><h3 id="线性表的特点："><a href="#线性表的特点：" class="headerlink" title="线性表的特点："></a>线性表的特点：</h3><pre><code>线性表中元素的数据类型可以是简单的数据结构，也可以是由多个数据元素构成(如学生表)。线性表在内存中占用一片连续的存储单元，首元素的位置称为起始位置，末元素所占的存储单元的位置称为终端位置，除第一个和最后一个数据元素之外，其他数据元素有唯一的前驱和后继。线性表有两种实现方式，一种是顺序存储，一种为链式存储，在下章详细介绍。线性表为动态结构。</code></pre><h3 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h3><p>线性表的顺序存储结构下，数据元素个数会受到限制，称为静态存储方式，使用比较容易实现，但使用起来不够灵活。<br>顺序存储是指用一段连续的存储空间，来实现顺序存储。<br>线性表的基本操作：<br>        InitList(&amp;L) &#x2F;&#x2F;初始化操作，构造一个空的线性表L，分配内存空间<br>        DestroyList(&amp;L) &#x2F;&#x2F;销毁操作，销毁线性表L，释放内存空间<br>        ListInsert(&amp;L, i, e) &#x2F;&#x2F;插入元素，在第i个位置插入元素e<br>        ListDelete(&amp;L, i, &amp;e) &#x2F;&#x2F;删除元素，删除第i个元素，并用e返回其值<br>        LocateElem(&amp;L, e) &#x2F;&#x2F;按值查找，返回元素e的位置，<br>        ListLength(&amp;L) &#x2F;&#x2F;求表长，返回线性表L的数据元素个数<br>        GetElem(&amp;L, i, &amp;e) &#x2F;&#x2F;查找第i个元素，并用e返回其值<br>        ListEmpty(&amp;L) &#x2F;&#x2F;判断是否为空表，若为空返回True，反之返回False</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>为什么要对数据结构进行封装：<br>1.团队合作编程，你定义的数据结构要让别人能够很方便的使用（封装）-方便团队编程。<br>2.将常用的操作&#x2F;运算封装成函数，避免重复工作，降低出错概率。-方便自己<br>3.简化程序接口，方便调试，方便扩展功能。-方便他人。<br>4.实现信息隐藏，保证安全性，实现可移植性。-方便未来使用</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>线性表的一种，数据元素排列在一块地址连续的内存空间。继承了线性表的特性</p><h3 id="顺序表的实现方式"><a href="#顺序表的实现方式" class="headerlink" title="顺序表的实现方式"></a>顺序表的实现方式</h3><p>顺序表的两种实现方式：<br>1.静态分配：在编译时确定线性表的最大长度，分配固定大小的存储空间。<br>2.动态分配：在程序执行时，根据实际需求确定空间大小。   </p><p>顺序存储，即使用顺序表（顺序存储结构）来实现线性表。使用一个一维数组来存储表中的元素值，定义如下：</p><pre class="line-numbers language-none"><code class="language-none">typedef struct &#123;    ElemType elem[MAXSIZE];    int length;&#125;Sqlist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>ElemType定义数据元素的类型，SqList定义线性表。ElemType的定义可以是基础数据类型、结构体、枚举等类型。  SqList是包含数据元素类型和线性表长度的复合类型。  SqList是一个由SqList构成的结构体。SqList为指向结构体的指针类型，即SqList *Sqlist。SqList在内存中的位置是确定的，因此每个数据元素之间的相对位置也是确定的，但具体位置不确定（动态的）。因此，线性表在顺序存储结构时，可以实现随机存取。</code></pre><p>线性表是一种逻辑结构，顺序存储结构是它的物理结构，实现逻辑结构时，需用物理结构提供存储功能。<br>线性表实现为链表时，链表是一种逻辑结构，它的实现方式是物理结构。实现逻辑结构时，需用物理结构提供存储功能。<br>线性表的长度可以随时增加或减少，即具有动态性，与数组不同，数组一旦声明，长度不变。<br>线性表的最大长度固定时，即具有静态性。<br>线性表可以是静态顺序表，也可以是动态顺序表，但线性表是一种逻辑结构，其存储结构可以是线性表可以是顺序表，也可以是链表。<br>线性表、顺序表、顺序存储结构三者没有关系。</p><p>顺序表在内存中占用连续的存储空间，因此可以实现随机存取。</p><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><p>代码示例</p><pre class="line-numbers language-none"><code class="language-none">#define MAXSIZE 100 &#x2F;&#x2F; 顺序表最大的存储长度typedef int ElemType;&#x2F;&#x2F; ElemType为int类型typedef struct&#123;  ElemType data[MAXSIZE];&#x2F;&#x2F; 定义数组长度为100，即最大长度  int length;&#125;SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态分配的特点：静态分配的顺序表是静态的，在编译时确定顺序表的最大长度，一旦确定，不能改变，静态分配的顺序表长度是固定的。<br>优点：实现起来比较简单，无需考虑空间不够时，调整存储区的空间大小。<br>缺点：顺序表长度不能变化，造成空间浪费或不够用，不利于实现随机存取，浪费空间，因此使用较少。  </p><p>记得初始化，否则可能会生成随机数据（内存中的数据遗留 —— 脏数据）</p><p><img src="/img/downloaded/aHR0cHM6_f24d819b5826fcc0629de0464c6e05ac.png"></p><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><pre class="line-numbers language-none"><code class="language-none">#define MAXSIZE 100typedef struct&#123;  ElemType *data;&#x2F;&#x2F;用指针来存放数组首地址  int length;&#x2F;&#x2F; 定义当前长度&#125;SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义两个函数，分别为CreateList()：动态分配顺序表空间并初始化，返回数据表。<br>InsertList()：实现插入操作。</p><h4 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h4><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作**"></a>插入操作**</h5><p>用存储位置相邻来体现数据元素之间的逻辑关系。  </p><p>1.在元素i前插入元素e。<br>2.元素插入到表尾，不需要移动元素，O(1)；插入到表中其它位置，要移动元素，时间复杂度为O(n)。<br>3.在位置i插入一个元素，表中n个元素依次后移，因此插入操作平均要移动[n&#x2F;2]个元素，O(n)；最坏的情况需要移动n个元素，时间复杂度为O(n)；若在表末尾插入元素，时间复杂度为O(n)；若在表头插入元素，需要移动n-1个元素，时间复杂度为O(n)。<br>4.插入操作平均移动近一半的元素，因此时间复杂度为O(n)，最坏情况为O(n)。<br>5.最坏的情况：表空间已满，没有插入元素空间。  </p><p>ListInsert（&amp;L，i，e);插入操作，在表L的第i个位置插入指定元素e。</p><p>使用静态分配的方式实现的顺序表，表空时length为0，表满时length为100，无法判断是否满了，使用malloc()方法实现动态分配顺序表，将长度改为n。<br><img src="/img/downloaded/aHR0cHM6_830f9e002cdbc07288693d0a4173cd0b.png"><br><img src="/img/downloaded/aHR0cHM6_203a07deb82701effec3080438e1125e.png"></p><p>插入操作的时间复杂度：时间复杂度取决于插入位置。平均情况插入O(n)，最坏情况插入O(n)<br>删除操作的复杂度：O(n)</p><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>删除指定位置的元素。</p><p>时间复杂度：平均情况为O(n)，最坏情况为O(n)，删除的元素是最后一个元素，时间复杂度为O(1)，删除元素是第一个元素，需要移动表中前n-1个元素，此时时间复杂度为O(n)。<br>代码要排除无效数据，例如在空表或表末尾删除元素。</p><p><img src="/img/downloaded/aHR0cHM6_0caf59b3be010b5d98f5fef78c01b98f.png"></p><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><p>通过位序来查找元素。<br>按位查找时间复杂度为O(1)，线性表的最大长度为n，取值范围1&lt;&#x3D;i&lt;&#x3D;n。当i在范围内，时间复杂度为O(1);当i取值超出范围，时间复杂度为O(0)</p><p><img src="/img/downloaded/aHR0cHM6_b6d3cbe9c0c91c1108eab6c55ff0043c.png"><br><img src="/img/downloaded/aHR0cHM6_f86c4324ae61aa22d3248d1459455037.png"><br><img src="/img/downloaded/aHR0cHM6_f4a18ee2ffb6b0f761cb7e44ced1aa12.png"><br><img src="/img/downloaded/aHR0cHM6_178675ced735a3d8549ac0c09e53d55e.png"></p><p>答疑：是否可以直接使用 &#x3D;&#x3D; 判断 答案：x<br>等等在结构体的比较是地址的比较</p><p><img src="/img/downloaded/aHR0cHM6_33914369048d32e68fd9b3117ee36801.png"><br><img src="/img/downloaded/aHR0cHM6_368af7e61d6c9b3849a7e0a078fb1763.png"></p><p>c++ 可以重载，但是数据结构考试就可以用上面直接&#x3D;&#x3D;，要求不严格，如果是c语言设计，则不可以。</p><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><p>在顺序表L中查找第一个元素值等于e的元素，并返回其位序。<br>时间复杂度最坏情况O(n)，平均情况O(n&#x2F;2)&#x3D;O(n)。<br>线性表中可能存在多个连续的重复元素，因此按值查找并不一定返回第一个与e相等的元素。<br><img src="/img/downloaded/aHR0cHM6_d8b30a0ac8fdaf30fec711545a7314b0.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常用排序方法详解</title>
      <link href="/2025/03/11/Java%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/11/Java%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java常用排序方法详解"><a href="#Java常用排序方法详解" class="headerlink" title="Java常用排序方法详解"></a>Java常用排序方法详解</h1><p>在Java编程中，排序是一个非常常见的操作。本文将详细介绍Java中常用的排序方法，包括<code>Arrays.sort</code>和<code>Arrays.parallelSort</code>的区别，以及其他常用的排序算法。</p><h2 id="Arrays-sort-与-Arrays-parallelSort-的区别"><a href="#Arrays-sort-与-Arrays-parallelSort-的区别" class="headerlink" title="Arrays.sort 与 Arrays.parallelSort 的区别"></a>Arrays.sort 与 Arrays.parallelSort 的区别</h2><p>在Java中，<code>Arrays.sort</code>和<code>Arrays.parallelSort</code>都是用于对数组进行排序的方法。虽然它们的功能相似，但在实现和性能上有一些重要的区别。</p><h3 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h3><p><code>Arrays.sort</code> 是Java中最常用的排序方法之一。它使用的是双轴快速排序算法（Dual-Pivot Quicksort），该算法在大多数情况下表现良好。以下是<code>Arrays.sort</code>的一些特点：</p><ul><li><strong>单线程</strong>：<code>Arrays.sort</code>在单个线程中执行排序操作。</li><li><strong>适用性广</strong>：适用于所有基本类型和对象类型的数组。</li><li><strong>稳定性</strong>：对于对象数组，<code>Arrays.sort</code>是稳定的排序算法，即不会改变相等元素的相对顺序。</li></ul><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3, 5, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Arrays-parallelSort"><a href="#Arrays-parallelSort" class="headerlink" title="Arrays.parallelSort"></a>Arrays.parallelSort</h3><p><code>Arrays.parallelSort</code> 是Java 8引入的一种并行排序方法。它使用的是并行归并排序算法（Parallel Merge Sort），通过将数组分成多个子数组并行排序，然后合并结果来提高性能。以下是<code>Arrays.parallelSort</code>的一些特点：</p><ul><li><strong>多线程</strong>：<code>Arrays.parallelSort</code>利用多线程并行执行排序操作，适合在多核处理器上使用。</li><li><strong>适用性广</strong>：适用于所有基本类型和对象类型的数组。</li><li><strong>性能</strong>：在大数组排序时，<code>Arrays.parallelSort</code>通常比<code>Arrays.sort</code>更快，但在小数组上可能没有明显优势。</li></ul><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3, 5, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="选择哪种方法？"><a href="#选择哪种方法？" class="headerlink" title="选择哪种方法？"></a>选择哪种方法？</h3><ul><li><strong>小数组</strong>：对于小数组，<code>Arrays.sort</code>通常表现更好，因为它的单线程开销较低。</li><li><strong>大数组</strong>：对于大数组，特别是在多核处理器上，<code>Arrays.parallelSort</code>可能会显著提高排序速度。</li><li><strong>稳定性</strong>：如果需要稳定排序（例如排序对象数组），可以选择<code>Arrays.sort</code>。</li></ul><p>总之，选择哪种排序方法取决于具体的应用场景和性能需求。在大多数情况下，<code>Arrays.sort</code>已经足够高效，但在处理大规模数据时，可以考虑使用<code>Arrays.parallelSort</code>来利用多核处理器的优势。</p><h2 id="常用的排序算法"><a href="#常用的排序算法" class="headerlink" title="常用的排序算法"></a>常用的排序算法</h2><p>在算法竞赛中，除了<code>Arrays.sort</code>和<code>Arrays.parallelSort</code>，Java还提供了多种常用的排序算法。以下是一些常用的排序算法及其示例代码：</p><h3 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序 (Bubble Sort)"></a>冒泡排序 (Bubble Sort)</h3><p>冒泡排序是一种简单的排序算法，通过重复遍历要排序的列表，依次比较相邻的元素并交换顺序，直到整个列表有序。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序 (Selection Sort)"></a>选择排序 (Selection Sort)</h3><p>选择排序是一种简单直观的排序算法，每次从未排序部分选择最小（或最大）的元素放到已排序部分的末尾。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序-Insertion-Sort"><a href="#插入排序-Insertion-Sort" class="headerlink" title="插入排序 (Insertion Sort)"></a>插入排序 (Insertion Sort)</h3><p>插入排序通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序 (Merge Sort)"></a>归并排序 (Merge Sort)</h3><p>归并排序是一种分治算法，将数组分成两个子数组分别排序，然后合并两个已排序的子数组。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> right <span class="token operator">-</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序-Quick-Sort"><a href="#快速排序-Quick-Sort" class="headerlink" title="快速排序 (Quick Sort)"></a>快速排序 (Quick Sort)</h3><p>快速排序是一种分治算法，通过选择一个基准元素，将数组分成两部分，一部分小于基准元素，另一部分大于基准元素，然后递归地对两部分进行排序。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pi <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> pi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java中其他常用的排序方法"><a href="#Java中其他常用的排序方法" class="headerlink" title="Java中其他常用的排序方法"></a>Java中其他常用的排序方法</h2><p>除了上述排序算法，Java中还提供了其他一些常用的排序方法，以下是一些示例：</p><h3 id="Collections-sort"><a href="#Collections-sort" class="headerlink" title="Collections.sort"></a>Collections.sort</h3><p><code>Collections.sort</code>用于对<code>List</code>进行排序，使用的是自然顺序或指定的<code>Comparator</code>。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3, 5, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Stream-sorted"><a href="#Stream-sorted" class="headerlink" title="Stream.sorted"></a>Stream.sorted</h3><p><code>Stream.sorted</code>用于对流中的元素进行排序，返回一个新的排序后的流。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sortedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sortedList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3, 5, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Arrays-sort-指定范围"><a href="#Arrays-sort-指定范围" class="headerlink" title="Arrays.sort (指定范围)"></a>Arrays.sort (指定范围)</h3><p><code>Arrays.sort</code>还可以对数组的指定范围进行排序。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [5, 1, 3, 8, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="对象排序实现方式"><a href="#对象排序实现方式" class="headerlink" title="对象排序实现方式"></a>对象排序实现方式</h2><h3 id="1-实现Comparable接口"><a href="#1-实现Comparable接口" class="headerlink" title="1. 实现Comparable接口"></a>1. 实现Comparable接口</h3><p>通过实现<code>Comparable</code>接口定义<strong>自然排序规则</strong>：</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按姓名排序</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用示例</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用Comparator比较器（推荐）"><a href="#2-使用Comparator比较器（推荐）" class="headerlink" title="2. 使用Comparator比较器（推荐）"></a>2. 使用Comparator比较器（推荐）</h3><p>通过<code>Comparator</code>实现<strong>灵活的外部排序规则</strong>，无需修改原有类结构：</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 按年龄排序</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> ageComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p1<span class="token punctuation">,</span> <span class="token class-name">Person</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用示例</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> ageComparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-8新特性应用"><a href="#Java-8新特性应用" class="headerlink" title="Java 8新特性应用"></a>Java 8新特性应用</h2><h3 id="1-Lambda表达式简化"><a href="#1-Lambda表达式简化" class="headerlink" title="1. Lambda表达式简化"></a>1. Lambda表达式简化</h3><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按姓名长度排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span>     <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Lambda表达式在编译后会生成私有方法和<code>invokedynamic</code>指令。</p><h3 id="2-方法引用"><a href="#2-方法引用" class="headerlink" title="2. 方法引用"></a>2. 方法引用</h3><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用Comparator.comparing</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="进阶排序技巧"><a href="#进阶排序技巧" class="headerlink" title="进阶排序技巧"></a>进阶排序技巧</h2><h3 id="多条件排序"><a href="#多条件排序" class="headerlink" title="多条件排序"></a>多条件排序</h3><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> multiComparator <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> multiComparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="逆序排序"><a href="#逆序排序" class="headerlink" title="逆序排序"></a>逆序排序</h3><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> reversedComparator <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> reversedComparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="性能注意事项"><a href="#性能注意事项" class="headerlink" title="性能注意事项"></a>性能注意事项</h2><ol><li>数组排序使用优化后的快速排序算法。</li><li>对象排序时间复杂度为$O(n \log n)$。</li><li>大数据量推荐使用<code>List</code>的<code>sort()</code>方法：<pre class="line-numbers language-java" data-language="java"><code class="language-java">people<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>通过了解和掌握这些常用的排序方法，可以在实际开发和算法竞赛中灵活运用，解决各种排序问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛对拍用法 Java版</title>
      <link href="/2025/03/11/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AF%B9%E6%8B%8D%E7%94%A8%E6%B3%95-Java%E7%89%88/"/>
      <url>/2025/03/11/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AF%B9%E6%8B%8D%E7%94%A8%E6%B3%95-Java%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Java算法竞赛对拍笔记"><a href="#Java算法竞赛对拍笔记" class="headerlink" title="Java算法竞赛对拍笔记"></a>Java算法竞赛对拍笔记</h1><h2 id="一、对拍概述"><a href="#一、对拍概述" class="headerlink" title="一、对拍概述"></a>一、对拍概述</h2><p>对拍是一种检测代码错误的方法，主要通过对比两个程序的输出结果来实现。<br>包含以下几个关键部分：</p><ol><li><strong>暴力程序</strong>：正确但低效的算法，通常采用完全搜索等方式。</li><li><strong>待测程序</strong>：优化后的算法，需要验证其正确性。</li><li><strong>数据生成器</strong>：随机生成符合要求的测试数据。</li><li><strong>对拍脚本</strong>：自动运行并比较两个程序的输出结果。</li></ol><h2 id="二、对拍步骤与组件"><a href="#二、对拍步骤与组件" class="headerlink" title="二、对拍步骤与组件"></a>二、对拍步骤与组件</h2><h3 id="1-数据生成器（Maker）"><a href="#1-数据生成器（Maker）" class="headerlink" title="1. 数据生成器（Maker）"></a>1. 数据生成器（Maker）</h3><p><strong>作用</strong>：生成符合输入格式的随机测试数据。<br><strong>示例代码（Java）</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Maker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 随机生成测试数据</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-暴力程序（Brute-Force）"><a href="#2-暴力程序（Brute-Force）" class="headerlink" title="2. 暴力程序（Brute Force）"></a>2. 暴力程序（Brute Force）</h3><p><strong>作用</strong>：使用简单但正确的算法生成答案。<br><strong>示例代码（Java）</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Brute</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"brute.out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 示例：0-1背包暴力解法（枚举所有可能）</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mask <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> mask<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    weight <span class="token operator">+=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cost <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> cost <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> cost<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-待测程序（Solution）"><a href="#3-待测程序（Solution）" class="headerlink" title="3. 待测程序（Solution）"></a>3. 待测程序（Solution）</h3><p><strong>作用</strong>：实现优化算法，需与暴力程序结果一致。<br><strong>示例代码（Java）</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"solution.out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 示例：0-1背包动态规划解法</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-对拍脚本"><a href="#4-对拍脚本" class="headerlink" title="4. 对拍脚本"></a>4. 对拍脚本</h3><p><strong>作用</strong>：自动运行生成器、暴力程序、待测程序，并比较输出结果。<br><strong>Windows批处理脚本示例</strong>：</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo off:loopecho 正在生成数据...javac Maker.javajava Maker &gt; input.txtecho 正在运行暴力程序...javac Brute.javajava Brute &lt; input.txt &gt; brute.outecho 正在运行待测程序...javac Solution.javajava Solution &lt; input.txt &gt; solution.outecho 正在比较结果...fc brute.out solution.outif errorlevel 1 (    echo 出错！请检查代码！    pause    exit)echo 测试通过，继续下一轮...goto loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Linux Bash脚本示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 生成数据</span>    javac Maker.java <span class="token operator">&amp;&amp;</span> <span class="token function">java</span> Maker <span class="token operator">></span> input.txt    <span class="token comment"># 运行暴力程序</span>    javac Brute.java <span class="token operator">&amp;&amp;</span> <span class="token function">java</span> Brute <span class="token operator">&lt;</span> input.txt <span class="token operator">></span> brute.out    <span class="token comment"># 运行待测程序</span>    javac Solution.java <span class="token operator">&amp;&amp;</span> <span class="token function">java</span> Solution <span class="token operator">&lt;</span> input.txt <span class="token operator">></span> solution.out    <span class="token comment"># 比较结果</span>    <span class="token function">diff</span> brute.out solution.out    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error! 请检查代码！"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"AC! 继续测试..."</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><ol><li><strong>输入输出一致性</strong>：<ul><li>确保所有程序的输入输出格式一致（如空格、换行符）。</li><li>使用 <code>System.in</code> 和 <code>System.out</code> 以便重定向，或手动读写文件。</li></ul></li><li><strong>数据覆盖</strong>：<ul><li>数据生成器需覆盖边界条件（如最大值、最小值、极端情况）。</li></ul></li><li><strong>程序效率</strong>：<ul><li>暴力程序可能在大数据时超时，可限制生成数据规模。</li></ul></li><li><strong>错误处理</strong>：<ul><li>检查程序是否崩溃或输出异常（如 <code>NullPointerException</code>）。</li></ul></li><li><strong>环境配置</strong>：<ul><li>确保 Java 环境变量正确，路径无误。</li><li>在 Linux 下给脚本执行权限：<code>chmod +x script.sh</code>。</li></ul></li></ol><h2 id="四、调试技巧"><a href="#四、调试技巧" class="headerlink" title="四、调试技巧"></a>四、调试技巧</h2><ul><li><strong>手动测试</strong>：<ol><li>手动生成小规模数据（如 <code>n=3</code>）。</li><li>手动运行程序并对比输出。</li></ol></li><li><strong>逐步调试</strong>：<ul><li>在程序中添加 <code>System.out.println</code> 输出中间变量，检查逻辑错误。</li></ul></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>对拍是调试算法竞赛代码的有效工具，通过自动化测试能快速定位错误。熟练掌握对拍流程，可显著减少因细节错误导致的扣分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第十六届蓝桥杯大赛软件赛（编程类）知识点大纲</title>
      <link href="/2025/03/10/%E7%AC%AC%E5%8D%81%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%A7%E8%B5%9B%E8%BD%AF%E4%BB%B6%E8%B5%9B%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2/"/>
      <url>/2025/03/10/%E7%AC%AC%E5%8D%81%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%A7%E8%B5%9B%E8%BD%AF%E4%BB%B6%E8%B5%9B%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六届蓝桥杯大赛软件赛（编程类）知识点大纲"><a href="#第十六届蓝桥杯大赛软件赛（编程类）知识点大纲" class="headerlink" title="第十六届蓝桥杯大赛软件赛（编程类）知识点大纲"></a>第十六届蓝桥杯大赛软件赛（编程类）知识点大纲</h1><h2 id="大学-C-组"><a href="#大学-C-组" class="headerlink" title="大学 C 组"></a><strong>大学 C 组</strong></h2><ol><li>枚举[1-3]</li><li>排序<ul><li>冒泡排序[2]</li><li>选择排序[3]</li><li>插入排序[3]</li></ul></li><li>搜索(bfs, dfs)[1-5]</li><li>贪心[1-5]</li><li>模拟[1-3]</li><li>二分[2-5]</li><li>DP(普通一维问题)[3-5]</li><li>高精度[1-5]</li><li>数据结构<ul><li>栈[2-4]</li><li>队列[2-5]</li><li>链表 [2-5]</li></ul></li><li>数学<ul><li>初等数论[3-5]</li></ul></li></ol><h2 id="大学-B-组"><a href="#大学-B-组" class="headerlink" title="大学 B 组"></a><strong>大学 B 组</strong></h2><ol start="11"><li>排序<ul><li>归并排序[4-5]</li><li>快速排序[4-5]</li><li>桶排序[4]</li><li>堆排序[4]</li><li>基数排序[4~5]</li></ul></li><li>搜索<ul><li>剪枝[4-6]</li><li>双向 BFS[5-6]</li><li>记忆化搜索[5]</li><li>迭代加深搜索[5-6]</li><li>启发式搜索[7]</li></ul></li><li>DP<ul><li>背包 DP[4-6]</li><li>树形 DP[4-6]</li><li>状压 DP[5-6]</li><li>数位 DP[5-6]</li><li>DP 的常见优化[7]</li></ul></li><li>字符串<ul><li>哈希[4-5]</li><li>kmp[4-6]</li><li>manacher[4-6]</li></ul></li><li>图论<ul><li>欧拉回路[5-7]</li><li>最小生成树[5-7]</li><li>单源最短路及差分约束系统[5-7]</li><li>拓扑序列[5-7]</li><li>二分图匹配[7]</li><li>图的连通性问题（割点、桥、强连通分量）[7]</li><li>DFS 序[5-7]</li><li>最近共同祖先[5-7]</li></ul></li><li>数学<ul><li>排列组合[5-6]</li><li>二项式定理[6]</li><li>容斥原理[6-7]</li><li>模意义下的逆元[5]</li><li>矩阵运算[6-7]</li><li>高斯消元[7]</li></ul></li><li>数据结构<ul><li>ST 表[5-6]</li><li>堆[5-6]</li><li>树状数组[5-6]</li><li>线段树[6-7]</li><li>Trie 树[5-7]</li><li>并查集[5-6]</li><li>平衡树(利用系统自带的标准库实现简单平衡树)[5-7]</li></ul></li><li>计算几何<ul><li>基础计算和基本位置关系判定[6-7]</li><li>概率论[7+]</li><li>博弈论[7+]</li></ul></li></ol><h2 id="研究生及大学-A-组"><a href="#研究生及大学-A-组" class="headerlink" title="研究生及大学 A 组"></a>研究生及大学 A 组</h2><ol start="19"><li>字符串<ul><li>AC 自动机[7-8]</li><li>拓展 kmp[7-8]</li><li>后缀数组[8-10]</li><li>后缀自动机[8-10]</li><li>回文自动机[8-10]</li></ul></li><li>图论<ul><li>网络流[8-10]</li><li>一般图匹配[9-10]</li></ul></li><li>数学<ul><li>生成函数[8-10]</li><li>莫比乌斯反演[8-10]</li><li>快速傅里叶变换[9-10]</li></ul></li><li>数据结构<ul><li>树链剖分[7-8]</li><li>二维&#x2F;动态开点线段树[7-8]</li><li>平衡树[8-9]</li><li>可持久化数据结构[8-9]</li><li>树套树[9-10]</li><li>动态树[9-10]</li></ul></li></ol><p><strong>说明</strong>：此表中各组考点难度向上兼容。A 组需同时掌握 B 组和C 组知识点，B 组需同时掌握 C 组知识点。大纲列举内容仅供参考，实际比赛内容不限于大纲列举内容。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li><strong>组别与知识点覆盖</strong>：<ul><li>大学 C 组的知识点相对基础，涵盖了编程中的基本算法和数据结构，如枚举、排序、搜索等，难度系数较低，适合初学者或基础阶段的选手。</li><li>大学 B 组在 C 组的基础上，增加了更复杂的排序算法（如归并排序、快速排序等）、高级搜索技巧（如剪枝、双向 BFS 等）、多种 DP 类型、更深入的图论知识（如欧拉回路、最小生成树等）以及一些数学和数据结构的扩展，难度系数较高，要求选手具备更深入的算法理解和编程能力。</li><li>研究生及大学 A 组则在 B 组和 C 组的基础上，进一步拓展了字符串处理（如 AC 自动机、后缀自动机等）、图论（如网络流、一般图匹配等）和数学领域的高级知识（如生成函数、莫比乌斯反演等），以及更复杂的数据结构（如树链剖分、可持久化数据结构等），难度系数最高，对选手的综合能力和创新思维有较高要求。</li></ul></li><li><strong>知识点分类与重要性</strong>：<ul><li><strong>基础算法</strong>：如枚举、排序、搜索、贪心、模拟等，是编程的基础，贯穿于各个组别，是解决复杂问题的前提。</li><li><strong>数据结构</strong>：栈、队列、链表等基础数据结构在 C 组出现，而 B 组和 A 组则引入了更复杂的数据结构，如线段树、Trie 树、平衡树等，这些数据结构能够高效地存储和处理数据，是优化算法效率的关键。</li><li><strong>动态规划（DP）</strong>：从普通一维问题到背包 DP、树形 DP、状压 DP 等多种类型，DP 是解决许多优化问题的重要方法，需要选手具备较强的逻辑思维和状态转移能力。</li><li><strong>图论</strong>：涵盖了欧拉回路、最小生成树、最短路、二分图匹配等经典问题，图论知识在实际应用中广泛存在，对选手的抽象建模能力要求较高。</li><li><strong>数学知识</strong>：包括初等数论、排列组合、矩阵运算等，数学是编程的理论基础，许多算法的设计和优化都依赖于数学原理。</li></ul></li><li><strong>难度系数与学习策略</strong>：<ul><li>对于难度系数较低的知识点（如 1-3），可以通过多做练习题、理解基本原理来掌握。</li><li>难度系数中等（如 4-6）的知识点需要深入学习算法的思想和实现细节，结合实际问题进行练习，提高应用能力。</li><li>高难度系数的知识点（如 7-10）通常涉及复杂的理论和实现，需要选手具备扎实的基础知识和较强的创新能力，可以通过研究相关论文、参加竞赛交流等方式来提升。</li></ul></li><li><strong>比赛准备建议</strong>：<ul><li><strong>系统学习</strong>：按照知识点大纲，有计划地学习各个知识点，确保全面覆盖。</li><li><strong>实践训练</strong>：通过在线编程平台（如 LeetCode、牛客网等）进行大量的练习，提高编程水平和解决问题的能力。</li><li><strong>总结归纳</strong>：对做过的题目进行总结，整理出常见的解题思路和模板，便于在比赛中快速应用。</li><li><strong>团队合作</strong>：与同学或队友一起学习和讨论，互相交流经验，共同进步。</li><li><strong>关注比赛动态</strong>：了解往届蓝桥杯的题型和考点分布，有针对性地进行准备。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2024年第15届省赛真题</title>
      <link href="/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF15%E5%B1%8A%E7%9C%81%E8%B5%9B%E7%9C%9F%E9%A2%98/"/>
      <url>/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF15%E5%B1%8A%E7%9C%81%E8%B5%9B%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第15届蓝桥杯省赛真题题解"><a href="#第15届蓝桥杯省赛真题题解" class="headerlink" title="第15届蓝桥杯省赛真题题解"></a>第15届蓝桥杯省赛真题题解</h1><h3 id="第十五届蓝桥杯省赛-Java-B-组真题总结分析"><a href="#第十五届蓝桥杯省赛-Java-B-组真题总结分析" class="headerlink" title="第十五届蓝桥杯省赛 Java B 组真题总结分析"></a>第十五届蓝桥杯省赛 Java B 组真题总结分析</h3><h4 id="试题列表与问题描述"><a href="#试题列表与问题描述" class="headerlink" title="试题列表与问题描述"></a><strong>试题列表与问题描述</strong></h4><ol><li><p><strong>A题：报数游戏</strong><br><strong>问题描述</strong>：小蓝和朋友们轮流报出20或24倍数的正整数，前10个数为20,24,40,48,60,72,80,96,100,120。求第202420242024个数。<br><strong>解题关键</strong>：通过观察前40个数的规律，发现当n为偶数时，第n个数为<code>n×12</code>。  </p></li><li><p><strong>B题：类斐波那契循环数</strong><br><strong>问题描述</strong>：定义类斐波那契数列，前n位为数字的各位，后续每位为前n项和。求0至10^7中最大的循环数（自身出现在数列中）。<br><strong>解题关键</strong>：模拟数列生成并判断循环性，需注意数值溢出和优化计算。<br><strong>思路</strong>：暴力枚举+剪枝，记录已计算的数列状态，优化时可通过限制数列长度或使用哈希表加速判断。</p></li><li><p><strong>C题：分布式队列</strong><br><strong>问题描述</strong>：实现一个分布式队列的高效操作（具体题目未完全展示）。<br><strong>可能的考点</strong>：数据结构设计（如队列同步）、多线程&#x2F;分布式场景的并发控制（如锁机制或消息队列）。</p></li><li><p><strong>D题：食堂</strong><br><strong>问题描述</strong>：涉及资源分配或时间安排问题（具体描述未完全展示）。<br><strong>可能的考点</strong>：贪心算法（如最短等待时间调度）或动态规划（如背包问题变种）。</p></li><li><p><strong>E题：最优分组</strong><br><strong>问题描述</strong>：将一组数据按条件分组，使总效益最大。<br><strong>可能的考点</strong>：组合优化（如动态规划的分组模型）或图论中的最大权匹配（如二分图匹配）。</p></li><li><p><strong>F题：星际旅行</strong><br><strong>问题描述</strong>：模拟星际路径规划或能量管理问题。<br><strong>可能的考点</strong>：图的最短路径（Dijkstra算法）或状态压缩动态规划（多目标优化）。</p></li><li><p><strong>G题：LITS游戏</strong><br><strong>问题描述</strong>：基于棋盘拼图的逻辑游戏（类似俄罗斯方块）。<br><strong>可能的考点</strong>：搜索算法（DFS&#x2F;BFS）或回溯剪枝（排除无效状态）。</p></li><li><p><strong>H题：拔河</strong><br><strong>问题描述</strong>：将一群人分为两组，使体重差值最小。<br><strong>可能的考点</strong>：背包问题（动态规划）或二进制枚举（子集划分）。</p></li></ol><hr><h4 id="题型与考点统计分析"><a href="#题型与考点统计分析" class="headerlink" title="题型与考点统计分析"></a><strong>题型与考点统计分析</strong></h4><table><thead><tr><th>题型</th><th>考点分类</th><th>出现次数</th><th>典型题目</th></tr></thead><tbody><tr><td><strong>数论</strong></td><td>数学规律、模运算</td><td>2</td><td>A题（报数游戏）</td></tr><tr><td><strong>模拟</strong></td><td>数列生成、循环判断</td><td>2</td><td>B题（类斐波那契循环数）</td></tr><tr><td><strong>动态规划</strong></td><td>背包问题、状态转移</td><td>2</td><td>H题（拔河）、E题（最优分组）</td></tr><tr><td><strong>数据结构</strong></td><td>队列、图结构</td><td>2</td><td>C题（分布式队列）、F题（星际旅行）</td></tr><tr><td><strong>搜索与回溯</strong></td><td>DFS&#x2F;BFS、剪枝</td><td>1</td><td>G题（LITS游戏）</td></tr><tr><td><strong>贪心算法</strong></td><td>资源分配策略</td><td>1</td><td>D题（食堂）</td></tr></tbody></table><p><strong>总结</strong>：本届试题以 <strong>数论和动态规划</strong> 为核心，占比约50%，同时结合了数据结构与模拟题，注重数学建模与算法优化能力。编程题（如F题星际旅行）可能涉及复杂场景的多维度分析，需综合运用图论和状态压缩技巧。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 真题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据结构实现详解</title>
      <link href="/2025/03/10/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/10/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据结构实现详解"><a href="#Java数据结构实现详解" class="headerlink" title="Java数据结构实现详解"></a>Java数据结构实现详解</h1><p>本文详细介绍了各种基本数据结构的Java实现，包括线性数据结构和非线性数据结构。每种数据结构都包含了基本操作方法、时间复杂度分析以及使用示例，可以作为学习数据结构与算法的参考资料。</p><h2 id="一、线性数据结构"><a href="#一、线性数据结构" class="headerlink" title="一、线性数据结构"></a>一、线性数据结构</h2><p>线性数据结构是一种数据元素之间存在一对一关系的数据结构，元素按照线性顺序排列。</p><h3 id="1-数组-Array"><a href="#1-数组-Array" class="headerlink" title="1. 数组 (Array)"></a>1. 数组 (Array)</h3><p>数组是最基本的数据结构，它在内存中是连续存储的，可以通过索引快速访问元素。</p><p><strong>特点：</strong></p><ul><li>固定大小（静态数组）或可动态调整大小（动态数组）</li><li>随机访问元素的时间复杂度为 O(1)</li><li>在数组中间插入或删除元素的时间复杂度为 O(n)</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>访问元素：O(1)</li><li>在末尾添加&#x2F;删除元素：O(1) 均摊</li><li>在中间添加&#x2F;删除元素：O(n)</li><li>查找元素：O(n)</li></ul><p><strong>数组结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">+---+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 | 6 |  -&gt; 索引: 0,1,2,3,4,5+---+---+---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>代码示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>      <span class="token comment">// 构造函数，传入数组的容量capacity构造Array</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 获取数组中的元素个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 获取数组的容量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 在index位置插入一个新元素e</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Add failed. Require index >= 0 and index &lt;= size."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> index <span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>            data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        size <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 获取index索引位置的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Get failed. Index is illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 修改index索引位置的元素为e</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Set failed. Index is illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 查找数组中是否有元素e</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 删除index位置的元素，返回删除的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Remove failed. Index is illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">E</span> ret <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 将数组空间的容量变成newCapacity大小</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            newData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> newData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>操作示意图：</strong></p><p>在索引2处插入元素：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">原数组：+---+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 | - |+---+---+---+---+---+---+移动元素：+---+---+---+---+---+---+| 1 | 2 | - | 3 | 4 | 5 |+---+---+---+---+---+---+插入新元素：+---+---+---+---+---+---+| 1 | 2 | 6 | 3 | 4 | 5 |+---+---+---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li>需要频繁随机访问元素的场景</li><li>数据量固定的场景</li><li>需要存储基本数据类型的场景</li><li>多维数据结构（如矩阵）的实现</li></ul><h3 id="2-链表-LinkedList"><a href="#2-链表-LinkedList" class="headerlink" title="2. 链表 (LinkedList)"></a>2. 链表 (LinkedList)</h3><p>链表是由一系列节点组成的线性集合，每个节点包含数据和指向下一个节点的引用。</p><h3 id="3-栈-Stack"><a href="#3-栈-Stack" class="headerlink" title="3. 栈 (Stack)"></a>3. 栈 (Stack)</h3><p>栈是一种后进先出（LIFO）的线性数据结构，只允许在一端（栈顶）进行插入和删除操作。</p><h2 id="二、树形数据结构"><a href="#二、树形数据结构" class="headerlink" title="二、树形数据结构"></a>二、树形数据结构</h2><p>树形数据结构是一种非线性数据结构，它以层次方式存储数据，每个节点可以有多个子节点。</p><h3 id="1-二叉树-Binary-Tree"><a href="#1-二叉树-Binary-Tree" class="headerlink" title="1. 二叉树 (Binary Tree)"></a>1. 二叉树 (Binary Tree)</h3><p>二叉树是每个节点最多有两个子节点的树形数据结构。</p><p><strong>二叉树的结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">    1   &#x2F; \  2   3 &#x2F; \   \4   5   6   &#x2F;  7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> data<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 层序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二叉搜索树-Binary-Search-Tree"><a href="#2-二叉搜索树-Binary-Search-Tree" class="headerlink" title="2. 二叉搜索树 (Binary Search Tree)"></a>2. 二叉搜索树 (Binary Search Tree)</h3><p>二叉搜索树是一种特殊的二叉树，它满足以下性质：</p><ul><li>左子树上所有节点的值均小于当前节点的值</li><li>右子树上所有节点的值均大于当前节点的值</li><li>左右子树也分别是二叉搜索树</li></ul><p><strong>二叉搜索树示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">    5   &#x2F; \  3   7 &#x2F; \   \2   4   8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> data<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 向二分搜索树中添加新的元素e</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 向以node为根的二分搜索树中插入元素e，递归算法</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查找二分搜索树中是否包含元素e</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 看以node为根的二分搜索树中是否包含元素e，递归算法</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除最小值所在节点，返回最小值</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> ret <span class="token operator">=</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">removeMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除以node为根的二分搜索树中的最小节点</span>    <span class="token comment">// 返回删除节点后新的二分搜索树的根</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rightNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">removeMin</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 寻找二分搜索树的最小元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"BST is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">minimum</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回以node为根的二分搜索树的最小值所在的节点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">minimum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li>文件系统的目录结构</li><li>数据库索引</li><li>表达式解析</li><li>优先队列实现</li></ul><h3 id="3-平衡二叉树-AVL-Tree"><a href="#3-平衡二叉树-AVL-Tree" class="headerlink" title="3. 平衡二叉树 (AVL Tree)"></a>3. 平衡二叉树 (AVL Tree)</h3><p>AVL树是一种自平衡二叉搜索树，任何节点的两个子树的高度差不超过1。</p><p><strong>AVL树的结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">  节点的平衡因子 &#x3D; 左子树高度 - 右子树高度     4(0)    &#x2F;    \ 2(-1)    6(0)  &#x2F;      &#x2F;   \1(0)   5(0)  7(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> data<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">// 获得节点的高度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获得节点的平衡因子</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 右旋转</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> x <span class="token operator">=</span> y<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token class-name">Node</span> <span class="token constant">T3</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>right <span class="token operator">=</span> y<span class="token punctuation">;</span>        y<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">T3</span><span class="token punctuation">;</span>        y<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 左旋转</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> x <span class="token operator">=</span> y<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token class-name">Node</span> <span class="token constant">T2</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> y<span class="token punctuation">;</span>        y<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">T2</span><span class="token punctuation">;</span>        y<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加新元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token comment">// 更新height</span>        node<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算平衡因子</span>        <span class="token keyword">int</span> balanceFactor <span class="token operator">=</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 平衡维护</span>        <span class="token comment">// LL</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balanceFactor <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// RR</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balanceFactor <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// LR</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balanceFactor <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// RL</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balanceFactor <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-红黑树-Red-Black-Tree"><a href="#4-红黑树-Red-Black-Tree" class="headerlink" title="4. 红黑树 (Red-Black Tree)"></a>4. 红黑树 (Red-Black Tree)</h3><p>红黑树是一种自平衡二叉搜索树，通过节点的颜色来维持树的平衡。</p><p><strong>红黑树的性质：</strong></p><ol><li>每个节点要么是红色，要么是黑色</li><li>根节点是黑色</li><li>每个叶子节点（NIL）是黑色</li><li>如果一个节点是红色的，则它的子节点必须是黑色的</li><li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</li></ol><p><strong>红黑树示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">       [B]7      &#x2F;    \   [B]3    [B]11    &#x2F;  \      \ [R]1  [R]5   [R]13[B] - 黑色节点[R] - 红色节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li>Java的TreeMap和TreeSet的底层实现</li><li>Linux内核中的完全公平调度器</li><li>数据库索引</li><li>文件系统</li></ul><h2 id="三、哈希表-Hash-Table"><a href="#三、哈希表-Hash-Table" class="headerlink" title="三、哈希表 (Hash Table)"></a>三、哈希表 (Hash Table)</h2><p>哈希表是一种通过哈希函数将键映射到值的数据结构，它提供了快速的插入、删除和查找操作。</p><p><strong>哈希表结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">index  →  链表（处理冲突） | [0] → [k1,v1] → [k5,v5] [1] → [k2,v2] [2] [3] → [k3,v3] [4] → [k4,v4] → [k6,v6] [5] [6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 计算哈希值</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> table<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token constant">LOAD_FACTOR</span><span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取元素</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除元素</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            prev <span class="token operator">=</span> node<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 扩容</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>oldTable<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> oldTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、图-Graph"><a href="#四、图-Graph" class="headerlink" title="四、图 (Graph)"></a>四、图 (Graph)</h2><p>图是一种由顶点和边组成的非线性数据结构，用于表示元素之间的关系。</p><p><strong>图的表示方法：</strong></p><ol><li>邻接矩阵：</li></ol><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">    A  B  C  DA   0  1  1  0B   1  0  1  1C   1  1  0  1D   0  1  1  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>邻接表：</li></ol><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">A → [B, C]B → [A, C, D]C → [A, B, D]D → [B, C]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现（邻接表）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">;</span>   <span class="token comment">// 顶点数</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token comment">// 邻接表</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">V</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加边</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 无向图实现</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 广度优先搜索</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 深度优先搜索</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token class-name">DFSUtil</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li>社交网络</li><li>地图导航</li><li>网络拓扑</li><li>任务调度</li></ul><p><strong>特点：</strong></p><ul><li>后进先出（LIFO）</li><li>只能从栈顶访问元素</li><li>可以用数组或链表实现</li></ul><p><strong>栈的结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">    ↑ 栈顶+---+| 4 |  &lt;- 最后入栈的元素+---+| 3 |+---+| 2 |+---+| 1 |  &lt;- 最先入栈的元素+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基于数组实现的栈：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Array</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> array<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 入栈操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 出栈操作</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查看栈顶元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-队列-Queue"><a href="#4-队列-Queue" class="headerlink" title="4. 队列 (Queue)"></a>4. 队列 (Queue)</h3><p>队列是一种先进先出（FIFO）的线性数据结构，只允许在一端（队尾）进行插入操作，在另一端（队首）进行删除操作。</p><p><strong>特点：</strong></p><ul><li>先进先出（FIFO）</li><li>队首删除，队尾添加</li><li>可以用数组或链表实现</li></ul><p><strong>队列的结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">队首 →  +---+---+---+---+        | 1 | 2 | 3 | 4 |  ← 队尾        +---+---+---+---+出队 ←   最先进入的元素   → 入队<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>循环队列实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircularQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CircularQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> front <span class="token operator">==</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> data<span class="token punctuation">.</span>length <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 入队操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Queue is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 出队操作</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Queue is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> ret <span class="token operator">=</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查看队首元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Queue is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li><p>栈：</p><ul><li>函数调用栈</li><li>表达式求值</li><li>括号匹配</li><li>浏览器前进&#x2F;后退功能</li></ul></li><li><p>队列：</p><ul><li>任务调度</li><li>消息队列</li><li>打印机打印任务</li><li>广度优先搜索</li></ul></li></ul><p><strong>特点：</strong></p><ul><li>动态大小</li><li>插入和删除操作简单</li><li>不支持随机访问</li></ul><p><strong>链表结构示意图：</strong></p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">单链表：+---+    +---+    +---+    +---+| 1 |-&gt;  | 2 |-&gt;  | 3 |-&gt;  | 4 |-&gt;  NULL+---+    +---+    +---+    +---+双向链表：+---+    +---+    +---+    +---+NULL &lt;-| 1 |&lt;-&gt; | 2 |&lt;-&gt; | 3 |&lt;-&gt; | 4 |-&gt;  NULL+---+    +---+    +---+    +---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要操作及时间复杂度：</strong></p><ul><li>访问元素：O(n)</li><li>在头部添加&#x2F;删除元素：O(1)</li><li>在尾部添加&#x2F;删除元素：O(n)（单链表）或 O(1)（带尾指针的链表）</li><li>在中间添加&#x2F;删除元素：O(n)</li></ul><p><strong>操作示意图：</strong></p><p>在位置2插入新节点：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">原链表：+---+    +---+    +---+    +---+| 1 |-&gt;  | 2 |-&gt;  | 3 |-&gt;  | 4 |+---+    +---+    +---+    +---+插入新节点：+---+    +---+    +---+    +---+    +---+| 1 |-&gt;  | 2 |-&gt;  | 5 |-&gt;  | 3 |-&gt;  | 4 |+---+    +---+    +---+    +---+    +---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> data<span class="token punctuation">;</span>       <span class="token comment">// 节点数据</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token comment">// 指向下一个节点的引用</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> dummyHead<span class="token punctuation">;</span>  <span class="token comment">// 虚拟头节点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token comment">// 链表大小</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取链表中的元素个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回链表是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在链表头添加新元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在链表末尾添加新元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在指定位置添加新元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Add failed. Illegal index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取指定位置的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Get failed. Illegal index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 修改指定位置的元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Set failed. Illegal index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查找链表中是否有元素e</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除指定位置的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Remove failed. Index is illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node</span> retNode <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> retNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        retNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retNode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li><p>需要频繁插入和删除元素的场景</p></li><li><p>不需要随机访问的场景</p></li><li><p>内存空间要求灵活的场景</p></li><li><p>实现其他数据结构（如栈、队列、哈希表的拉链法等）<br>prev &#x3D; prev.next;<br>}</p><p>Node retNode &#x3D; prev.next;<br>prev.next &#x3D; retNode.next;<br>retNode.next &#x3D; null;<br>size–;</p><p>return retNode.data;<br>}</p></li></ul><pre class="line-numbers language-none"><code class="language-none">### 3. 栈 (Stack)栈是一种后进先出(LIFO)的线性表，只能在一端（栈顶）进行插入和删除操作。**特点：**- 后进先出(LIFO)- 只能从栈顶访问元素**主要操作及时间复杂度：**- 压栈(push)：O(1)- 出栈(pop)：O(1)- 查看栈顶元素(peek)：O(1)**代码示例：**&#96;&#96;&#96;java&#x2F;&#x2F; 将元素压入栈顶public void push(E e) &#123;    array.addLast(e);&#125;&#x2F;&#x2F; 弹出栈顶元素public E pop() &#123;    return array.removeLast();&#125;&#x2F;&#x2F; 查看栈顶元素public E peek() &#123;    return array.getLast();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用场景：</strong></p><ul><li>函数调用栈</li><li>表达式求值</li><li>括号匹配</li><li>深度优先搜索</li></ul><h3 id="4-队列-Queue-1"><a href="#4-队列-Queue-1" class="headerlink" title="4. 队列 (Queue)"></a>4. 队列 (Queue)</h3><p>队列是一种先进先出(FIFO)的线性表，只能在一端（队尾）进行插入操作，在另一端（队头）进行删除操作。</p><p><strong>特点：</strong></p><ul><li>先进先出(FIFO)</li><li>只能从队头删除元素，从队尾添加元素</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>入队(enqueue)：O(1)</li><li>出队(dequeue)：O(1)</li><li>查看队首元素(front)：O(1)</li></ul><p><strong>应用场景：</strong></p><ul><li>任务调度</li><li>消息队列</li><li>广度优先搜索</li></ul><h2 id="二、非线性数据结构"><a href="#二、非线性数据结构" class="headerlink" title="二、非线性数据结构"></a>二、非线性数据结构</h2><p>非线性数据结构是一种数据元素之间存在一对多关系的数据结构，元素不是按照线性顺序排列的。</p><h3 id="1-树-Tree"><a href="#1-树-Tree" class="headerlink" title="1. 树 (Tree)"></a>1. 树 (Tree)</h3><p>树是一种层次结构，由节点组成，每个节点可以有多个子节点。</p><h4 id="1-1-二叉树-Binary-Tree"><a href="#1-1-二叉树-Binary-Tree" class="headerlink" title="1.1 二叉树 (Binary Tree)"></a>1.1 二叉树 (Binary Tree)</h4><p>二叉树是每个节点最多有两个子节点（左子节点和右子节点）的树结构。</p><p><strong>特点：</strong></p><ul><li>每个节点最多有两个子节点</li><li>具有层次结构</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>前序遍历：O(n)</li><li>中序遍历：O(n)</li><li>后序遍历：O(n)</li><li>层序遍历：O(n)</li></ul><p><strong>代码示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前序遍历</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 中序遍历</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序遍历</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-二叉搜索树-Binary-Search-Tree"><a href="#1-2-二叉搜索树-Binary-Search-Tree" class="headerlink" title="1.2 二叉搜索树 (Binary Search Tree)"></a>1.2 二叉搜索树 (Binary Search Tree)</h4><p>二叉搜索树是一种特殊的二叉树，对于树中的每个节点，其左子树中的所有节点的值都小于该节点的值，右子树中的所有节点的值都大于该节点的值。</p><p><strong>特点：</strong></p><ul><li>左子树上所有节点的值均小于根节点的值</li><li>右子树上所有节点的值均大于根节点的值</li><li>左右子树也分别为二叉搜索树</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>查找：平均 O(log n)，最坏 O(n)</li><li>插入：平均 O(log n)，最坏 O(n)</li><li>删除：平均 O(log n)，最坏 O(n)</li></ul><h4 id="1-3-平衡二叉树-AVL-Tree"><a href="#1-3-平衡二叉树-AVL-Tree" class="headerlink" title="1.3 平衡二叉树 (AVL Tree)"></a>1.3 平衡二叉树 (AVL Tree)</h4><p>平衡二叉树是一种特殊的二叉搜索树，它要求每个节点的左右子树的高度差不超过1。</p><p><strong>特点：</strong></p><ul><li>是一棵二叉搜索树</li><li>每个节点的左右子树的高度差不超过1</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>查找：O(log n)</li><li>插入：O(log n)</li><li>删除：O(log n)</li></ul><h3 id="2-堆-Heap"><a href="#2-堆-Heap" class="headerlink" title="2. 堆 (Heap)"></a>2. 堆 (Heap)</h3><p>堆是一种特殊的完全二叉树，分为最大堆和最小堆。</p><p><strong>特点：</strong></p><ul><li>最大堆：每个节点的值都大于或等于其子节点的值</li><li>最小堆：每个节点的值都小于或等于其子节点的值</li><li>是完全二叉树</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>插入元素：O(log n)</li><li>删除最大&#x2F;最小元素：O(log n)</li><li>获取最大&#x2F;最小元素：O(1)</li><li>构建堆：O(n)</li></ul><p><strong>应用场景：</strong></p><ul><li>优先队列</li><li>堆排序</li><li>图算法（如Dijkstra算法）</li></ul><h3 id="3-图-Graph"><a href="#3-图-Graph" class="headerlink" title="3. 图 (Graph)"></a>3. 图 (Graph)</h3><p>图是由顶点和边组成的非线性数据结构，用于表示物体之间的关系。</p><p><strong>特点：</strong></p><ul><li>由顶点和边组成</li><li>可以是有向的或无向的</li><li>可以是带权的或不带权的</li></ul><p><strong>表示方法：</strong></p><ul><li>邻接矩阵</li><li>邻接表</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>添加顶点：O(1)</li><li>添加边：O(1)</li><li>深度优先搜索(DFS)：O(V + E)，其中V为顶点数，E为边数</li><li>广度优先搜索(BFS)：O(V + E)</li><li>最短路径算法（如Dijkstra）：O(V^2 + E)或O((V+E)logV)（使用优先队列）</li><li>最小生成树算法（如Prim）：O(V^2)或O(ElogV)（使用优先队列）</li></ul><p><strong>代码示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加边</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token class-name">V</span> from<span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 确保顶点存在</span>    <span class="token function">addVertex</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fromIndex <span class="token operator">=</span> vertexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> toIndex <span class="token operator">=</span> vertexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加边</span>    adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>toIndex<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    edgeCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是无向图，则添加反向边</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 深度优先遍历</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfsHelper</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visited<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span> edge <span class="token operator">:</span> adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dfsHelper</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-哈希表-Hash-Table"><a href="#4-哈希表-Hash-Table" class="headerlink" title="4. 哈希表 (Hash Table)"></a>4. 哈希表 (Hash Table)</h3><p>哈希表是一种能够实现关联数组的数据结构，它通过哈希函数将键映射到值。</p><p><strong>特点：</strong></p><ul><li>通过键直接访问元素</li><li>平均查找、插入和删除时间复杂度为O(1)</li><li>可能存在哈希冲突</li></ul><p><strong>主要操作及时间复杂度：</strong></p><ul><li>插入：平均O(1)，最坏O(n)</li><li>查找：平均O(1)，最坏O(n)</li><li>删除：平均O(1)，最坏O(n)</li></ul><p><strong>解决哈希冲突的方法：</strong></p><ul><li>链地址法（拉链法）</li><li>开放地址法（线性探测、二次探测、双重哈希）</li></ul><p><strong>应用场景：</strong></p><ul><li>实现字典或映射</li><li>缓存实现</li><li>集合实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// List 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ArrayList 是基于动态数组实现的，适合频繁访问元素的场景。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在末尾添加一个元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial List: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size of List: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Is List empty? "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否为空</span>        <span class="token class-name">String</span> element <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取第i个元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Element at index 1: "</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Blueberry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将第i个元素设置为val</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated List: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared List: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Stack 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nStack Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Stack 是继承自 Vector 的后进先出 (LIFO) 栈。</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 压入元素</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial Stack: "</span> <span class="token operator">+</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size of Stack: "</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Is Stack empty? "</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈是否为空</span>        <span class="token keyword">int</span> topElement <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出栈顶元素，并返回栈顶元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Popped Element: "</span> <span class="token operator">+</span> topElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated Stack after pop: "</span> <span class="token operator">+</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> peekElement <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回栈顶元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Peeked Element: "</span> <span class="token operator">+</span> peekElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stack after peek: "</span> <span class="token operator">+</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared Stack: "</span> <span class="token operator">+</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Queue 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nQueue Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// LinkedList 实现了 Queue 接口，适合用作队列。</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在队尾添加元素</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial Queue: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size of Queue: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Is Queue empty? "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否为空</span>        <span class="token class-name">String</span> headElement <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除并返回队头</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Removed Element: "</span> <span class="token operator">+</span> headElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated Queue after remove: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> peekHead <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回队头</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Peeked Head Element: "</span> <span class="token operator">+</span> peekHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Queue after peek: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared Queue: "</span> <span class="token operator">+</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Set 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nSet Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HashSet 不允许重复元素，内部使用哈希表实现。</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Carrot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Broccoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Carrot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Duplicate, will not be added</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial Set: "</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size of Set: "</span> <span class="token operator">+</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回元素数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Does Set contain 'Carrot'? "</span> <span class="token operator">+</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Carrot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否包含某个元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Does Set contain 'Potato'? "</span> <span class="token operator">+</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Potato"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Broccoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated Set after remove: "</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared Set: "</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TreeSet 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nTreeSet Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TreeSet 不允许重复元素，内部使用红黑树实现，支持有序遍历。</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial TreeSet: "</span> <span class="token operator">+</span> treeSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ceiling of 4: "</span> <span class="token operator">+</span> treeSet<span class="token punctuation">.</span><span class="token function">ceiling</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回大于等于key的最小元素，不存在则返回null</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Floor of 6: "</span> <span class="token operator">+</span> treeSet<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回小于等于key的最大元素，不存在则返回null</span>        treeSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared TreeSet: "</span> <span class="token operator">+</span> treeSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Map 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nMap Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HashMap 使用哈希表实现，键值对存储，不允许重复键。</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加关键字和其对应的值</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial Map: "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size of Map: "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回元素数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Value for key 'Bob': "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回关键字对应的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Does Map contain key 'Alice'? "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否包含关键字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Does Map contain key 'David'? "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除关键字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated Map after remove: "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared Map: "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TreeMap 示例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nTreeMap Example:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TreeMap 使用红黑树实现，键值对存储，按键排序，不允许重复键。</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Eve"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加关键字和其对应的值</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Dan"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initial TreeMap: "</span> <span class="token operator">+</span> treeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Entry ceiling of 'Dean': "</span> <span class="token operator">+</span> treeMap<span class="token punctuation">.</span><span class="token function">ceilingEntry</span><span class="token punctuation">(</span><span class="token string">"Dean"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回大于等于key的最小元素，不存在则返回null</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Entry floor of 'George': "</span> <span class="token operator">+</span> treeMap<span class="token punctuation">.</span><span class="token function">floorEntry</span><span class="token punctuation">(</span><span class="token string">"George"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回小于等于key的最大元素，不存在则返回null</span>        treeMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cleared TreeMap: "</span> <span class="token operator">+</span> treeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>import java.util.*;</p><p>public class CollectionExample {<br>public static void main(String[] args) {<br>&#x2F;&#x2F; List 示例<br>System.out.println(“List Example:”);<br>&#x2F;&#x2F; ArrayList 是基于动态数组实现的，适合频繁访问元素的场景。<br>List<String> list &#x3D; new ArrayList&lt;&gt;();<br>list.add(“Apple”); &#x2F;&#x2F; 在末尾添加一个元素<br>list.add(“Banana”);<br>list.add(“Cherry”);</p><pre><code>System.out.println(&quot;Initial List: &quot; + list);System.out.println(&quot;Size of List: &quot; + list.size()); // 返回长度System.out.println(&quot;Is List empty? &quot; + list.isEmpty()); // 是否为空String element = list.get(1); // 获取第i个元素System.out.println(&quot;Element at index 1: &quot; + element);list.set(1, &quot;Blueberry&quot;); // 将第i个元素设置为valSystem.out.println(&quot;Updated List: &quot; + list);list.clear(); // 清空System.out.println(&quot;Cleared List: &quot; + list);// Stack 示例System.out.println(&quot;\nStack Example:&quot;);// Stack 是继承自 Vector 的后进先出 (LIFO) 栈。Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();stack.push(10); // 压入元素stack.push(20);stack.push(30);System.out.println(&quot;Initial Stack: &quot; + stack);System.out.println(&quot;Size of Stack: &quot; + stack.size()); // 返回长度System.out.println(&quot;Is Stack empty? &quot; + stack.empty()); // 栈是否为空int topElement = stack.pop(); // 弹出栈顶元素，并返回栈顶元素System.out.println(&quot;Popped Element: &quot; + topElement);System.out.println(&quot;Updated Stack after pop: &quot; + stack);int peekElement = stack.peek(); // 返回栈顶元素System.out.println(&quot;Peeked Element: &quot; + peekElement);System.out.println(&quot;Stack after peek: &quot; + stack);stack.clear(); // 清空System.out.println(&quot;Cleared Stack: &quot; + stack);// Queue 示例System.out.println(&quot;\nQueue Example:&quot;);// LinkedList 实现了 Queue 接口，适合用作队列。Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();queue.add(&quot;Red&quot;); // 在队尾添加元素queue.add(&quot;Green&quot;);queue.add(&quot;Blue&quot;);System.out.println(&quot;Initial Queue: &quot; + queue);System.out.println(&quot;Size of Queue: &quot; + queue.size()); // 返回长度System.out.println(&quot;Is Queue empty? &quot; + queue.isEmpty()); // 是否为空String headElement = queue.remove(); // 删除并返回队头System.out.println(&quot;Removed Element: &quot; + headElement);System.out.println(&quot;Updated Queue after remove: &quot; + queue);String peekHead = queue.peek(); // 返回队头System.out.println(&quot;Peeked Head Element: &quot; + peekHead);System.out.println(&quot;Queue after peek: &quot; + queue);queue.clear(); // 清空System.out.println(&quot;Cleared Queue: &quot; + queue);// Set 示例System.out.println(&quot;\nSet Example:&quot;);// HashSet 不允许重复元素，内部使用哈希表实现。Set&lt;String&gt; set = new HashSet&lt;&gt;();set.add(&quot;Carrot&quot;); // 添加元素set.add(&quot;Broccoli&quot;);set.add(&quot;Carrot&quot;); // Duplicate, will not be addedSystem.out.println(&quot;Initial Set: &quot; + set);System.out.println(&quot;Size of Set: &quot; + set.size()); // 返回元素数System.out.println(&quot;Does Set contain &#39;Carrot&#39;? &quot; + set.contains(&quot;Carrot&quot;)); // 是否包含某个元素System.out.println(&quot;Does Set contain &#39;Potato&#39;? &quot; + set.contains(&quot;Potato&quot;));set.remove(&quot;Broccoli&quot;); // 删除元素System.out.println(&quot;Updated Set after remove: &quot; + set);set.clear(); // 清空System.out.println(&quot;Cleared Set: &quot; + set);// TreeSet 示例System.out.println(&quot;\nTreeSet Example:&quot;);// TreeSet 不允许重复元素，内部使用红黑树实现，支持有序遍历。TreeSet&lt;Integer&gt; treeSet = new TreeSet&lt;&gt;();treeSet.add(5); // 添加元素treeSet.add(3);treeSet.add(8);System.out.println(&quot;Initial TreeSet: &quot; + treeSet);System.out.println(&quot;Ceiling of 4: &quot; + treeSet.ceiling(4)); // 返回大于等于key的最小元素，不存在则返回nullSystem.out.println(&quot;Floor of 6: &quot; + treeSet.floor(6)); // 返回小于等于key的最大元素，不存在则返回nulltreeSet.clear(); // 清空System.out.println(&quot;Cleared TreeSet: &quot; + treeSet);// Map 示例System.out.println(&quot;\nMap Example:&quot;);// HashMap 使用哈希表实现，键值对存储，不允许重复键。Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();map.put(&quot;Alice&quot;, 25); // 添加关键字和其对应的值map.put(&quot;Bob&quot;, 30);map.put(&quot;Charlie&quot;, 35);System.out.println(&quot;Initial Map: &quot; + map);System.out.println(&quot;Size of Map: &quot; + map.size()); // 返回元素数System.out.println(&quot;Value for key &#39;Bob&#39;: &quot; + map.get(&quot;Bob&quot;)); // 返回关键字对应的值System.out.println(&quot;Does Map contain key &#39;Alice&#39;? &quot; + map.containsKey(&quot;Alice&quot;)); // 是否包含关键字System.out.println(&quot;Does Map contain key &#39;David&#39;? &quot; + map.containsKey(&quot;David&quot;));map.remove(&quot;Bob&quot;); // 删除关键字System.out.println(&quot;Updated Map after remove: &quot; + map);map.clear(); // 清空System.out.println(&quot;Cleared Map: &quot; + map);// TreeMap 示例System.out.println(&quot;\nTreeMap Example:&quot;);// TreeMap 使用红黑树实现，键值对存储，按键排序，不允许重复键。TreeMap&lt;String, Integer&gt; treeMap = new TreeMap&lt;&gt;();treeMap.put(&quot;Eve&quot;, 28); // 添加关键字和其对应的值treeMap.put(&quot;Dan&quot;, 22);treeMap.put(&quot;Frank&quot;, 27);System.out.println(&quot;Initial TreeMap: &quot; + treeMap);System.out.println(&quot;Entry ceiling of &#39;Dean&#39;: &quot; + treeMap.ceilingEntry(&quot;Dean&quot;).getValue()); // 返回大于等于key的最小元素，不存在则返回nullSystem.out.println(&quot;Entry floor of &#39;George&#39;: &quot; + treeMap.floorEntry(&quot;George&quot;).getValue()); // 返回小于等于key的最大元素，不存在则返回nulltreeMap.clear(); // 清空System.out.println(&quot;Cleared TreeMap: &quot; + treeMap);</code></pre><p>}<br>}</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文详细介绍了各种基本数据结构的Java实现，包括线性数据结构（数组、链表、栈、队列）和非线性数据结构（树、堆、图、哈希表）。每种数据结构都有其特定的应用场景和性能特点，在实际编程中，需要根据具体问题选择合适的数据结构。</p><p>通过学习和掌握这些数据结构的实现原理和使用方法，可以提高编程效率和代码质量，为解决复杂问题打下坚实的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java蓝桥杯输入输出方法总结</title>
      <link href="/2025/03/10/Java%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/10/Java%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java蓝桥杯输入输出方法总结"><a href="#Java蓝桥杯输入输出方法总结" class="headerlink" title="Java蓝桥杯输入输出方法总结"></a>Java蓝桥杯输入输出方法总结</h1><p>在蓝桥杯竞赛中，合适的输入输出方法对提高程序运行效率至关重要。本文将系统地介绍Java中各种输入输出方法，并提供性能对比分析。</p><h2 id="1-Scanner类"><a href="#1-Scanner类" class="headerlink" title="1. Scanner类"></a>1. Scanner类</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取整数</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取字符串</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取一整行</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取浮点数</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-优缺点"><a href="#1-2-优缺点" class="headerlink" title="1.2 优缺点"></a>1.2 优缺点</h3><ul><li>优点：使用简单，功能齐全</li><li>缺点：性能较差，不适合大量数据的输入</li></ul><h2 id="2-BufferedReader类"><a href="#2-BufferedReader类" class="headerlink" title="2. BufferedReader类"></a>2. BufferedReader类</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取一行字符串</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取整数</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取空格分隔的多个整数</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-优缺点"><a href="#2-2-优缺点" class="headerlink" title="2.2 优缺点"></a>2.2 优缺点</h3><ul><li>优点：效率高，适合处理大量数据</li><li>缺点：使用相对复杂，需要处理IOException</li></ul><h2 id="3-StreamTokenizer类"><a href="#3-StreamTokenizer类" class="headerlink" title="3. StreamTokenizer类"></a>3. StreamTokenizer类</h2><h3 id="3-1-基本用法"><a href="#3-1-基本用法" class="headerlink" title="3.1 基本用法"></a>3.1 基本用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StreamTokenizer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StreamTokenizer</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamTokenizer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取数字</span>        st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span>nval<span class="token punctuation">;</span>                <span class="token comment">// 读取字符串</span>        st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> st<span class="token punctuation">.</span>sval<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-优缺点"><a href="#3-2-优缺点" class="headerlink" title="3.2 优缺点"></a>3.2 优缺点</h3><ul><li>优点：自动分词，处理数字和字符串方便</li><li>缺点：使用较为复杂</li></ul><h2 id="4-快读快写模板"><a href="#4-快读快写模板" class="headerlink" title="4. 快读快写模板"></a>4. 快读快写模板</h2><h3 id="4-1-基于BufferedReader的快读模板"><a href="#4-1-基于BufferedReader的快读模板" class="headerlink" title="4.1 基于BufferedReader的快读模板"></a>4.1 基于BufferedReader的快读模板</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FastReader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StringTokenizer</span> st<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">FastReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>st <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FastReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-基于字节流的极速读写模板"><a href="#4-2-基于字节流的极速读写模板" class="headerlink" title="4.2 基于字节流的极速读写模板"></a>4.2 基于字节流的极速读写模板</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UltraIO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataInputStream</span> din<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataOutputStream</span> dout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bufferPointer<span class="token punctuation">,</span> bytesRead<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">UltraIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        din <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        dout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bufferPointer <span class="token operator">=</span> bytesRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于存储输入的字符</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            buf<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token char">' '</span><span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> neg <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>neg<span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> ret <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>neg<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ret<span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fillBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        bytesRead <span class="token operator">=</span> din<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> bufferPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferPointer <span class="token operator">==</span> bytesRead<span class="token punctuation">)</span> <span class="token function">fillBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">[</span>bufferPointer<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>din <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        din<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UltraIO</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UltraIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-性能对比"><a href="#5-性能对比" class="headerlink" title="5. 性能对比"></a>5. 性能对比</h2><p>以下是各种输入方法读取100万个整数的性能对比：</p><ol><li>Scanner：约2000ms</li><li>BufferedReader：约500ms</li><li>StreamTokenizer：约400ms</li><li>FastReader：约300ms</li><li>UltraIO：约150ms</li></ol><h2 id="6-使用建议"><a href="#6-使用建议" class="headerlink" title="6. 使用建议"></a>6. 使用建议</h2><ol><li>对于简单题目或数据量较小的情况，使用Scanner即可</li><li>对于数据量中等的题目，使用BufferedReader或FastReader</li><li>对于数据量极大或对时间要求极高的题目，使用UltraIO模板</li><li>在实际比赛中，建议将快读模板代码准备好，以备不时之需</li></ol><h2 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h2><ol><li>使用Scanner时注意nextInt()和nextLine()混用可能导致的问题</li><li>BufferedReader必须处理IOException</li><li>在使用完输入流后记得关闭(close)</li><li>对于竞赛中的多组输入，注意处理输入结束的条件</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在蓝桥杯竞赛中，选择合适的输入输出方法可以显著提高程序的运行效率。对于不同的题目要求，应当灵活选择合适的输入方法。建议平时多加练习各种输入方法的使用，以便在比赛中得心应手。</p>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机专业竞赛推荐</title>
      <link href="/2025/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%AB%9E%E8%B5%9B%E6%8E%A8%E8%8D%90/"/>
      <url>/2025/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%AB%9E%E8%B5%9B%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机专业竞赛推荐（2025年6月前）"><a href="#计算机专业竞赛推荐（2025年6月前）" class="headerlink" title="计算机专业竞赛推荐（2025年6月前）"></a>计算机专业竞赛推荐（2025年6月前）</h1><table><thead><tr><th>序号</th><th>竞赛名称</th><th>主办单位</th><th>技术分类</th><th>官网链接</th><th>参赛时间</th><th>备注</th></tr></thead><tbody><tr><td>4</td><td>ACM-ICPC国际大学生程序设计竞赛</td><td>国际计算机协会</td><td>算法与程序设计</td><td><a href="https://icpc.global/">icpc.global</a></td><td>2024.9-2025.11</td><td>算法竞赛殿堂级赛事</td></tr><tr><td>34</td><td>蓝桥杯全国软件人才大赛</td><td>工业和信息化部</td><td>软件开发&#x2F;算法</td><td><a href="https://dasai.lanqiao.cn/">lanqiao.cn</a></td><td>2025.4&#x2F;6月决赛</td><td>国内规模最大的IT类赛事</td></tr><tr><td>8</td><td>全国大学生信息安全竞赛</td><td>教育部</td><td>网络安全</td><td><a href="https://www.ciscn.cn/">ciscn.cn</a></td><td>2025.5-6</td><td>CTF夺旗赛形式</td></tr><tr><td>26</td><td>中国软件杯大赛</td><td>工信部&#x2F;教育部</td><td>软件工程</td><td><a href="http://www.cnsoftbei.com/">cnsoftbei.com</a></td><td>2025.3-8</td><td>企业命题开发</td></tr><tr><td>33</td><td>中国高校计算机大赛</td><td>教育部</td><td>综合能力</td><td><a href="https://www.ccf.org.cn/">ccf.org.cn</a></td><td>2025.3-8</td><td>包含5个子赛事</td></tr><tr><td>16</td><td>外研社·国才杯外语能力大赛</td><td>外研社</td><td>英语应用</td><td><a href="https://ucc.fltrp.com/">https://ucc.fltrp.com/</a></td><td>2025.3-11</td><td>含编程文档阅读能力</td></tr><tr><td>43</td><td>华为ICT大赛</td><td>华为技术有限公司</td><td>网络技术</td><td><a href="https://e.huawei.com/cn/talent/#/ict/competition">e.huawei.com</a></td><td>2025.3-6</td><td>云计算&#x2F;网络赛道</td></tr><tr><td>22</td><td>西门子杯智能制造挑战赛</td><td>教育部</td><td>工业软件</td><td><a href="http://www.siemenscup-cimc.org.cn/">siemenscup-cimc.org.cn</a></td><td>2025.3-8</td><td>智能制造系统开发</td></tr><tr><td>58</td><td>百度之星程序设计大赛</td><td>百度公司</td><td>算法竞赛</td><td><a href="https://astar.baidu.com/">astar.baidu.com</a></td><td>2025.5-8</td><td>企业级算法赛事</td></tr><tr><td>63</td><td>全国计算机系统能力大赛</td><td>教育部</td><td>系统开发</td><td><a href="https://os.educg.net/#/">https://os.educg.net/#/</a></td><td>2025.4-8</td><td>操作系统&#x2F;编译系统设计</td></tr></tbody></table><p><strong>备注说明</strong>：</p><ol><li>算法类：ACM-ICPC&#x2F;蓝桥杯&#x2F;百度之星（侧重数据结构与算法）</li><li>开发类：中国软件杯&#x2F;华为ICT大赛（侧重项目设计与实现）</li><li>系统类：计算机系统能力大赛（侧重底层系统开发）</li><li>创新类：挑战杯&#x2F;互联网+（侧重商业计划与技术创新结合）</li></ol><p>（注：具体参赛时间以2025年各赛事官方通知为准）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机专业 </category>
          
          <category> 竞赛推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机专业 </tag>
            
            <tag> 竞赛推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更新GitHub博客</title>
      <link href="/2025/03/10/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0GitHub%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/03/10/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0GitHub%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="如何更新GitHub博客"><a href="#如何更新GitHub博客" class="headerlink" title="如何更新GitHub博客"></a>如何更新GitHub博客</h1><p>本文将介绍如何使用Hexo框架更新部署在GitHub Pages上的博客。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始之前，确保你已经安装了以下工具：</p><ul><li>Node.js和npm</li><li>Git</li><li>Hexo CLI</li></ul><h2 id="更新博客的步骤"><a href="#更新博客的步骤" class="headerlink" title="更新博客的步骤"></a>更新博客的步骤</h2><h3 id="1-创建新文章"><a href="#1-创建新文章" class="headerlink" title="1. 创建新文章"></a>1. 创建新文章</h3><p>使用以下命令创建一篇新文章：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"文章标题"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将在<code>source/_posts</code>目录下创建一个新的Markdown文件。</p><h3 id="2-编辑文章"><a href="#2-编辑文章" class="headerlink" title="2. 编辑文章"></a>2. 编辑文章</h3><p>使用你喜欢的文本编辑器打开新创建的Markdown文件，编辑文章内容。Markdown文件的开头是文章的前置信息，包括标题、日期、标签等。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 文章标题<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-01-01 12:00:00</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>标签1<span class="token punctuation">,</span> 标签2<span class="token punctuation">]</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>分类<span class="token punctuation">]</span></span><span class="token punctuation">---</span></span>这里是文章内容...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-本地预览"><a href="#3-本地预览" class="headerlink" title="3. 本地预览"></a>3. 本地预览</h3><p>编辑完成后，可以在本地预览效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean   <span class="token comment"># 清除之前生成的文件</span>$ hexo server  <span class="token comment"># 启动本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 <code>http://localhost:4000</code> 查看效果。</p><h3 id="4-生成静态文件"><a href="#4-生成静态文件" class="headerlink" title="4. 生成静态文件"></a>4. 生成静态文件</h3><p>确认没有问题后，生成静态文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate  <span class="token comment"># 或简写为 hexo g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-部署到GitHub"><a href="#5-部署到GitHub" class="headerlink" title="5. 部署到GitHub"></a>5. 部署到GitHub</h3><p>最后，将生成的静态文件部署到GitHub：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy  <span class="token comment"># 或简写为 hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以合并生成和部署步骤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate <span class="token parameter variable">--deploy</span>  <span class="token comment"># 或简写为 hexo g -d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>除了手动部署外，还可以设置GitHub Actions实现自动部署。每当你推送更改到GitHub仓库时，GitHub Actions会自动构建并部署你的博客。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="部署失败"><a href="#部署失败" class="headerlink" title="部署失败"></a>部署失败</h3><p>如果部署失败，可能是以下原因：</p><ol><li>Git配置问题：确保已正确配置Git用户名和邮箱</li><li>SSH密钥问题：确保已添加SSH密钥到GitHub账户</li><li>权限问题：确保有权限推送到目标仓库</li></ol><h3 id="主题更新"><a href="#主题更新" class="headerlink" title="主题更新"></a>主题更新</h3><p>如果使用的是第三方主题（如Butterfly），更新主题的方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> themes/butterfly$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以轻松地更新你的GitHub博客。定期更新内容，保持博客活跃，吸引更多读者。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅苹果书读书学习笔记</title>
      <link href="/2025/03/10/%E6%9D%8E%E5%AE%8F%E6%AF%85%E8%8B%B9%E6%9E%9C%E4%B9%A6%E8%AF%BB%E4%B9%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/10/%E6%9D%8E%E5%AE%8F%E6%AF%85%E8%8B%B9%E6%9E%9C%E4%B9%A6%E8%AF%BB%E4%B9%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h1><ul><li><input checked="" disabled="" type="checkbox"> Task 1 《深度学习详解》- 1.1 通过案例了解机器学习</li><li><input checked="" disabled="" type="checkbox"> Task 2 《深度学习详解》- 1.2 了解线性模型</li><li><input checked="" disabled="" type="checkbox"> Task 3 《深度学习详解》- 2 机器学习框架&amp;实践攻略</li></ul><hr><h1 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h1><blockquote><p>欢迎去大家各大电商平台选购纸质版苹果书《深度学习详解》<br>基于上述书籍拓展</p></blockquote><blockquote><p>引用内容为书本原话 图片基本上来源于书中<br>我以自问自答的方式输出内容</p></blockquote><hr><h1 id="Task-1-通过案例了解机器学习"><a href="#Task-1-通过案例了解机器学习" class="headerlink" title="Task 1 通过案例了解机器学习"></a>Task 1 通过案例了解机器学习</h1><hr><h2 id="机器学习（Machine-Learning，ML）和深度学习（Deep-Learning，DL）的基本概念"><a href="#机器学习（Machine-Learning，ML）和深度学习（Deep-Learning，DL）的基本概念" class="headerlink" title="机器学习（Machine Learning，ML）和深度学习（Deep Learning，DL）的基本概念"></a>机器学习（Machine Learning，ML）和深度学习（Deep Learning，DL）的基本概念</h2><blockquote><p>什么是机器学习</p></blockquote><p>人工智能的一个分支。机器学习范畴比人工智能概念略小，深度学习的底层是神经网络。机器学习是指用计算机模拟人类学习行为的的技术用来从已知的数据中获取新的知识。</p><blockquote><p>机器学习，顾名思义，<strong>机器具备有学习的能力</strong>。具体来讲，机器学习就是让机器<strong>具备找一个函数的能力</strong>。机器具备找函数的能力以后，它可以做很多事。</p></blockquote><blockquote><p>比如语音识别，机器听一段声音，产生这段声音对应的文字。我们需要的是一个函数，该函数的输入是声音信号，输出是这段声音信号的内容。</p></blockquote><p> 就是让机器的输入映射到某个函数之后可以得到输出</p><h2 id="什么是回归（regression）"><a href="#什么是回归（regression）" class="headerlink" title="什么是回归（regression）"></a>什么是回归（regression）</h2><blockquote><p><strong>随着要找的函数不同，机器学习有不同的类别</strong>。假设要找的函数的<strong>输出是一个数值，一个标量（scalar）</strong>，这种机器学习的任务称为回归</p></blockquote><blockquote><p>机器要找一个<strong>函数 f</strong>，其输入是可能是<strong>种种跟预测 PM2.5 有关的指数</strong>，包括今天的 PM2.5 的数值、平均温度、平均的臭氧浓度等等，<strong>输出是明天中午的 PM2.5的数值</strong>,找这个函数的任务称为回归（regression）</p></blockquote><p>机器要找一个函数f(x)，其输入是可能是与预测目标有关的数值x，输出是对于下一次的预测值f(x)，找这个函数的任务称为回归（regression）。</p><blockquote><p><strong>隐藏任务①：</strong> 找出本篇中形如回归（regression）加粗字体的术语，并用自己的话进行解释，列成表格，与学习群的其他小伙伴讨论你的理解和搜索到的相关案例</p></blockquote><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>分类</td><td>将数据划分为多个离散的类别的任务，预测输入的样本所属的类别</td></tr><tr><td>回归</td><td>通过对输入数据进行学习，建立一个连续的函数关系，预测数值型的输出结果</td></tr><tr><td>机器学习</td><td>一种从数据中自动学习模式和模型的方法，使计算机能够根据之前的经验来进行预测或决策</td></tr><tr><td>深度学习</td><td>一种机器学习的子领域，通过模拟人脑的神经网络结构，对大规模数据进行学习和表达复杂模式</td></tr><tr><td>损失</td><td>衡量预测的输出与实际值之间的差异的函数，用于评估模型的训练效果</td></tr><tr><td>梯度下降</td><td>一种优化算法，通过反复迭代的方式，沿着目标函数的负梯度方向调整模型参数的值，以最小化损失函数</td></tr></tbody></table><h2 id="什么是分类（classification）"><a href="#什么是分类（classification）" class="headerlink" title="什么是分类（classification）"></a>什么是分类（classification）</h2><blockquote><p>分类任务要让机器<strong>做选择题。<strong>人类先</strong>准备好一些选项，这些选项称为类别（class）</strong>，现在要找的函数的输出就是从设定好的选项里面<strong>选择一个当作输出，该任务称为分类。</strong><br>举个例子，每个人都有邮箱账户，邮箱账户里面有一个函数，该函数可以检测一封邮件是否为垃圾邮件。<strong>分类不一定只有两个选项，也可以有多个选项。</strong></p></blockquote><p>根据某些特征把不同数据分成不同的类别。</p><h2 id="什么是结构化学习"><a href="#什么是结构化学习" class="headerlink" title="什么是结构化学习"></a>什么是结构化学习</h2><blockquote><p>机器不只是要做选择题或输出一个数字，而是产生一个有结构的物体，比如让机器画一张图，写一篇文章。这种叫机器产生有结构的东西的问题称为结构化学习。</p></blockquote><p>就是根据输入的东西的某种规律生产某种相似结构的东西</p><h2 id="机器学习找函数的三个步骤"><a href="#机器学习找函数的三个步骤" class="headerlink" title="机器学习找函数的三个步骤"></a>机器学习找函数的三个步骤</h2><blockquote><p>隐藏任务③：找出机器学习找函数的3个步骤！并查找资料，交叉佐证这些步骤。</p></blockquote><blockquote><p>机器学习找函数的过程，分成3个步骤。</p></blockquote><h3 id="第1个步骤是写出一个带有未知参数的函数f，其能预测未来观看次数。"><a href="#第1个步骤是写出一个带有未知参数的函数f，其能预测未来观看次数。" class="headerlink" title="第1个步骤是写出一个带有未知参数的函数f，其能预测未来观看次数。"></a>第1个步骤是写出一个带有未知参数的函数<code>f</code>，其能预测未来观看次数。</h3><blockquote><p>y &#x3D; b + w ∗ x1，而 b 跟 w 是未知的。<br><strong>带有未知的参数（parameter）的函数称为模型（model）。</strong><br>模型在机器学习里面，就是一个带有未知的参数的函数，特征（feature）  $x_1$ 是这个函数里面已知的，它是来自于后台的信息，2 月 25 日点击的总次数是已知的，而 w 跟 b 是未知的参数。<br><strong>w 称为权重（weight），b 称为偏置（bias）。</strong></p></blockquote><h3 id="第2个步骤是定义损失（loss），损失也是一个函数。"><a href="#第2个步骤是定义损失（loss），损失也是一个函数。" class="headerlink" title="第2个步骤是定义损失（loss），损失也是一个函数。"></a>第2个步骤是定义损失（loss），损失也是一个函数。</h3><blockquote><p>估测的值跟实际的值之间的差距，其实有不同的计算方法，计算 y 与 yˆ 之间绝对值的差距，如式 (1.6) 所示，称为平均绝对误差（Mean Absolute Error，MAE）</p><p><img src="/img/downloaded/aHR0cHM6_33d3ffa7ce6d47cbacd0f5fcc1211984.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>如果算 y 与 yˆ 之间平方的差距，如式 (1.7) 所示，则称为均方误差（Mean SquaredError，MSE）。<br><img src="/img/downloaded/aHR0cHM6_8882f24dbc85463d87b8b1ac62bf69e2.png" alt="在这里插入图片描述"></p><p>有一些任务中 y 和 yˆ 都是概率分布，这个时候可能会选择<strong>交叉熵</strong>（cross entropy），这个是机器学习的第 2 步。</p></blockquote><p><strong>交叉熵</strong>是信息论中用来度量两个概率分布之间差异的一种方法。在机器学习中，<strong>交叉熵</strong>经常被用来作为损失函数，用来度量预测结果与真实结果之间的差异。</p><p>对于分类问题，<strong>交叉熵</strong>可以用来度量预测结果的概率分布与真实结果的概率分布之间的差异。<strong>交叉熵</strong>的计算公式如下：</p><p>$$H(p,q) &#x3D; -∑ p(x) * log(q(x))$$</p><p>其中，<code>p(x)</code>表示真实结果的概率分布，<code>q(x)</code>表示预测结果的概率分布。</p><p><strong>交叉熵</strong>的值越小，表示预测结果与真实结果越接近，模型的性能也越好。因此，通过最小化<strong>交叉熵</strong>，可以优化模型的预测能力。</p><p>在深度学习中，<strong>交叉熵</strong>通常作为损失函数与激活函数一起使用，用来训练神经网络模型。通过反向传播算法，可以根据<strong>交叉熵</strong>的值来调整模型的参数，使得模型的预测结果与真实结果更加接近。</p><h3 id="机器学习的第-3-步：解一个最优化的问题。"><a href="#机器学习的第-3-步：解一个最优化的问题。" class="headerlink" title="机器学习的第 3 步：解一个最优化的问题。"></a>机器学习的第 3 步：解一个最优化的问题。</h3><blockquote><p>找一个 <code>w</code> 跟 <code>b</code>，把未知的参数找一个数值出来，看代哪一个数值进去可以让损失 L 的值最小，就是要找的 <code>w</code> 跟 <code>b</code>，这个可以让损失最小的 <code>w</code> 跟 <code>b</code> 称为 <code>w∗</code> 跟 <code>b∗</code> 代表它们是最好的一组 <code>w</code> 跟 <code>b</code>，可以让损失的值最小。</p></blockquote><p><strong>梯度下降</strong>（gradient descent）是经常会使用优化的方法。</p><blockquote><p>试了不同的参数，计算它的损失，画出来的等高线图称为误差表面（error surface）。<br>在这个等高线图上面，越偏红色系，代表计算出来的损失越大，就代表这一组 w 跟 b 越差。如果越偏蓝色系，就代表损失越小，就代表这一组 w 跟 b 越好，拿这一组 w 跟 b，放到函数里面，预测会越精准。<img src="/img/downloaded/aHR0cHM6_e19efe52835c4b9696362974134bfb53.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>学习率（learning rate）η 也会影响步伐大小</strong>。<br>学习率是自己设定的，如果 η 设大一点，每次参数更新就会量大，学习可能就比较快。如果 η 设小一点，参数更新就很慢，每次只会改变一点点参数的数值。<br><strong>这种在做机器学习，需要自己设定，不是机器自己找出来的，称为超参数（hyperparameter）。</strong></p></blockquote><h2 id="为什么损失可以是负的？"><a href="#为什么损失可以是负的？" class="headerlink" title="为什么损失可以是负的？"></a>为什么损失可以是负的？</h2><p><img src="/img/downloaded/aHR0cHM6_54e8e9e426724a82a147d4b0b957959b.png" alt="在这里插入图片描述"></p><h2 id="梯度下降有一个很大的问题"><a href="#梯度下降有一个很大的问题" class="headerlink" title="梯度下降有一个很大的问题"></a>梯度下降有一个很大的问题</h2><blockquote><p><strong>梯度下降</strong>有一个很大的问题，没有找到真正最好的解，没有找到可以让损失最小的 w。<br>在图 1.4 所示的例子里面，把 w 设定在最右侧红点附近这个地方可以让损失最小。但如果在<strong>梯度下降</strong>中，$w^0$ 是随机初始的位置，也很有可能走到 wT 这里，训练就停住了，无法再移动 w 的位置。右侧红点这个位置是真的可以让损失最小的地方，称为全局最小值（global minima），而 wT 这个地方称为局部最小值（local minima），其左右两边都比这个地方的损失还要高一点，但是它不是整个误差表面上面的最低点。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_5ef2f64926e348afbbbeea25588742c7.png" alt="在这里插入图片描述"><br>推广到多参数(w,b)的话</p><blockquote><p>假设有两个参数，随机初始值为 $w^0$, $b^0$。要计算 w, b 跟损失的微分，计算在 w &#x3D; $w^0$ 的位置，b &#x3D; $b^0$ 的位置，要计算 w 对 L 的微分，计算 b 对 L 的微分计算完后更新 w 跟 b，把 $w^0$ 减掉学习率乘上微分的结果得到 ，把 $b^0$ 减掉学习率乘上微分的结果得到 $b^1$。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_a7b5317aebaf45f89cd8ec94c022e6f4.png" alt="在这里插入图片描述"></p><p><img src="/img/downloaded/aHR0cHM6_3452064a661c4ec0b08939074d5e2262.png"></p><blockquote><p>就是反复同样的步骤，就不断的更新 <code>w</code> 跟 <code>b</code>，期待最后，可以找到一个最好的 <code>w</code>，w∗ 跟最好的 <code>b∗</code>. 如图 1.5 所示，随便选一个初始的值，先计算一下 <code>w</code> 对 L 的微分，跟计算一下 <code>b</code> 对 L 的微分，接下来更新 <code>w</code> 跟 <code>b</code>，更新的方向就是 <code>∂L/∂w</code>，乘以 η 再乘以一个负号，∂L&#x2F;∂b，算出这个微分的值，就可以决定更新的方向，可以决定 <code>w</code> 要怎么更新。把 <code>w</code> 跟 <code>b</code> 更新的方向结合起来，就是一个向量，就是红色的箭头，再计算一次微分，再决定要走什么样的方向，把这个微分的值乘上学习率，再乘上负号，我们就知道红色的箭头要指向那里，就知道如何移动 <code>w</code> 跟 <code>b</code> 的位置，一直移动，期待最后可以找出一组不错的 <code>w</code>, <code>b</code>。</p></blockquote><h1 id="Task-2-了解线性模型"><a href="#Task-2-了解线性模型" class="headerlink" title="Task 2  了解线性模型"></a>Task 2  了解线性模型</h1><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>书中举例了一个预测观看人数的例子 </p><blockquote><p>每隔 7 天它一个循环，如果一个模型参考前 7 天的数据，把 7天前的数据，直接复制到拿来当作预测的结果，也许预测的会更准也说不定，所以我们就要修改一下模型。通常一个模型的修改，往往来自于对这个问题的理解，即<strong>领域知识</strong>。</p></blockquote><p>机器学习领域的领域知识是指机器学习算法、技术和应用方面的专业知识。<br>包括机器学习算法、数据预处理、特征工程、模型评估和选择的知识。</p><blockquote><p>这些模型都是把输入的特征 x 乘上一个权重，再加上一个偏置就得到预测的结果，这样的模型称为<strong>线性模型（linear model）</strong>。</p></blockquote><h3 id="分段线性曲线"><a href="#分段线性曲线" class="headerlink" title="分段线性曲线"></a>分段线性曲线</h3><blockquote><p>红色的曲线可以看作是一个常数再加上一群 Hard <code>Sigmoid </code>函数。Hard <code>Sigmoid </code>函数的特性是当输入的值，当 x 轴的值小于某一个阈值（某个定值）的时候，大于另外一个定值阈值的时候，中间有一个斜坡。所以它是先水平的，再斜坡，再水平的。所以红色的线可以看作是一个常数项加一大堆的蓝色函数（Hard Sigmoid）。常数项设成红色的线跟 x 轴的交点一样大。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_3b3eda53be35441bb2e996c427b449c2.png" alt="在这里插入图片描述"></p><blockquote><p>常数项怎么加上蓝色函数后，变成红色的这一条线?</p><ol><li>蓝线 1 函数斜坡的起点，设在红色函数的起始的地方，第 2 个斜坡的终点（最高点）|（第 1 个蓝色函数斜坡的终点） 设在第一个转角处，让第 1 个蓝色函数的斜坡和红色函数的斜坡的斜率是一样的，这个时候把 线0+线1 就可以得到红色曲线左侧的线段。</li><li>再加第 2 个蓝色的函数，所以第2 个蓝色函数的斜坡就在红色函数的第一个转折点到第 2 个转折点之间，让第 2 个蓝色函数的斜率跟红色函数的斜率一样，这个时候把 线0+线1+线2，就可以得到红色函数左侧和中间的线段。</li><li>接下来第 3 个部分，第 2 个转折点之后的部分，就加第 3 个蓝色的函数，第 3 个蓝色的函数坡度的起始点设的跟红色函数转折点一样，蓝色函数的斜率设的跟红色函数斜率一样</li><li>接下来把 线0+线1+线2+线3全部加起来，就得到完整红色的线。<br>(线0、线1、线2、线3 为图1.8中线段）</li></ol></blockquote><p><img src="/img/downloaded/aHR0cHM6_e394f591a7d44639bf1f9ec056473cba.png" alt="在这里插入图片描述"></p><blockquote><p>所以红色线，即分段线性曲线（piecewise linear curve）可以看作是一个常数，再加上一堆蓝色的函数。</p></blockquote><p>大量不同的蓝色函数，加上一个常数以后就可以组出任意的分段线性曲线。<br>如果分段线性曲线越复杂，转折的点越多，所需的蓝色函数就越多。<br>反之，越多蓝色函数的话可以组成越复杂的分段线性曲线。</p><p><strong>可以在这样的曲线（图1.9）上面，先取一些点并连起来变成一个分段线性曲线。这个分段线性曲线跟非常接近原来的曲线，如果点取的够多或点取的位置适当，分段线性曲线就可以逼近这一个连续的曲线。</strong> </p><p><img src="/img/downloaded/aHR0cHM6_85ca75a8ba474157864729b726d34f20.png" alt="在这里插入图片描述"></p><blockquote><p>所以可以用分段线性曲线去逼近任何的连续的曲线，而每个分段线性曲线都可以用一大堆蓝色的函数组合起来。也就是说，只要有足够的蓝色函数把它加起来，就可以变成任何连续的曲线。</p></blockquote><p>我们可以用任意多的蓝色函数来模拟出曲线。<br>极限的思路来看：就是只有取得足够多的点并且相连接，就可以无限多的直线代替曲线。</p><h3 id="如何表示方程"><a href="#如何表示方程" class="headerlink" title="如何表示方程"></a>如何表示方程</h3><p><img src="/img/downloaded/aHR0cHM6_9db4a3d0ece343c4be8e5a2c18926e4a.png" alt="在这里插入图片描述"></p><blockquote><p>如果 x1 的值，趋近于无穷大的时候，e−(b+wx1) 这一项就会消失，当 x1 非常大的时候，这一条就会收敛在高度为 c 的地方。如果 x1 负的非常大的时候，分母的地方就会非常大，y的值就会趋近于 0。<br>所以可以用这样子的一个函数逼近这一个蓝色的函数，即 <code>Sigmoid </code>函数，<code>Sigmoid </code>函数就是 S 型的函数。<br>因为它长得是有点像是 S 型，所以叫它 <code>Sigmoid </code>函数。为了简洁，去掉了指数的部分，蓝色函数的表达式为</p></blockquote><p>$$y &#x3D; cσ(b + wx1) (1.15)$$</p><blockquote><p>所以可以用 <code>Sigmoid </code>函数逼近 Hard <code>Sigmoid </code>函数。</p></blockquote><p>$$<br>y &#x3D; \frac{c}{ 1+ e^{-(b+wx1)}}<br>$$</p><blockquote><p><strong>调整这里的 <code>b</code>、<code>w </code>和 <code>c</code> 可以制造各种不同形状的 <code>Sigmoid </code>函数，</strong> 用各种不同形状的 Sigmoid函数去逼近 Hard <code>Sigmoid </code>函数。</p></blockquote><blockquote><p>如图 1.11 所示，如果改 w，就会改变斜率，就会改变斜坡的坡度。如果改了 <code>b</code>，就可以把这一个 <code>Sigmoid </code>函数左右移动；如果改 <code>c</code>，就可以改变它的高度。所以只要有不同的 <code>w </code>不同的 <code>b</code> 不同的 <code>c</code>，就可以制造出不同的 <code>Sigmoid </code>函数，把不同的<code>Sigmoid </code>函数叠起来以后就可以去逼近各种不同的分段线性函数；分段线性函数可以拿来近似各种不同的连续的函数。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_f9f5ee0a313944d1bacb1b9e1d549fe2.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_a8f6973d038c490aa5f324f92c587580.png" alt="在这里插入图片描述"></p><blockquote><p>我们可以不只用一个特征<code> x1</code>，可以用多个特征代入不同的 <code>c, b, w</code>，组合出各种不同的函数，从而得到更有 <strong>灵活性（flexibility）</strong> 的函数，如图 1.13 所示。<br>用 <code>j </code>来代表特征的编号。如果要考虑前 28 天，<code>j </code>就是 1 到 28。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_a69bac4cc1c7482cadf10b21208428b5.png" alt="在这里插入图片描述"></p><blockquote><p>无论是拿行或拿列都可以，把 W 的每一列或每一行“拼”成一个长的向量，把 b, cT, b” 拼” 上来，这个长的向量直接用 θ 来表示。<br>所有的未知的参数，一律统称 θ。</p></blockquote><h4 id="优化是找一个可以让损失最小的参数，是否可以穷举所有可能的未知参数的值？"><a href="#优化是找一个可以让损失最小的参数，是否可以穷举所有可能的未知参数的值？" class="headerlink" title="优化是找一个可以让损失最小的参数，是否可以穷举所有可能的未知参数的值？"></a>优化是找一个可以让损失最小的参数，是否可以穷举所有可能的未知参数的值？</h4><p><img src="/img/downloaded/aHR0cHM6_7c50b0a3c97849b0ac539dbe34230d54.png" alt="在这里插入图片描述"></p><h4 id="刚才的例子里面有-3-个-Sigmoid，为什么是-3-个，能不能-4-个或更多？"><a href="#刚才的例子里面有-3-个-Sigmoid，为什么是-3-个，能不能-4-个或更多？" class="headerlink" title="刚才的例子里面有 3 个 Sigmoid，为什么是 3 个，能不能 4 个或更多？"></a>刚才的例子里面有 3 个 Sigmoid，为什么是 3 个，能不能 4 个或更多？</h4><p><img src="/img/downloaded/aHR0cHM6_5136ea488dba48da88cb96625968b6a2.png" alt="在这里插入图片描述"></p><h3 id="定义损失"><a href="#定义损失" class="headerlink" title="定义损失"></a>定义损失</h3><blockquote><p>之前是 <code>L(w, b)</code>，因为 w 跟 b 是未知的。<br>现在未知的参数很多了，再把它一个一个列出来太累了，所以直接用 θ 来统设所有的参数，所以损失函数就变成 <code>L(θ)</code>。</p></blockquote><blockquote><p>损失函数能够判断 <code>θ</code> 的好坏，其计算方法跟刚才只有两个参数的时候是一样的。<br>先给定 <code>θ</code> 的值，即某一组 <code>W, b, cT, b</code> 的值，再把一种特征 <code>x</code> 代进去，得到估测出来的 <code>y</code>，再计算一下跟真实的标签之间的误差 <code>e</code>。把所有的误差通通加起来，就得到损失。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_8ab5780e47174a3580be5690eb786de1.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_60bf1b0bfb3e4f319f3766d50d674c37.png" alt="在这里插入图片描述"></p><blockquote><p>要找到 $θ$让损失越小越好，可以让<br>损失最小的一组 $θ$称为 $θ_∗$。一开始要随机选一个初始的数值 $θ_0$。<br>接下来计算每一个未知的参数对 L 的微分，得到向量 $g$，即可以让损失变低的函数</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_5aa8c959c29b4a72bfedbd274b00b887.png" alt="在这里插入图片描述"></p><blockquote><p>假设有 1000 个参数，这个向量的长度就是 1000，这个向量也称为梯度，$∇L$代表梯度。<br>L($θ_0$) 是指计算梯度的位置，是在 θ 等于 $θ_0$ 的地方。<br>计算出 g 后，接下来跟新参数，$θ_0$ 代表它是一个起始的值，它是一个随机选的起始的值，代表 $θ_1$ 更新过一次的结果，$θ^0_2$ 减掉微分乘以，减掉 η 乘上微分的值，得到 $θ^1_2$，以此类推，就可以把 1000 个参数都更新了。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_92abe1a1c1114610b3bbc58d68a7c638.png" alt="在这里插入图片描述"></p><blockquote><p>假设参数有 1000 个，$θ_0$ 就是 1000 个数值，1000 维的向量，g 是 1000 维的向量，$θ_1$ 也是 1000 维的向量。 整个操作就是这样，由 $θ_0$ 算梯度，根据梯度去把 $θ_0$ 更新成 $θ_1$，再算一次梯度，再根据梯度把 $θ_1$ 再更新成 $θ_2$，再算一次梯度把 $θ_2$ 更新成 $θ_3$，以此类推，直到不想做。<br><img src="/img/downloaded/aHR0cHM6_fdd986e113434fbcbd1d5c835d558c5f.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>或者计算出梯度为 0 向量，导致无法再更新参数为止，不过在实现上几乎不太可能梯度为 0，通常会停下来就是我们不想做了。</p></blockquote><h3 id="实现上的细节"><a href="#实现上的细节" class="headerlink" title="实现上的细节"></a>实现上的细节</h3><h4 id="批量（batch）"><a href="#批量（batch）" class="headerlink" title="批量（batch）"></a>批量（batch）</h4><p><img src="/img/downloaded/aHR0cHM6_6c121abd25e74f5da606124044251c7c.png" alt="在这里插入图片描述"></p><blockquote><p>实现上有个细节的问题，实际使用梯度下降的时候，如图 1.17 所示，会把 N 笔数据随机分成一个一个的<strong>批量（batch）</strong>，一组一组的。</p></blockquote><p>在深度学习中，<strong>批量（Batch）</strong> 指的是计算一次<strong>成本（cost）</strong> 需要的输入数据个数。当数据集比较大时，一次性处理所有样本在计算和存储上会有困难，因此会采用一次输入一定量的样本来进行训练。</p><p><strong>如果数据集比较小，可以将全体数据看做一个批量，即把数据集中每个样本都计算损失（loss）然后取其平均值当做成本（cost）。</strong></p><p><strong>批量学习的优点</strong>：能更好地代表样本总体从而更准确地确定下降方向，对梯度向量有更精确的估计等。</p><h4 id="回合（epoch）"><a href="#回合（epoch）" class="headerlink" title="回合（epoch）"></a>回合（epoch）</h4><blockquote><p>把所有的批量都看过一次，称为一个回合（epoch），每一次更新参数叫做一次更新。更新跟回合是不同的东西。每次更新一次参数叫做一次更新，把所有的批量都看过一遍，叫做一个回合。</p></blockquote><p><strong>回合（Epoch）</strong> 指的是遍历全部数据集一次。<br>在一个回合中，模型会对数据集中的所有样本都进行处理和学习。</p><h2 id="模型变形"><a href="#模型变形" class="headerlink" title="模型变形"></a>模型变形</h2><blockquote><p>其实还可以对模型做更多的变形，不一定要把 Hard Sigmoid 换成 Soft Sigmoid。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_fafd73da66564321890309726de67aab.png" alt="在这里插入图片描述"></p><blockquote><p><strong>HardSigmoid 可以看作是两个修正线性单元（Rectifed Linear Unit， ReLU） 的加总， ReLU 的图像有一个水平的线，走到某个地方有一个转折的点，变成一个斜坡，</strong> 其对应的公式为</p></blockquote><p>$$<br>c ∗ max(0, b + wx1)<br>$$</p><p><strong>输出0或b+ w1为正的。</strong></p><p><img src="/img/downloaded/aHR0cHM6_03de17282ec048f2863b7ab58a81f6b3.png" alt="在这里插入图片描述"></p><blockquote><p><strong>把两个 ReLU 叠起来就可以变成 Hard 的 Sigmoid</strong>，想要用 ReLU，就把 Sigmoid 的地方，换成</p></blockquote><p>$$max(0, b_i + w_{ij}x_{j})$$</p><blockquote><p>要<strong>合成 i 个 Hard Sigmoid， 需要 i 个 Sigmoid，如果 ReLU 要做到一样的事情，则需要 2i 个 ReLU</strong>，因为 2 个 ReLU 合 起来才是一个 Hard Sigmoid。因此<strong>表示一个 Hard 的 Sigmoid 不是只有一种做法</strong>。</p></blockquote><h3 id="激活函数（activation-function）"><a href="#激活函数（activation-function）" class="headerlink" title="激活函数（activation function）"></a>激活函数（activation function）</h3><blockquote><p>在机器学习里面， <strong>Sigmoid 或 ReLU 称为激活函数（activation function）</strong>。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_9b6073c8277646fcb7a0ef7fad256122.png" alt="在这里插入图片描述"></p><blockquote><p>Sigmoid 跟 ReLU 是最常见的激活函数，接下来的实<br>验都选择用了 ReLU，显然 ReLU 比较好，实验结果如图 1.20 所示。</p></blockquote><blockquote><p><strong>连续使用 10 个 ReLU作为模型，跟用线性模型的结果是差不多的</strong></p></blockquote><blockquote><p>但连续使用 100 个 ReLU 作为模型，结果就有显著差别了， 100 个 ReLU 在训练数据上的损失就可以从 320 降到 280，有 100 个 ReLU 就可以制造比较复杂的曲线，本来线性就是一直线，但 100 个 ReLU 就可以产生 100 个折线的函数，在测试数据上也好了一些。<br>接下来使用 1000 个 ReLU 作为模型，<strong>在训练数据上损失更低了一些，但是在没看过的数据上，损失没有变化</strong>。</p></blockquote><p><strong>Sigmoid 跟 ReLU 是最常见的激活函数</strong></p><blockquote><p>继续改模型</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_4a5b5c0de372450c85459dfc8abbcad7.png" alt="在这里插入图片描述"></p><blockquote><p>如图 1.21 所示，<strong>从 x 变成 a，就是把 x 乘上 w 加 b，再通过 Sigmoid 函数</strong>。</p></blockquote><blockquote><p><strong>不一定要通过Sigmoid 函数</strong>，通过 ReLU 也可以得到 a，同样的事情再<strong>反复地多做几次</strong>。 所以可以把 x 做这一连串的运算产生 a，接下来把 a做这一连串的运算产生 a′。 反复地多做的次数又是另外一个超参数。<br><strong>注意， w, b 和 w′, b′ 不是同一个参数，是增加了更多 的未知的参数。</strong></p></blockquote><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p><img src="/img/downloaded/aHR0cHM6_eb720854b37f44019699e122c965429c.png" alt="在这里插入图片描述"></p><blockquote><p>如图 1.24 所示， <strong>Sigmoid 或 ReLU 称为神经元（neuron），很多的神经元称为神经网络（neural network）</strong>。<br>  <strong>每一排称为一层，称为隐藏层（hiddenlayer），很多的隐藏层就“深”，这套技术称为深度学习</strong>。</p></blockquote><blockquote><p>人们<strong>把神经网络越叠越多越叠越深</strong><br>残差网络（Residual Network， ResNet） 有 152 层，错误率降到 3.57%。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_5d9dd3323adf44ab9bdab196dc56227c.png" alt="在这里插入图片描述"></p><p>如图 1.25 所示。在训练数据和测试数据上的结果是不一致的，这种情况称为<strong>过拟合（overftting）</strong>。</p><h1 id="Task-3-机器学习框架-实践攻略"><a href="#Task-3-机器学习框架-实践攻略" class="headerlink" title="Task 3 机器学习框架&amp;实践攻略"></a>Task 3 机器学习框架&amp;实践攻略</h1><h2 id="机器学习框架"><a href="#机器学习框架" class="headerlink" title="机器学习框架"></a>机器学习框架</h2><h3 id="定义函数fθ-x"><a href="#定义函数fθ-x" class="headerlink" title="定义函数fθ(x)"></a>定义函数fθ(x)</h3><blockquote><p><strong>定义一个函数$f_θ(x)$，其中θ表示模型中的所有未知参数</strong>。该函数接收输入特征x，并根据参数θ计算输出。</p></blockquote><h3 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h3><blockquote><p><strong>定义一个损失函数，用于评估给定参数组合θ的好坏程度</strong>。损失函数的选择依赖于具体的问题和模型类型。常见的损失函数包括均方误差、交叉熵等。</p></blockquote><h3 id="优化问题求解"><a href="#优化问题求解" class="headerlink" title="优化问题求解"></a>优化问题求解</h3><blockquote><p>的目标是寻找一个最优的参数组合θ∗，<strong>使得损失函数的值最小化</strong>。这可以通过求解一个优化问题来实现。常用的优化算法包括梯度下降、牛顿法等。</p></blockquote><h3 id="应用于测试数据"><a href="#应用于测试数据" class="headerlink" title="应用于测试数据"></a>应用于测试数据</h3><blockquote><p><strong>找到最优参数θ∗后，可以将其应用于测试数据</strong>。将测试集中的输入特征x带入函数$f_θ(x)$，得到预测结果。</p></blockquote><h3 id="提交到Kaggle进行评估"><a href="#提交到Kaggle进行评估" class="headerlink" title="提交到Kaggle进行评估"></a>提交到Kaggle进行评估</h3><blockquote><p>将预测结果提交到Kaggle等竞赛平台进行评估。该平台会根据预测结果与真实值之间的差异进行评分，以衡量模型的性能。</p></blockquote><p>总结一下就是<strong>定义一个函数</strong>$f_θ(x)$，其中θ代表模型中的未知参数。然后，<strong>定义一个损失函数</strong>来评估参数组合的好坏程度。然后，通过<strong>优化问题求解</strong>找到最优参数<code>θ∗</code>，<strong>使损失函数最小化</strong>。然后，将<strong>最优参数应用于测试数据，得到预测结果</strong>。最后，将预测结果<strong>提交到评估平台</strong>进行性能评估。</p><h2 id="实践方法论"><a href="#实践方法论" class="headerlink" title="实践方法论"></a>实践方法论</h2><h3 id="为什么会出现模型偏差"><a href="#为什么会出现模型偏差" class="headerlink" title="为什么会出现模型偏差"></a>为什么会出现模型偏差</h3><blockquote><p><strong>模型偏差可能会影响模型训练。</strong></p></blockquote><blockquote><p>假设<strong>模型过于简单</strong>，一个有未知参数的函数代$θ_1$ 得到一个函数$f_θ1(x)$，同理可得到另一个函数 $f_θ2(x)$，把所有的函数集合起来得到一个函数的集合。但是该函数的集合太小了，没有包含任何一个函数，<strong>可以让损失变低的函数不在模型可以描述的范围内</strong>。</p></blockquote><p>如何解决</p><ol><li><strong>用深度学习，增加更多的灵活性</strong>。</li><li>所以如果模型的灵活性不够大，可以<strong>增加更多特征，可以设一个更大的模型</strong>，可以用深度学习来增加模型的灵活性，这是第一个可以的解法。</li><li>但是并不是训练的时候，损失大就代表一定是模型偏差，可能会遇到另外一个问题：<strong>优化做得不好</strong>。</li></ol><h3 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h3><blockquote><p><strong>一般只会用到梯度下降进行优化，这种优化的方法很多的问题。</strong></p></blockquote><blockquote><p>比如可能会卡在局部最小值的地方，无法找到一个真的可以让损失很低的参数，如图 2.3(a) 所示。如图 2.3(b) 所示蓝色部分是模型可以表示的函数所形成的集合，可以把 θ 代入不同的数值，形成不同的函数，把所有的函数通通集合在一起，得到这个蓝色的集合。这个蓝色的集合里面，确实包含了一些函数，这些函数它的损失是低的。<br><strong>但问题是梯度下降这一个算法无法找出损失低的函数，梯度下降是解一个优化的问题，找到 θ∗ 就结束了。但 θ∗ 的损失不够低。</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_97e4040032b74ea6aa21954b977d5936.png" alt="在这里插入图片描述"><br>还是可能会出现卡在局部最小值的地方,仍未能找到真正的最优解</p><h3 id="如何判断模型是否足够大？"><a href="#如何判断模型是否足够大？" class="headerlink" title="如何判断模型是否足够大？"></a>如何判断模型是否足够大？</h3><blockquote><p>一个建议判断的方法，通过比较不同的模型来判断模型现在到底够不够大。</p></blockquote><p> <img src="/img/downloaded/aHR0cHM6_2f14529755384bbbb10acdd98529b589.png" alt="在这里插入图片描述"></p><blockquote><p>很多人看到这张图认为这个代表过拟合，深度学习不奏效， 56 层太深了不奏效，根本就不需要这么深。但个不是过拟合，并不是所有的结果不好，都叫做过拟合。在训练集上， 20 层的网络损失其实是比较低的， 56 层的网络损失是比较高的，如图 2.4(b) 所示，这代表 56 层的网络的优化没有做好，它的优化不给力。</p></blockquote><p>层数多但是反而效果不好，不一定是过拟合，可能是因为它的优化没有做好。</p><blockquote><p>看到一个从来没有做过的问题，可以<strong>先跑一些比较小的、比较浅的网络，或甚至用一些非深度学习的方法，比如线性模型、支持向量机（Support Vector Machine，SVM）</strong>， SVM 可能是比较容易做优化的，它们比较不会有优化失败的问题。</p></blockquote><p>对于一个新的问题可以多种不同的模型综合考量一下。<br>先跑一个小的模型试一下，在逐步加深模型。</p><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><h3 id="为什么会有过拟合这样的情况呢？"><a href="#为什么会有过拟合这样的情况呢？" class="headerlink" title="为什么会有过拟合这样的情况呢？"></a>为什么会有过拟合这样的情况呢？</h3><blockquote><p>举一个极端的例子，这是训练集。</p></blockquote><blockquote><p>假设根据这些训练集，某一个很废的机器学习的方法找出了一个一无是处的函数。这个一无是处的函数，只要输入 x 有出现在训练集里面，就把它对应的 y 当做输出。<strong>如果 x 没有出现在训练集里面，就输出一个随机的值。这个函数啥事也没有干，其是一个一无是处的函数，但它在训练数据上的损失是 0</strong>。把训练数据通通丢进这个函数里面，它的输出跟训练集的标签是一模一样的，<strong>所以在训练数据上面，这个函数的损失可是 0 呢，可是在测试数据上面，它的损失会变得很大，因为它其实什么都没有预测，这是一个比较极端的例子，在一般的情况下，也有可能发生类似的事情</strong>。</p></blockquote><h3 id="灵活性太大带来的问题"><a href="#灵活性太大带来的问题" class="headerlink" title="灵活性太大带来的问题"></a>灵活性太大带来的问题</h3><p><img src="/img/downloaded/aHR0cHM6_7aad017e757746fabb21ac0ff5ac08a2.png" alt="在这里插入图片描述"></p><blockquote><p>如图 2.6 所示，举例来说，假设输入的特征为 x，输出为 y， x 和 y 都是一维的。<br>x 和 y之间的关系是 2 次的曲线，<strong>曲线用虚线来表示，因为通常没有办法，直接观察到这条曲线</strong>。我们<strong>真正可以观察到的是训练集，训练集可以想像成从这条曲线上面，随机采样出来的几个点</strong>。</p></blockquote><blockquote><p>模型的能力非常的强，其灵活性很大，只给它这 3 个点。在这 3 个点上面，<strong>要让损失低，所以模型的这个曲线会通过这 3 个点，但是其它没有训练集做为限制的地方，因为它的灵活性很大，它灵活性很大，所以模型可以变成各式各样的函数，没有给它数据做为训练，可以产生各式各样奇怪的结果</strong>。</p></blockquote><blockquote><p><strong>如果再丢进测试数据，测试数据和训练数据，当然不会一模一样，它们可能是从同一个分布采样出来的，测试数据是橙色的点，训练数据是蓝色的点</strong>。</p></blockquote><h3 id="如何解决过拟合问题"><a href="#如何解决过拟合问题" class="headerlink" title="如何解决过拟合问题"></a>如何解决过拟合问题</h3><ol><li><p>增加数据集，数据增强<br><img src="/img/downloaded/aHR0cHM6_6710dfbe85484bd7a8324512e3cf0da5.png" alt="在这里插入图片描述"></p></li><li><p>给模型一些限制，让模型不要有过大的灵活性。</p><blockquote><p>如图 2.8 所示，要用多限制的模型才会好取决于对这个问题的理解。因为这种模型是自己设计的，设计出不同的模型，结果不同。解决过拟合的问题，要给模型一些限制，最好模型正好跟背后产生数据的过程，过程是一样的就有机会得到好的结果。</p></blockquote></li></ol><blockquote><p><strong>如果是深度学习的话，就给它比较少的神经元的数量，本来每层一千个神经元，改成一百个神经元之类的，或者让模型共用参数，可以让一些参数有一样的数值</strong>。 </p></blockquote><blockquote><p><strong>全连接网络（fully-connected network） 其实是一个比较有灵活性的架构，而卷积神经网络（Convolutional Neural Network， CNN） 是一个比较有限制的架构。</strong> <strong>CNN 是一种比较没有灵活性的模型，其是针对图像的特性来限制模型的灵活性</strong>。所以全连接神经网络，可以找出来的函数所形成的集合其实是比较大的， CNN 所找出来的函数，它形成的集合其实是比较小的，其实包含在全连接网络里面的，但是就是因为<strong>CNN 给了，比较大的限制，所以 CNN 在图像上，反而会做得比较好</strong>。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_9ba7dbf22dff42b2925ff53350d9e853.png" alt="在这里插入图片描述"><br>但也不要给太多的限制。有可能会因为模型太大的限制，大到有了模型偏差的问题。</p><ol start="3"><li>比如早停（early stopping）、正则化（regularization）和丢弃法（dropout<br>method）。</li></ol><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><blockquote><p>一种比较合理的选择模型的方法是将训练数据分成训练集和验证集，通常是将90%的数据用作训练集，剩余的10%作为验证集。训练集用于训练模型，验证集用于评估模型的性能。<br>在训练集上训练出的模型会使用验证集来衡量模型的分数。根据验证集上的分数选择最佳的模型，并将该模型的结果上传到Kaggle等平台上得到公开分数。<br>这个过程中，使用验证集来选择模型，因此公开测试集的分数可以反映私人测试集的分数。然而，如果这个过程重复太多次，根据公开测试集的结果调整模型太多次，就有可能在公开测试集上过拟合，导致在私人测试集上得到差的结果。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_d85545a530ca472686fe86b8d3ead1a0.png" alt="在这里插入图片描述"><br><strong>因此，需要在选择模型时找到平衡，避免过度拟合，并注意不要过多地根据公开测试集的结果调整模型。</strong></p><p><strong>在选择模型时，常用的方法是将训练数据分成训练集和验证集</strong>。训练集用于训练模型，验证集用于评估模型在未知数据上的性能。通常情况下，将大约90%的数据用作训练集，剩余的10%作为验证集。<strong>模型在验证集上的表现可以作为选择模型的依据</strong>。</p><p>然而，<strong>在选择模型的过程中需要注意，过多地根据公开测试集上的结果调整模型可能会导致在私人测试集上得到较差的结果，即过拟合的问题</strong>。因此，在选择模型时<strong>需要找到一个平衡，避免过度拟合模型</strong>。</p><blockquote><p><strong>最好的做法，就是用验证损失，最小的直接挑就好了，不要管公开测试集的结果</strong>。<br>在实现上，不太可能这么做，因为公开数据集的结果对模型的选择，可能还是会有些影响的。<strong>理想上就用验证集挑就好，有过比较好的基线（baseline） 算法以后，就不要再去动它了，就可以避免在测试集上面过拟合</strong>。</p></blockquote><h3 id="k-折交叉验证"><a href="#k-折交叉验证" class="headerlink" title="k 折交叉验证"></a>k 折交叉验证</h3><p><img src="/img/downloaded/aHR0cHM6_40d78d2dae2a46c5b8e7549197f66e83.png" alt="在这里插入图片描述"></p><blockquote><p>用 k 折交叉验证（k-fold cross validation），如图 2.11 所示。 k 折交叉验证就是先把训练集切成 k 等份。在这个例子，训练集被切成 3 等份，切完以后，拿其中一份当作验证集，另外两份当训练集，这件事情要重复 3 次。即第一份第 2 份当训练，第 3 份当验证；第一份第 3 份当训练，第 2 份当验证；第一份当验证，第 2 份第 3 份当训练</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_7490bb6b430d460ca345df01aae6ba22.png" alt="在这里插入图片描述"></p><h3 id="不匹配"><a href="#不匹配" class="headerlink" title="不匹配"></a>不匹配</h3><p>反常的情况。这种情况应该算是另外一种错误的形式，这种错误的形式称为不匹配（mismatch）</p><p><img src="/img/downloaded/aHR0cHM6_1afc40b560d74bc99a4a5bc881d075ea.png" alt="在这里插入图片描述"></p><blockquote><p>不匹配跟过拟合其实不同，一般的过拟合可以用搜集更多的数据来克服，但是<strong>不匹配是指训练集跟测试集的分布不同，训练集再增加其实也没有帮助了</strong>。</p></blockquote><blockquote><p>增加数据也不能让模型做得更好，所以这种问题要怎么解决，<strong>匹不匹配要看对数据本身的理解了，我们可能要对训练集跟测试集的产生方式有一些理解，才能判断它是不是遇到了不匹配的情况</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_86d38b681e1a42ba93e6d7dddc1247d9.png" alt="在这里插入图片描述"></p><h1 id="🚩学习目标"><a href="#🚩学习目标" class="headerlink" title="🚩学习目标"></a>🚩学习目标</h1><ul><li><input checked="" disabled="" type="checkbox"> Task 1.1 《深度学习详解》3.1 局部极小值与鞍点</li><li><input checked="" disabled="" type="checkbox"> Task 1.2 《深度学习详解》3.2 批量和动量</li><li><input checked="" disabled="" type="checkbox"> Task 2.1 《深度学习详解》3.3&amp;4&amp;5 自适应学习率</li><li><input checked="" disabled="" type="checkbox"> Task 2.2 《深度学习详解》3.6 分类</li><li><input checked="" disabled="" type="checkbox"> Task 2.3 （实践任务）：HW3(CNN)</li><li><input checked="" disabled="" type="checkbox"> Task 3.1 《深度学习详解》3.7 批量归一化</li><li><input checked="" disabled="" type="checkbox"> Task 3.2 《深度学习详解》4.1&amp;2&amp;3&amp;4 卷积神经网络-上</li><li><input checked="" disabled="" type="checkbox"> Task 3.3 《深度学习详解》3.5&amp;6&amp;7&amp;8 卷积神经网络-下</li><li><input checked="" disabled="" type="checkbox"> （选修）《深度学习详解》6.1&amp;2 自注意力机制的原理</li></ul><hr><h1 id="🚩学习内容"><a href="#🚩学习内容" class="headerlink" title="🚩学习内容"></a>🚩学习内容</h1><blockquote><p>欢迎去大家各大电商平台选购纸质版苹果书《深度学习详解》<br>基于上述书籍拓展</p></blockquote><blockquote><p>引用内容为书本原话 图片基本上来源于书中<br>我以自问自答的方式输出内容</p></blockquote><hr><h1 id="🚩-Task1-1"><a href="#🚩-Task1-1" class="headerlink" title="🚩 Task1.1"></a>🚩 Task1.1</h1><hr><h2 id="🎯为什么优化会失败"><a href="#🎯为什么优化会失败" class="headerlink" title="🎯为什么优化会失败"></a>🎯为什么优化会失败</h2><blockquote><p>收敛在局部极限值与鞍点会导致优化失败。</p></blockquote><p>隐藏任务①：搜索资料，找到一个优化失败的案例，尝试用自己的话描述一遍情况~<br><a href="https://www.jiqizhixin.com/articles/2018-11-07-4">深度学习并非万能，遇到这些问题会失败 | 机器之心</a></p><h3 id="📌因非信息梯度导致的失败"><a href="#📌因非信息梯度导致的失败" class="headerlink" title="📌因非信息梯度导致的失败"></a>📌因非信息梯度导致的失败</h3><p>原因：如果梯度中的信息很少，使用它来进行学习就无法成功。<br>例如，研究者从学习随机奇偶校验的简单问题开始，在大约d&#x3D;30这个程度之后，经过合理时间后也没有观察到优于随机的表现。<br>研究者使用两个定理对此进行了详细的分析，得出了结论：<strong>基于梯度的方法确实不能学会随机奇偶校验和线性周期函数。</strong> 此外，不管我们使用哪一类预测算法，只要使用了基于梯度的方法来进行训练，这个结果都成立。</p><h2 id="🎯局部极小值与鞍点"><a href="#🎯局部极小值与鞍点" class="headerlink" title="🎯局部极小值与鞍点"></a>🎯局部极小值与鞍点</h2><blockquote><p>我们在做优化的时候经常会发现，随着参数不断更新，训练的损失不会再下降, 但是我们对这个损失仍然不满意。’</p></blockquote><p>达到了临界点</p><h2 id="🎯临界点及其种类"><a href="#🎯临界点及其种类" class="headerlink" title="🎯临界点及其种类"></a>🎯临界点及其种类</h2><blockquote><p>过去常见的一个猜想是我们优化到某个地方，这个地方参数对损失的微分为零，如图 3.1所示。图 3.1 中的两条曲线对应两个神经网络训练的过程。当参数对损失微分为零的时候，梯度下降就不能再更新参数了，训练就停下来了，损失不再下降了。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_35ef82053d4743e1bf98cd23406436ba.png" alt="在这里插入图片描述"></p><blockquote><p>提到梯度为零的时候，大家最先想到的可能就是<strong>局部极小值（local minimum）</strong><br>所以经常<strong>有人说，做深度学习时使用梯度下降会收敛在局部极小值，梯度下降不起作用。</strong> 但其实损失不是只在局部极小值的梯度是零，还有其他可能会让梯度是零的点，比如<strong>鞍点（saddle point）</strong> 。<strong>鞍点其实就是梯度是零且区别于局部极小值和局部极大值</strong>（localmaximum）的点。图 3.2b 红色的点在 y 轴方向是比较高的，在 x 轴方向是比较低的，这就是一个鞍点。<strong>鞍点的叫法是因为其形状像马鞍。</strong> <strong>鞍点的梯度为零，但它不是局部极小值。</strong> <strong>我们把梯度为零的点统称为临界点（critical point）。</strong> 损失没有办法再下降，也许是<strong>因为收敛在了临界点，但不一定收敛在局部极小值，因为鞍点也是梯度为零的点。</strong><br><img src="/img/downloaded/aHR0cHM6_52b5824047c6400a9b58abe8a2bb880f.png" alt="在这里插入图片描述"><br>局部较小值点和鞍点都会使得梯度为零，所以梯度为零的点，临界点不一定是局部极小值。</p></blockquote><h2 id="🎯如何判断临界值种类"><a href="#🎯如何判断临界值种类" class="headerlink" title="🎯如何判断临界值种类"></a>🎯如何判断临界值种类</h2><blockquote><p>判断一个临界点到底是局部极小值还是鞍点需要知道损失函数的形状。<br>虽然无法完整知道整个损失函数的样子，但是如果给定某一组参数，比如$θ^{‘}$，$θ^{‘}$ 附近的 $L(θ)$ 可近似为</p></blockquote><p>$$<br>L(θ) ≈  L(θ^{‘})+(θ − θ^{′})^T*g +\frac{1}{2}(θ − θ^{′})^T * H(θ − θ^{′}) .  (3.1)<br>$$</p><p>式 (3.1) 是<strong>泰勒级数近似（Tayler series appoximation）。</strong> 其中，第一项 $L(θ)$′ 告诉我们，当 θ 跟 $θ^{′}$很近的时候，$L(θ)$ 应该跟还蛮靠近的；第二项$(θ − θ^{′})^T*g$中，g 代表梯度，它是一个向量，可以弥补$L(θ^{′})$跟 $L(θ)$ 之间的差距。有时候梯度 g 会写成 $∇L(θ^{′})$。$g_i$是向量 g 的第 i 个元素，就是 L 关于 θ 的第 i 个元素的微分，即<br>$$<br>g_i &#x3D;\frac{∂L(θ^{′})}{∂θ_i}.(3.2)<br>$$</p><blockquote><p>光看 g 还是没有办法完整地描述 ，还要看式 (3.1) 的第三项$\frac{1}{2}(θ − θ^{′})^T * H(θ − θ^{′})$。第三项跟<strong>海森矩阵（Hessian matrix）H 有关</strong> 。<br>H 里面放的是 L 的二次微分，它第 i 行，第 j 列的值 $H_{ij}$ 就是把 θ 的第 i 个元素对$L(θ^{′})$作微分，再把 θ 的第 j 个元素对$\frac{∂L(θ^{′})}{∂θ_i}$作微分后的结果，即</p></blockquote><p>$$<br>H_{ij}   &#x3D;\frac{∂^2L(θ^{′})}{∂θ_i∂θ_j}. (3.3)<br>$$</p><blockquote><p>在临界点，梯度 g 为零，因此 θ − θ′Tg 为零。所以在临界点的附近，损失函数可被近似为<br>$$<br>L(θ) ≈  L(θ^{‘}) +\frac{1}{2}(θ − θ^{′})^T * H(θ − θ^{′}) .  (3.1)<br>$$</p></blockquote><blockquote><p>我们可以根据$\frac{1}{2}(θ − θ^{′})^T * H(θ − θ^{′})$来判断在 $θ^{′}$附近的<strong>误差表面（error surface）</strong> 到底长什么样子。<br><strong>知道误差表面的“地貌”，我们就可以判断 L(θ′) 是局部极小值、局部极大值，还是鞍点。</strong></p></blockquote><p>上述我们通过一系列的转化把损失函数近似的写了出来，可以根据误差表面来判断临界点。</p><blockquote><p><strong>我们用向量 v 来表示$θ − θ^{′} ,(θ − θ^{′})^T * H(θ − θ^{′})$可改写为 $v^TH_v$，有如下三种情况。</strong></p><ol><li><strong>如果对所有 v，$v^TH_v&gt; 0$ .</strong>  这意味着对任意 θ，L(θ) &gt; L(θ′). 只要 θ 在 θ′ 附近，L(θ) 都大于 L(θ′). 这代表 L(θ′) 是附近的一个最低点，所以<strong>它是局部极小值。</strong></li><li><strong>如果对所有 v，$v^TH_v&lt; 0$ .</strong>  这意味着对任意 θ，L(θ) &lt; L(θ′)，θ′ 是附近最高的一个点，<strong>L(θ′) 是局部极大值。</strong></li><li><strong>如果对于 v， $v^TH_v$ 有时候大于零，有时候小于零。</strong> 这意味着在 θ′ 附近，有时候L(θ) &gt; L(θ′)，有时候 L(θ) &lt; L(θ′). 因此在 θ′ 附近，L(θ′) 既不是局部极大值，也不是局部极小值，而 <strong>是鞍点。</strong></li></ol></blockquote><h3 id="📌更简便的方法来判断-v-TH-v-的正负。"><a href="#📌更简便的方法来判断-v-TH-v-的正负。" class="headerlink" title="📌更简便的方法来判断 $v^TH_v$  的正负。"></a>📌更简便的方法来判断 $v^TH_v$  的正负。</h3><blockquote><p>只要看 H的特征值。</p><ol><li>若 H 的<strong>所有特征值都是正的</strong>，<strong>H 为正定矩阵</strong>，则  $v^TH_v$ &gt; 0，临界点是<strong>局部极小值</strong>。</li><li>若 H 的<strong>所有特征值都是负的</strong>，<strong>H 为负定矩阵</strong>，则 $v^TH_v$ &lt; 0，临界点是<strong>局部极大值</strong>。</li><li><strong>若 H 的特征值有正有负，临界点是鞍点</strong>。<br><img src="/img/downloaded/aHR0cHM6_8e582332ef78410f83fd1d6825802032.png" alt="在这里插入图片描述"></li></ol></blockquote><h2 id="🎯H-怎么告诉我们怎么更新参数呢？"><a href="#🎯H-怎么告诉我们怎么更新参数呢？" class="headerlink" title="🎯H 怎么告诉我们怎么更新参数呢？"></a>🎯H 怎么告诉我们怎么更新参数呢？</h2><blockquote><p>设 λ 为 H 的一个特征值 λ，u 为其对应的特征向量。对于我们的优化问题，可令 $u &#x3D;θ − θ^{′}$，则</p></blockquote><p>$$<br>u^{T}Hu &#x3D; uT(λu) &#x3D; λ∥u∥^{2}.<br>$$</p><blockquote><p>若 λ &lt; 0，则 $λ∥u∥^{2}$ &lt; 0。所以$\frac{1}{2}(θ − θ^{′})^T * H(θ − θ^{′})$ &lt; 0。此时，L(θ) &lt; L(θ′)，且<strong>沿着 u 的方向更新 θ，损失就会变小。</strong></p></blockquote><blockquote><p>只要 θ &#x3D; θ′ + u，沿着特征向量 u 的方向去更新参数，损失就会变小，所以虽然临界点的梯度为零，<strong>如果我们是在一个鞍点，只要找出负的特征值，再找出这个特征值对应的特征向量。将其与 θ′ 相加，就可以找到一个损失更低的点。</strong><br>我们其实只要顺着 u 的方向去更新参数，就可以找到一个比鞍点的损失还要更低的点。</p></blockquote><h2 id="🎯如何逃离鞍点"><a href="#🎯如何逃离鞍点" class="headerlink" title="🎯如何逃离鞍点"></a>🎯如何逃离鞍点</h2><blockquote><p>我们常常会遇到两种情况：损失仍然很高，却遇到了临界点而不再下降；或者损失降得很低，才遇到临界点。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_1c71d013f49d436083c869373473fda0.png" alt="在这里插入图片描述"></p><blockquote><p>在图 3.6 所示的例子中，最小值比例（&#x3D;正特征值数量&#x2F;总特征值数量）最大也不过处于 0.5 ~ 0.6 的范围，代表只有约一半的特征值为正，另一半的特征值为负，代表<strong>在所有的维度里面有约一半的路可以让损失上升，还有约一半的路可以让损失下降。</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_29c52681af40426f93b8fb5ec0bb0247.png" alt="在这里插入图片描述"></p><blockquote><p>所以从经验上看起来，<strong>局部极小值并没有那么常见。</strong> 多数的时候，我们训练到一个梯度很小的地方，参数不再更新，往往只是遇到了鞍点。</p></blockquote><h1 id="🚩-Task1-2"><a href="#🚩-Task1-2" class="headerlink" title="🚩 Task1.2"></a>🚩 Task1.2</h1><h2 id="🎯什么是批量和动量"><a href="#🎯什么是批量和动量" class="headerlink" title="🎯什么是批量和动量"></a>🎯什么是批量和动量</h2><blockquote><p>实际计算梯度的过程中，我们将数据分成多个<strong>批次（batch）</strong>，每个批次大小为B，即包含B个数据样本。</p></blockquote><blockquote><p>每次更新参数时，从批次中选取数据计算损失和梯度，并更新参数。完成一次遍历所有批次的过程称为一个<strong>回合（epoch</strong>）。</p></blockquote><blockquote><p>为了增加样本的随机性，我们会在划分批次时进行<strong>随机打乱（shuffle）</strong>。常见的一种做法是在每个回合开始之前重新划分批次，使得每个回合的批次数据都不同。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_982c143a836e48d0a7e1310cbdbaff35.png" alt="在这里插入图片描述"></p><h3 id="📌批量大小对梯度下降法的影响"><a href="#📌批量大小对梯度下降法的影响" class="headerlink" title="📌批量大小对梯度下降法的影响"></a>📌批量大小对梯度下降法的影响</h3><p><img src="/img/downloaded/aHR0cHM6_06be32fe4ce44e66a0d63deb0705b6ba.png" alt="在这里插入图片描述"></p><h4 id="🔧批量梯度下降法（Batch-Gradient-Descent，BGD）"><a href="#🔧批量梯度下降法（Batch-Gradient-Descent，BGD）" class="headerlink" title="🔧批量梯度下降法（Batch Gradient Descent，BGD）"></a>🔧批量梯度下降法（Batch Gradient Descent，BGD）</h4><blockquote><p>使用<strong>全批量（fullbatch）的数据</strong>来更新参数的方法即<strong>批量梯度下降法（Batch Gradient Descent，BGD）。</strong><br> 此时模型必须把 20 笔训练数据都看完，才能够计算损失和梯度，参数才能够更新一次。</p></blockquote><h4 id="🔧随机梯度下降法（Stochastic-Gradient-Descent，SGD），也称为增量梯度下降法"><a href="#🔧随机梯度下降法（Stochastic-Gradient-Descent，SGD），也称为增量梯度下降法" class="headerlink" title="🔧随机梯度下降法（Stochastic Gradient Descent，SGD），也称为增量梯度下降法"></a>🔧随机梯度下降法（Stochastic Gradient Descent，SGD），也称为增量梯度下降法</h4><blockquote><p>批量大小等于 1，此时使用的方法即<strong>随机梯度下降法（Stochastic Gradient Descent，SGD）</strong>，也称为增量梯度下降法。<br><strong>批量大小等于 1 意味着只要取出一笔数据即可计算损失、更新一次参数。</strong><br>如果总共有 20 笔数据，那么在每一个回合里面，参数会更新 20 次。<br>用一笔数据算出来的损失相对带有更多噪声，因此其更新的方向如图 3.8 所示，是曲曲折折的 。</p></blockquote><h4 id="🔧批量大小与计算时间的关系"><a href="#🔧批量大小与计算时间的关系" class="headerlink" title="🔧批量大小与计算时间的关系"></a>🔧批量大小与计算时间的关系</h4><p><img src="/img/downloaded/aHR0cHM6_1c45a418839e463e84f4651712ba1f76.png" alt="在这里插入图片描述"></p><blockquote><p>当批量大小增加到10000，甚至增加到 60000 的时候，<strong>GPU 计算梯度并更新参数所耗费的时间确实随着批量大小的增加而逐渐增长。</strong></p></blockquote><blockquote><p><strong>大的批量更新比较稳定，小的批量的梯度的方向是比较有噪声的（noisy）。</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_0386e7bf7a154d88b97fa1f46538b301.png" alt="在这里插入图片描述"></p><blockquote><p><strong>同一个模型，大的批量大小往往在训练的时候，结果比较差。</strong> 这个是优化的问题，大的批量大小优化可能会有问题，<strong>小的批量大小优化的结果反而是比较好的。</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_9a027bea6224408b9569218a4f427438.png" alt="在这里插入图片描述"></p><blockquote><p>一个可能的解释如图 3.12 所示，批量梯度下降在更新参数的时候，沿着一个损失函数来更新参数，走到一个局部最小值或鞍点显然就停下来了。<br><strong>梯度是零，如果不看海森矩阵，梯度下降就无法再更新参数了 。</strong><br><strong>但小批量梯度下降法（mini-batch gradient descent）每次是挑一个批量计算损失，所以每一次更新参数的时候所使用的损失函数是有差异的。</strong><br>这种有噪声的更新方式反而对训练其实是有帮助的。其实小的批量也对测试有帮助。</p></blockquote><p>在模型训练的适合小批量梯度下降法的噪声反而使得梯度不容易落在临界点，而且更方便测试。</p><blockquote><p>大的批量跟小的批量的<strong>训练准确率（accuracy）</strong> 差不多，但就算是在训练的时候结果差不多，<strong>测试的时候，大的批量比小的批量差，代表过拟合。</strong></p></blockquote><p><img src="/img/downloaded/aHR0cHM6_8e0ea637d131424d9101ed3b357a8d80.png" alt="在这里插入图片描述"></p><blockquote><p><strong>大的批量大小会让我们倾向于走到“峡谷”里面，而小的批量大小倾向于让我们走到“盆地”里面。</strong> 小的批量有很多的损失，其更新方向比较随机，其每次更新的方向都不太一样。即使“峡谷”非常窄，它也可以跳出去，之后如果有一个非常宽的“盆地”，它才会停下来。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_9394eb62905742258e088a7c91f3650e.jpeg" alt="在这里插入图片描述"></p><blockquote><p>而小的批量更新的方向比较有噪声的，大的批量更新的方向比较稳定。但是有噪声的更新方向反而在优化的时候有优势，而且在测试的时候也会有优势。<br><strong>所以大的批量跟小的批量各有优缺点，批量大小是需要去调整的超参数。</strong></p></blockquote><h2 id="🎯什么是动量法"><a href="#🎯什么是动量法" class="headerlink" title="🎯什么是动量法"></a>🎯什么是动量法</h2><blockquote><p><strong>动量法（momentum method）是另外一个可以对抗鞍点或局部最小值的方法。</strong></p><p><img src="/img/downloaded/aHR0cHM6_bd3fa1b6cffc471bb731b04959f956d3.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>但是在物理的世界里，一个球如果从高处滚下来，就算滚到鞍点或鞍点，<strong>因为惯性</strong>的关系它还是会继续往前走。因此在物理的世界里面，一个球从高处滚下来的时候，它<strong>并不一定会被鞍点或局部最小值卡住，如果将其应用到梯度下降中，这就是动量。</strong></p></blockquote><h3 id="📌对比一般的梯度下降法和动量法"><a href="#📌对比一般的梯度下降法和动量法" class="headerlink" title="📌对比一般的梯度下降法和动量法"></a>📌对比一般的梯度下降法和动量法</h3><p><img src="/img/downloaded/aHR0cHM6_054bf06823ff4f3bad71c455e70d05e8.png" alt="在这里插入图片描述"></p><p><img src="/img/downloaded/aHR0cHM6_bca48a45e8f34bbe8514b794c6920a66.png" alt="在这里插入图片描述"></p><blockquote><p>引入动量后，每次在移动参数的时候，不是只往梯度的反方向来移动参数，而是<strong>根据梯度的反方向加上前一步移动的方向决定移动方向。</strong></p></blockquote><blockquote><p><strong>图 3.16 中红色虚线方向是梯度的反方向，蓝色虚线方向是前一次更新的方向，蓝色实线的方向是下一步要移动的方向。</strong> 把前一步指示的方向跟梯度指示的方向相加就是下一步的移动方向。</p></blockquote><p>动量法引入了动量的概念，通过累积之前的梯度信息来加速学习过程。<strong>动量法在更新参数时不仅考虑当前的梯度，还考虑了之前累积的梯度。</strong></p><h4 id="🔧动量法的主要优点"><a href="#🔧动量法的主要优点" class="headerlink" title="🔧动量法的主要优点"></a>🔧动量法的主要优点</h4><p>可以加速收敛速度，特别是在目标函数存在高度非均向性的情况下。<br>可以帮助跳出局部最小值，并具有一定的平滑效果。</p><h4 id="🔧动量法也存在一些缺点。"><a href="#🔧动量法也存在一些缺点。" class="headerlink" title="🔧动量法也存在一些缺点。"></a>🔧动量法也存在一些缺点。</h4><p>动量法引入了额外的超参数，需要人工调整。<br>如果动量系数设置过大，可能会导致震荡；如果设置过小，则可能会导致收敛速度变慢。</p><p><img src="/img/downloaded/aHR0cHM6_9f10f439e6a745eaafd49a3d5a497733.png" alt="在这里插入图片描述"></p><blockquote><p>动量的简单例子如图 3.17 所示。<strong>红色表示负梯度方向，蓝色虚线表示前一步的方向，蓝色实线表示真实的移动量。</strong> 一开始没有前一次更新的方向，完全按照梯度给指示往右移动参数。负梯度方向跟前一步移动的方向加起来，得到往右走的方向。一般梯度下降走到一个局部最小值或鞍点时，就被困住了。但有动量还是有办法继续走下去，因为动量不是只看梯度，还看前一步的方向。<strong>即使梯度方向往左走，但如果前一步的影响力比梯度要大，球还是有可能继续往右走</strong>，甚至翻过一个小丘，也许可以走到更好的局部最小值，这就是动量有可能带来的好处 。</p></blockquote><h1 id="🚩Task-2-1"><a href="#🚩Task-2-1" class="headerlink" title="🚩Task 2.1"></a>🚩Task 2.1</h1><h2 id="🎯什么是自适应学习率"><a href="#🎯什么是自适应学习率" class="headerlink" title="🎯什么是自适应学习率"></a>🎯什么是自适应学习率</h2><blockquote><p>临界点其实不一定是在训练一个网络的时候会遇到的最大的障碍。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_aa4761d1b98d42ebb39ed5783aacdcd6.png" alt="在这里插入图片描述"></p><blockquote><p>图 3.18中的横坐标代表<strong>参数更新的次数</strong>，竖坐标表示<strong>损失</strong>。</p></blockquote><blockquote><p><strong>一般在训练一个网络的时候，损失原来很大，随着参数不断的更新，损失会越来越小，最后就卡住了，损失不再下降。</strong></p></blockquote><p>到临界点损失不在下降。<br><img src="/img/downloaded/aHR0cHM6_81e4b491f7894b1badc43ab7b400c33a.png" alt="在这里插入图片描述"></p><blockquote><p>我们走到临界点的时候，意味着梯度非常小，但损失不再下降的时候，梯度并没有真的变得很小，图 3.19 给出了示例。</p></blockquote><blockquote><p>图 3.19 中横轴是<strong>迭代次数</strong>，竖轴是梯度的<strong>范数（norm）</strong>，即梯度这个向量的长度。<br><strong>随着迭代次数增多，虽然损失不再下降，但是梯度的范数并没有真的变得很小。</strong></p></blockquote><p>范数（norm）是 梯度这个向量的长度。<br><img src="/img/downloaded/aHR0cHM6_38d2774cb82042c3ba68617320ef6b9c.png" alt="在这里插入图片描述"></p><blockquote><p>图 3.20是误差表面，梯度在山谷的两个谷壁间，不断地<strong>来回“震荡”</strong>，这个时候<strong>损失不会再下降</strong>，它不是真的卡到了临界点，<strong>卡到了鞍点或局部最小值</strong>。<br>在局部最小值或鞍点，只是单纯的损失无法再下降。<br><strong>但它的梯度仍然很大，只是损失不一定再减小了</strong>。</p></blockquote><blockquote><p>我们可以试着把学习率设小一点</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_cb3681446a064d39946a9916f168da96.png" alt="在这里插入图片描述"></p><blockquote><p>调学习率从 10−2 调到 10−7 的结果如图 3.22(b)所示，参数不再“震荡”了。<strong>参数会滑到山谷底后左转，但是这个训练永远走不到终点，因为学习率已经太小了</strong>。</p></blockquote><blockquote><p>AB段的坡度很陡，梯度的值很大，还能够前进一点。左拐以后，BC 段的坡度已经非常平坦了，这种小的学习率无法再让训练前进。<br>事实上在 BC 段有 10 万个点（10 万次更新），但都<strong>无法靠近局部最小值</strong>，所以<strong>显然就算是一个凸的误差表面，梯度下降也很难训练</strong>。</p></blockquote><blockquote><p>在梯度下降里面，所有的参数都是设同样的学习率，这显然是不够的，应该要为每一个参数定制化学习率，即引入<strong>自适应学习率（adaptive learning rate）</strong> 的方法，给每一个参数不同的学习率。</p></blockquote><h2 id="🎯AdaGrad"><a href="#🎯AdaGrad" class="headerlink" title="🎯AdaGrad"></a>🎯AdaGrad</h2><blockquote><p><strong>AdaGrad（Adaptive Gradient）</strong> 是<strong>典型的自适应学习率方法</strong>，其能够根据梯度大小自动调整学习率。 <strong>AdaGrad可以做到梯度比较大的时候，学习率就减小，梯度比较小的时候，学习率就放大</strong>。</p></blockquote><h3 id="📌参数更新和学习率调整"><a href="#📌参数更新和学习率调整" class="headerlink" title="📌参数更新和学习率调整"></a>📌参数更新和学习率调整</h3><h4 id="🔧基本参数更新公式"><a href="#🔧基本参数更新公式" class="headerlink" title="🔧基本参数更新公式"></a>🔧基本参数更新公式</h4><p>在第$t$个迭代中，参数$\theta^i$的更新公式为：<br>$$<br>  \theta_{t+1}^i \leftarrow \theta_t^i \eta g_t^i \quad (3.14)<br>$$<br>  其中$g_t^i$是在$\theta &#x3D; \theta_t$时，参数$\theta^i$对损失$L$的微分。</p><h4 id="🔧梯度计算"><a href="#🔧梯度计算" class="headerlink" title="🔧梯度计算"></a>🔧梯度计算</h4><p>梯度$g_t^i$的计算公式为：<br>$$<br>  g_t^i &#x3D; \left.\frac{\partial L}{\partial \theta^i}\right|_{\theta&#x3D;\theta_t} \quad (3.15)<br>$$</p><h4 id="🔧定制化学习率"><a href="#🔧定制化学习率" class="headerlink" title="🔧定制化学习率"></a>🔧定制化学习率</h4><p>将学习率$\eta$调整为参数相关的学习率$\frac{\eta}{\sigma_t^i}$：<br>$$<br>  \theta_{t+1}^i \leftarrow \theta_t^i \frac{\eta}{\sigma_t^i} g_t^i \quad (3.16)<br>$$<br>  其中$\sigma_t^i$与参数$i$和迭代$t$相关。</p><h4 id="🔧梯度的均方根"><a href="#🔧梯度的均方根" class="headerlink" title="🔧梯度的均方根"></a>🔧梯度的均方根</h4><p>参数的更新过程，其中$\sigma_0^i$的计算为：<br>$$<br>  \sigma_0^i &#x3D; \sqrt{\left(g_0^i\right)^2} &#x3D; \left|g_0^i\right| \quad (3.18)<br>$$</p><h4 id="🔧参数更新的迭代过程"><a href="#🔧参数更新的迭代过程" class="headerlink" title="🔧参数更新的迭代过程"></a>🔧参数更新的迭代过程</h4><p>第二次参数更新：<br>$$<br>  \theta_2^i \leftarrow \theta_1^i \frac{\eta}{\sigma_1^i} g_1^i \quad (3.19)<br>$$<br>  其中$\sigma_1^i$是过去所有计算出来的梯度的平方的平均再开根号。</p><h4 id="🔧迭代更新公式"><a href="#🔧迭代更新公式" class="headerlink" title="🔧迭代更新公式"></a>🔧迭代更新公式</h4><p>第$t+1$次更新参数的公式为：<br>$$<br>  \theta_{t+1}^i \leftarrow \theta_t^i \frac{\eta}{\sigma_t^i} g_t^i \quad \sigma_t^i &#x3D; \sqrt{\frac{1}{t+1}\sum_{i&#x3D;0}^t\left(g_t^i\right)^2} \quad (3.22)<br>$$</p><h4 id="🔧参数更新的动态调整"><a href="#🔧参数更新的动态调整" class="headerlink" title="🔧参数更新的动态调整"></a>🔧参数更新的动态调整</h4><p>根据梯度的不同，每一个参数的梯度的不同，自动调整学习率的大小，使得参数更新更加有效。</p><h4 id="🔧参数更新的可视化"><a href="#🔧参数更新的可视化" class="headerlink" title="🔧参数更新的可视化"></a>🔧参数更新的可视化</h4><p>图 3.24 展示了两个参数$\theta^1$和$\theta^2$的更新情况，其中$\theta^1$坡度小，$\theta^2$坡度大。根据公式 (3.22)，<strong>不同的梯度大小导致不同的学习率调整，从而影响参数更新的步伐。</strong></p><p><img src="/img/downloaded/aHR0cHM6_e0c9ce493ab549ab873ca72f7375cde3.png" alt="在这里插入图片描述"></p><h3 id="📌AdaGrad算法的问题"><a href="#📌AdaGrad算法的问题" class="headerlink" title="📌AdaGrad算法的问题"></a>📌AdaGrad算法的问题</h3><p><img src="/img/downloaded/aHR0cHM6_b46b6b35f6024fd3a7d77c46487347e9.png" alt="在这里插入图片描述"><br><strong>当模型接近最优点时，由于在某些方向上梯度非常小，AdaGrad算法会导致学习率变得非常大，从而可能出现“爆炸”现象，使得模型突然偏离最优路径</strong>。累积的 $\sigma_t^i$值<strong>在梯度较小的方向上会变得非常大，导致学习步伐过大。</strong></p><h2 id="🎯RMSProp"><a href="#🎯RMSProp" class="headerlink" title="🎯RMSProp"></a>🎯RMSProp</h2><p><strong>RMSprop 是一种自适应学习率的优化算法</strong>，由 Geoffrey Hinton 在 Coursera 深度学习课程中提出。</p><h3 id="📌算法的步骤"><a href="#📌算法的步骤" class="headerlink" title="📌算法的步骤"></a>📌算法的步骤</h3><h4 id="🔧初始梯度的均方根"><a href="#🔧初始梯度的均方根" class="headerlink" title="🔧初始梯度的均方根"></a>🔧初始梯度的均方根</h4><p>RMSprop 的第一步与 Adagrad 相同，<strong>计算初始梯度的绝对值作为均方根</strong>：<br>$$<br>  \sigma_0^i &#x3D; \sqrt{\left(g_0^i\right)^2} &#x3D; \left|g_0^i\right| \quad (3.23)<br>$$</p><h3 id="📌参数更新公式"><a href="#📌参数更新公式" class="headerlink" title="📌参数更新公式"></a>📌参数更新公式</h3><p>第二次更新参数的公式，<strong>引入超参数 $\alpha$来调整梯度的重要性</strong>：<br>$$<br>  \theta_2^i \leftarrow \theta_1^i \frac{\eta}{\sigma_1^i} g_1^i \quad \sigma_1^i &#x3D; \sqrt{\alpha \left(\sigma_0^i\right)^2 + (1-\alpha) \left(g_1^i\right)^2} \quad (3.24)<br>$$<br>  其中 $0 &lt; \alpha &lt; 1$。</p><h4 id="🔧迭代更新过程"><a href="#🔧迭代更新过程" class="headerlink" title="🔧迭代更新过程"></a>🔧迭代更新过程</h4><p>后续的参数更新过程，<strong>通过递归方式计算 $\sigma_t^i$来动态调整学习率</strong>：<br>$$<br>  \begin{aligned}<br>  \theta_3^i &amp;\leftarrow \theta_2^i \frac{\eta}{\sigma_2^i} g_2^i \quad \sigma_2^i &#x3D; \sqrt{\alpha \left(\sigma_1^i\right)^2 + (1-\alpha) \left(g_2^i\right)^2} \<br>  \vdots \<br>  \theta_{t+1}^i &amp;\leftarrow \theta_t^i \frac{\eta}{\sigma_t^i} g_t^i \quad \sigma_t^i &#x3D; \sqrt{\alpha \left(\sigma_{t-1}^i\right)^2 + (1-\alpha) \left(g_t^i\right)^2}<br>  \end{aligned}<br>$$<br><img src="/img/downloaded/aHR0cHM6_cf67b006a5fc42629d9e68e9ac35cc37.png" alt="在这里插入图片描述"></p><h3 id="📌算法特性"><a href="#📌算法特性" class="headerlink" title="📌算法特性"></a>📌算法特性</h3><p>RMSprop <strong>通过超参数 $\alpha$来决定当前梯度 $g_t^i$相较于之前梯度</strong>的重要性。<strong>这使得算法能够快速响应梯度的变化，实现更灵活的参数更新。</strong><br>在误差表面的不同区域，例如从 A 到 B 的平坦区域，<strong>RMSprop 允许较大的学习步伐</strong>；而在 B 到 C 的陡峭区域，通过增加 $\alpha$值，可以<strong>快速减小学习步伐，实现“踩刹车”的效果。</strong></p><p><img src="/img/downloaded/aHR0cHM6_3f693ea3ebba414e83fcc79cd5d7df59.png" alt="在这里插入图片描述"></p><h2 id="🎯Adam"><a href="#🎯Adam" class="headerlink" title="🎯Adam"></a>🎯Adam</h2><blockquote><p><strong>最常用的优化的策略或者优化器（optimizer） 是Adam（Adaptive moment estimation）</strong> 。<br>Adam 可以看作 <strong>RMSprop 加上动量</strong>，其使用动量作为参数更新方向，并且能够自适应调整学习率。PyTorch 里面已经写好了 Adam 优化器。</p></blockquote><h2 id="🎯学习率调度"><a href="#🎯学习率调度" class="headerlink" title="🎯学习率调度"></a>🎯学习率调度</h2><p>学习率调度是一种策略，它使得学习率 $\eta$<strong>随着时间或训练的迭代次数逐渐减小</strong>。<strong>学习率衰减（learning rate decay）或学习率退火（learning rate annealing）是学习率调度中的一种常见策略</strong>。</p><h3 id="📌学习率衰减"><a href="#📌学习率衰减" class="headerlink" title="📌学习率衰减"></a>📌学习率衰减</h3><p>通过引入学习率衰减，可以<strong>避免在训练后期由于学习率过大导致的不稳定现象</strong>。学习率调度<strong>允许模型在训练初期快速收敛，在训练后期则通过减小学习率，使模型能够稳定地接近最优点</strong>。<br><img src="/img/downloaded/aHR0cHM6_1a64095d74924d7bb04096c9235d4a6b.png" alt="在这里插入图片描述"></p><h3 id="📌学习率调度的公式"><a href="#📌学习率调度的公式" class="headerlink" title="📌学习率调度的公式"></a>📌学习率调度的公式</h3><p>引入学习率调度后的参数更新公式为：<br>$$<br>\theta_{t+1}^i \leftarrow \theta_t^i \frac{\eta_t}{\sigma_t^i} g_t^i \quad (3.26)<br>$$<br>其中 $\eta_t$是随时间变化的学习率。</p><h3 id="📌预热"><a href="#📌预热" class="headerlink" title="📌预热"></a>📌预热</h3><blockquote><p>除了学习率下降以外，还有另外一个经典的学习率调度的方式———预热。</p></blockquote><blockquote><p><strong>预热的方法是让学习率先变大后变小</strong>，至于变到多大、变大的速度、变小的速度是超参数。<br>除了残差网络， <strong>BERT 和 Transformer 的训练也都使用了预<br>热</strong>。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_0c1596cc34d14a77833076d2db96d869.png" alt="在这里插入图片描述"></p><h3 id="📌RAdam"><a href="#📌RAdam" class="headerlink" title="📌RAdam"></a>📌RAdam</h3><blockquote><p>RAdam的应用场景非常广泛，<strong>尤其适用于那些对学习率预热敏感的模型和任务</strong>。<br>RAdam 是 Ranger 优化器的重要组成部分。Ranger 优化器结合了 RAdam 和 LookAhead，在深度学习中表现出色，能够提升模型的能力和收敛速度。</p></blockquote><h4 id="🔧无需预热"><a href="#🔧无需预热" class="headerlink" title="🔧无需预热"></a>🔧无需预热</h4><p>RAdam 无需预热，就能避免模型收敛至“局部最优解”。 </p><h4 id="🔧优于手动预热"><a href="#🔧优于手动预热" class="headerlink" title="🔧优于手动预热"></a>🔧优于手动预热</h4><p>RAdam 自动提供方差缩减，在各种预热长度和各种学习率下都优于传统的手动预热调整。 </p><h4 id="🔧RAdam与Adam性能对比"><a href="#🔧RAdam与Adam性能对比" class="headerlink" title="🔧RAdam与Adam性能对比"></a>🔧RAdam与Adam性能对比</h4><table><thead><tr><th>性能指标</th><th>RAdam</th><th>Adam</th></tr></thead><tbody><tr><td>收敛速度</td><td>有望为几乎所有 AI 应用提供更好的收敛速度。</td><td>在前期的表现一般不好，前期数据少，很难总结出一个靠谱的初始动量，也更容易陷入局部最优，所以一般需要几个 batch 的预热阶段让自适应动量更靠谱。</td></tr><tr><td>训练稳定性</td><td>对不同的学习速度具有鲁棒性，同时仍具有更好的训练稳定性（对选择的学习率不那么敏感）。</td><td>在没有预热的情况下使用时，在初始迭代期间，梯度具有较大的方差。这种较大的差异会导致最小值的过冲，从而导致较差的最优值。</td></tr><tr><td>准确性和泛化性</td><td>可立即提高 AI 准确度和泛化性。</td><td>存在很多问题，效果甚至没有简单的 SGD+Momentum 好。</td></tr><tr><td>以下是对您提供的文件内容的总结，使用Markdown格式：</td><td></td><td></td></tr></tbody></table><hr><h2 id="🎯学习率调度与优化器变形"><a href="#🎯学习率调度与优化器变形" class="headerlink" title="🎯学习率调度与优化器变形"></a>🎯学习率调度与优化器变形</h2><h3 id="📌动量与均方根的计算差异"><a href="#📌动量与均方根的计算差异" class="headerlink" title="📌动量与均方根的计算差异"></a>📌动量与均方根的计算差异</h3><p><strong>动量 $m_{t}^{i}$</strong>：<strong>考虑了过去所有梯度的方向和大小，通过将所有梯度直接相加来计算</strong>，因此保留了梯度的方向信息。<br><strong>均方根 $\sigma_{t}^{i}$</strong>：仅考虑了梯度的大小，<strong>通过计算梯度的平方和的平方根来得出，忽略了梯度的方向</strong>。</p><p>尽管 $m_{t}^{i}$ 和 $\sigma_{t}^{i}$ 都使用了过去所有的梯度，但由于<strong>计算方式的不同，它们并不会相互抵消</strong>。</p><h3 id="📌优化总结"><a href="#📌优化总结" class="headerlink" title="📌优化总结"></a>📌优化总结</h3><p>从最基本的梯度下降法演化至包含动量的优化版本，如式(3.27)所示：<br>  $$<br>  \theta_{t+1}^i \leftarrow \theta_t^i \frac{\eta_t}{\sigma_t^i} m_t^i \qquad (3.27)<br>  $$<br>  其中，$m_t^i$ 表示动量。</p><p>动量 $m_t^i$ 不仅考虑了某一时刻的梯度方向，而是<strong>对所有梯度方向进行了加权总和，作为参数更新的方向</strong>。<br><strong>更新步伐的大小</strong>由 $\frac{m_t^i}{\sigma_t^i}$ 决定。</p><h1 id="🚩Task-2-2"><a href="#🚩Task-2-2" class="headerlink" title="🚩Task 2.2"></a>🚩Task 2.2</h1><h2 id="🎯什么是分类"><a href="#🎯什么是分类" class="headerlink" title="🎯什么是分类"></a>🎯什么是分类</h2><blockquote><p><strong>分类与回归是深度学习最常见的两种问题</strong></p></blockquote><h2 id="🎯回归与分类的区别和联系"><a href="#🎯回归与分类的区别和联系" class="headerlink" title="🎯回归与分类的区别和联系"></a>🎯回归与分类的区别和联系</h2><blockquote><p>回归是输入一个向量 x，输出 yˆ，我们希望 yˆ 跟某一个标签 y 越接近越好， y 是要学习的目标。而分类可当作回归来看，输入 x 后，输出仍然是一个标量 yˆ，要让它跟正确答案的那个类越接近越好。 </p></blockquote><h3 id="📌回归"><a href="#📌回归" class="headerlink" title="📌回归"></a>📌回归</h3><p>回归任务涉及输入一个向量 $x$ 并预测一个连续值 $y$。<br>目标是使得预测值 $y$ 尽可能接近真实标签值。</p><h3 id="📌分类"><a href="#📌分类" class="headerlink" title="📌分类"></a>📌分类</h3><p>分类可以视为一种特殊的回归问题，其中输入 $x$ 后，输出是一个标量 $y$。<br>目的是让输出 $y$ 与正确类别的编号尽可能接近。</p><h2 id="🎯使用数字表示类别会出现的问题"><a href="#🎯使用数字表示类别会出现的问题" class="headerlink" title="🎯使用数字表示类别会出现的问题"></a>🎯使用数字表示类别会出现的问题</h2><pre><code>引出独热编码</code></pre><p><strong>直接使用数字来表示类别可能会导致问题，尤其是当类别之间存在某种关系时。</strong></p><blockquote><p>例如，根据身高和体重预测年级时，一年级和二年级在逻辑上比一年级和三年级更接近。</p></blockquote><h2 id="🎯什么是独热编码（One-Hot-Encoding）"><a href="#🎯什么是独热编码（One-Hot-Encoding）" class="headerlink" title="🎯什么是独热编码（One-Hot Encoding）"></a>🎯什么是独热编码（One-Hot Encoding）</h2><p><strong>当类别之间没有固有的顺序或数值关系时，使用独热编码来表示类别是一种常见做法。</strong><br>独热编码通过<strong>为每个类别分配一个唯一的二进制向量，避免了类别之间不恰当的数值关系。</strong><br><strong>在分类问题中尤其有用，因为它允许模型更准确地学习类别之间的关系。</strong></p><p><img src="/img/downloaded/aHR0cHM6_d14bc7f21bd8480684b1cbeba4820441.png" alt="在这里插入图片描述"></p><blockquote><p>图3.30展示了如何使用数字和独热编码来表示类别。类别编号（如1、2、3）可能暗示它们之间的某种关系，而独热编码则不包含这样的预设关系。</p></blockquote><blockquote><p><strong>如果用独热向量计算距离的话，类两两之间的距离都是一样的</strong><br>以下是对您提供的文件内容的总结：</p></blockquote><h3 id="📌多输出神经网络结构"><a href="#📌多输出神经网络结构" class="headerlink" title="📌多输出神经网络结构"></a>📌多输出神经网络结构</h3><p><img src="/img/downloaded/aHR0cHM6_6cd73e45d00c42f5b842704208c7e90a.png" alt="在这里插入图片描述"></p><p><strong>计算 $\hat{y}_1$</strong>:<br>将输入特征 $x_1$ 与权重相乘，加上偏置，得到 $a_1$。<br>将 $a_1$ 与另一组权重相乘，加上偏置，得到 $\hat{y}_1$。</p><p><strong>计算 $\hat{y}_2$</strong>:<br>将输入特征 $x_2$ 与权重相乘，加上偏置，得到 $a_2$。<br>将 $a_2$ 与另一组权重相乘，加上偏置，得到 $\hat{y}_2$。</p><p> <strong>计算 $\hat{y}_3$</strong>:<br>将输入特征 $x_3$ 与权重相乘，加上偏置，得到 $a_3$。<br> 将 $a_3$ 与另一组权重相乘，加上偏置，得到 $\hat{y}_3$。</p><p>每个输出 $\hat{y}$ 是通过对输入特征的不同线性组合并加上偏置来计算的。使得这些输出 $\hat{y}_1, \hat{y}_2, \hat{y}_3$ 尽可能接近它们各自的目标值。<br><strong>偏置使得这些输出尽可能接近它们的目标值，以实现最佳的预测性能。</strong></p><h2 id="🎯带有-softmax-的分类"><a href="#🎯带有-softmax-的分类" class="headerlink" title="🎯带有 softmax 的分类"></a>🎯带有 softmax 的分类</h2><blockquote><p>按照上述的设定，分类实际过程是：输入 x，乘上 W，加上 b，通过激活函数 σ，乘上W ′，再加上 b′ 得到向量 yˆ。<br>但实际做分类的时候，往往会把 yˆ 通过 softmax 函数得到 y′，才去计算 y′ 跟 yˆ 之间的距离。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_58a16b2b20d04e2ca70e7dbe121410e0.png" alt="在这里插入图片描述"></p><h3 id="📌为什么分类过程中要加上softmax函数"><a href="#📌为什么分类过程中要加上softmax函数" class="headerlink" title="📌为什么分类过程中要加上softmax函数"></a>📌为什么分类过程中要加上softmax函数</h3><p><img src="/img/downloaded/aHR0cHM6_d0aaab477265406899e7be95004fd606.png" alt="在这里插入图片描述"></p><blockquote><p>softmax 的计算如式 (3.28) 所示，先把所有的 y 取一个指数（负数取指数后也会变成正的），再对其做归一化（除掉所有 y 的指数值的和）得到 y′。</p></blockquote><h3 id="📌Softmax-函数及其特性"><a href="#📌Softmax-函数及其特性" class="headerlink" title="📌Softmax 函数及其特性"></a>📌Softmax 函数及其特性</h3><p><img src="/img/downloaded/aHR0cHM6_0d75ef9509af4272b2626f83b1d5379a.png" alt="在这里插入图片描述"><br>在考虑三个类别的情况下，Softmax 函数的应用(图3.33）</p><p><strong>Softmax 函数</strong> 用于将一个向量或一组实数转换成另一个向量，其中转换后的向量元素值在 0 到 1 之间，并且所有元素的和为 1。<br>公式为：<br>  $$<br>  y_i^{\prime} &#x3D; \frac{\exp\left(y_i\right)}{\sum_j \exp\left(y_i\right)} \qquad (3.28)<br>  $$<br>  其中$y_i$ 是输入向量中的第$i$ 个元素，$y_i^{\prime}$ 是输出向量中的第$i$ 个元素。</p><h4 id="🔧特性"><a href="#🔧特性" class="headerlink" title="🔧特性"></a>🔧特性</h4><ol><li><strong>Softmax 函数除了进行归一化，使得输出值在 0 到 1 之间并总和为 1 之外，还有将大数值与小数值的差距进一步拉大的效果</strong>。</li><li>输出值$y_i^{\prime}$ 满足$1 &gt; y_i^{\prime} &gt; 0$，并且所有输出值之和为 1。</li></ol><h3 id="📌Sigmoid-函数与-Softmax-函数的比较"><a href="#📌Sigmoid-函数与-Softmax-函数的比较" class="headerlink" title="📌Sigmoid 函数与 Softmax 函数的比较"></a>📌Sigmoid 函数与 Softmax 函数的比较</h3><h4 id="🔧两分类问题"><a href="#🔧两分类问题" class="headerlink" title="🔧两分类问题"></a>🔧两分类问题</h4><p>在处理两个类别的问题时，通常直接使用 <strong>Sigmoid 函数</strong> 而不是 Softmax。<br><strong>当只有两个类别时，Sigmoid 函数和 Softmax 函数是等价的</strong>。</p><h4 id="🔧多分类问题"><a href="#🔧多分类问题" class="headerlink" title="🔧多分类问题"></a>🔧多分类问题</h4><p><strong>在涉及三个或更多类别的情况下，Softmax 函数是首选</strong>，因为它可以处理多类别的输出，并保证输出值的总和为 1。</p><h2 id="🎯什么是分类损失"><a href="#🎯什么是分类损失" class="headerlink" title="🎯什么是分类损失"></a>🎯什么是分类损失</h2><h3 id="📌损失函数"><a href="#📌损失函数" class="headerlink" title="📌损失函数"></a>📌损失函数</h3><p>在分类问题中，损失函数用于衡量模型预测值$y’$ 与实际标签$y$ 之间的差异。</p><h3 id="📌均方误差-MSE"><a href="#📌均方误差-MSE" class="headerlink" title="📌均方误差 (MSE)"></a>📌均方误差 (MSE)</h3><p><strong>公式</strong>：<br>  $$<br>  e &#x3D; \sum_i \left(y_i y_i’\right)^2 \quad (3.29)<br>  $$<br><strong>计算预测值与实际值之间差的平方和。</strong></p><h3 id="📌交叉熵-Cross-Entropy"><a href="#📌交叉熵-Cross-Entropy" class="headerlink" title="📌交叉熵 (Cross-Entropy)"></a>📌交叉熵 (Cross-Entropy)</h3><p><strong>公式</strong>：<br>  $$<br>  e &#x3D; -\sum_i y_i \ln y_i’ \quad (3.30)<br>  $$<br><strong>衡量实际标签与通过 softmax 转换后的预测值之间的差异。</strong></p><p><strong>优点</strong>：当预测值与实际值相同时，交叉熵最小化，此时均方误差也最小。</p><h3 id="📌使用-softmax-的好处"><a href="#📌使用-softmax-的好处" class="headerlink" title="📌使用 softmax 的好处"></a>📌使用 softmax 的好处</h3><blockquote><p>如图 3.35 所示，有一个三类的分类，网络先输出 y1、 y2 和 y3，在通过 softmax 以后，产生 y1′ 、 y2′ 和 y3′ 。<br>假设正确答案是 [1, 0, 0]T，要计算 [1, 0, 0]T 跟 y1′ 、 y2′ 和 y3′ 之间的距离 e， e 可以是均方误差或交叉熵。<br>假设 y1 的变化是从-10 到 10， y2 的变化也是从-10 到 10， y3 就固定设成-1000。因为 y3 的值很小，通过 softmax 以后， y3′ 非常趋近于 0，它跟正确答案非常接近，且它对结果影响很少。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_139ec3c735a6474886cc99d4e3e1ff4e.png" alt="在这里插入图片描述"><br>Softmax 将网络输出转换为概率分布，使得每个类别的预测值在 0 到 1 之间，并且总和为 1。</p><h2 id="🎯损失函数的选择对优化的影响"><a href="#🎯损失函数的选择对优化的影响" class="headerlink" title="🎯损失函数的选择对优化的影响"></a>🎯损失函数的选择对优化的影响</h2><h3 id="📌交叉熵"><a href="#📌交叉熵" class="headerlink" title="📌交叉熵"></a>📌交叉熵</h3><ol><li><strong>优点</strong>：在分类问题中，交叉熵比均方误差更常用，因为它在优化过程中表现更好，尤其是在参数初始化远离最优值时。</li><li><strong>优化难度</strong>：使用交叉熵时，即使在损失较大的区域，梯度仍然存在，使得模型可以通过梯度下降法有效地优化。</li></ol><h3 id="📌均方误差"><a href="#📌均方误差" class="headerlink" title="📌均方误差"></a>📌均方误差</h3><ol><li><strong>缺点</strong>：在损失较大的区域，均方误差可能导致梯度非常小，使得梯度下降法难以优化。</li><li><strong>优化难度</strong>：如果没有好的优化器，使用均方误差可能导致模型训练困难。</li></ol><p><img src="/img/downloaded/aHR0cHM6_92f0eeeb07fc45e8a578459dfd39832f.png" alt="在这里插入图片描述"></p><p>图3.35比较了均方误差和交叉熵在损失表面上的差异，以及它们对优化过程的影响。</p><h3 id="📌总结"><a href="#📌总结" class="headerlink" title="📌总结"></a>📌总结</h3><ol><li>在分类问题中，交叉熵是首选的损失函数，因为它在优化过程中提供了更好的梯度信息。</li><li>均方误差可能在某些情况下导致优化困难，尤其是在模型初始化远离最优值时。</li><li>选择合适的损失函数对模型的训练效果和优化效率至关重要。</li></ol><h1 id="🚩Task-2-3"><a href="#🚩Task-2-3" class="headerlink" title="🚩Task 2.3"></a>🚩Task 2.3</h1><blockquote><p>（实践任务）：HW3(CNN)</p></blockquote><h2 id="🎯一键运行Notebook"><a href="#🎯一键运行Notebook" class="headerlink" title="🎯一键运行Notebook"></a>🎯一键运行Notebook</h2><blockquote><p>通过在卷积神经网络（CNN）模型的验证集上实现t-SNE（t分布随机邻域嵌入），可视化学习到的视觉表示，包括顶层和中间层的输出。<br>绘制特定类别的t-SNE可视化图</p></blockquote><h2 id="🎯实验结果"><a href="#🎯实验结果" class="headerlink" title="🎯实验结果"></a>🎯实验结果</h2><p><img src="/img/downloaded/aHR0cHM6_e380b21460ef4d5f9276a6d7432384bb.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_4986163e25cd4ae79d05633b94d84b39.png" alt="在这里插入图片描述"></p><h1 id="🚩-Task-3-1"><a href="#🚩-Task-3-1" class="headerlink" title="🚩 Task 3.1"></a>🚩 Task 3.1</h1><h2 id="🎯批量归一化（Batch-Normalization，-BN）"><a href="#🎯批量归一化（Batch-Normalization，-BN）" class="headerlink" title="🎯批量归一化（Batch Normalization， BN）"></a>🎯批量归一化（Batch Normalization， BN）</h2><p><strong>直接改误差表面的地貌，“把山铲平”，让它变得比较好训练</strong></p><blockquote><p><strong>一个“把山铲平”的想法</strong>。</p></blockquote><blockquote><p>不要小看优化这个问题，有时候就算误差表面是凸（convex）的，它就是一个碗的形状，都不一定很好训练。如图 3.37 所示，假设两个参数对损失的斜率差别非常大，在 w1 这个方向上面，斜率变化很小，在 w2 这个方向上面斜率变化很大。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_6b26886c33f5437da7d9e462d028a26c.png" alt="在这里插入图片描述"></p><h2 id="🎯学习率和误差表面优化"><a href="#🎯学习率和误差表面优化" class="headerlink" title="🎯学习率和误差表面优化"></a>🎯学习率和误差表面优化</h2><p>在机器学习模型训练中，<strong>固定的学习率可能导致难以获得理想的结果。为了解决这一问题，引入了自适应学习率和高级优化算法</strong>，如Adam，这些方法能够更好地调整学习率，从而优化训练过程。</p><h3 id="📌误差表面分析"><a href="#📌误差表面分析" class="headerlink" title="📌误差表面分析"></a>📌误差表面分析</h3><p><strong>误差表面可能因为参数$w_1$和$w_2$的斜率差异而变得难以优化。</strong><br><strong>通过修改误差表面，尝试使其更易于优化。</strong></p><h3 id="📌线性模型示例"><a href="#📌线性模型示例" class="headerlink" title="📌线性模型示例"></a>📌线性模型示例</h3><p>考虑一个简单的线性模型，输入为$x_1$和$x_2$，参数为$w_1$和$w_2$。<br>模型输出$\hat{y}$计算为$\hat{y} &#x3D; w_1 \cdot x_1 + w_2 \cdot x_2 + b$。<br>损失函数$L$定义为所有训练数据误差$e$的总和，即$L &#x3D; \sum e$，其中$e &#x3D; \hat{y} y$。</p><h2 id="🎯特征归一化的重要性"><a href="#🎯特征归一化的重要性" class="headerlink" title="🎯特征归一化的重要性"></a>🎯特征归一化的重要性</h2><p>在训练模型时，<strong>如果输入特征的数值范围差异很大，可能会导致难以训练的误差表面</strong>。为了解决这个问题，<strong>引入了特征归一化技术，如Z值归一化（也称为标准化），它有助于使误差表面更加平滑，从而优化训练过程</strong>。</p><h3 id="📌Z值归一化（标准化）"><a href="#📌Z值归一化（标准化）" class="headerlink" title="📌Z值归一化（标准化）"></a>📌Z值归一化（标准化）</h3><p>归一化处理通过计算每个特征维度的平均值$m_i$和标准差$\sigma_i$，然后应用以下公式进行归一化：<br>$$\tilde{x}_i^r \leftarrow \frac{x_i^r m_i}{\sigma_i}$$<br>归一化后，特征的平均值为0，方差为1，有助于梯度下降算法更有效地收敛。</p><h2 id="🎯深度学习中的特征归一化"><a href="#🎯深度学习中的特征归一化" class="headerlink" title="🎯深度学习中的特征归一化"></a>🎯深度学习中的特征归一化</h2><p><strong>在深度学习中，即使输入特征已经归一化</strong>，<strong>中间层的特征</strong>$z$<strong>也可能需要进一步的归一化处理，以确保模型训练的稳定性和效率</strong>。</p><h3 id="📌归一化中间层特征"><a href="#📌归一化中间层特征" class="headerlink" title="📌归一化中间层特征"></a>📌归一化中间层特征</h3><p>对于中间层的特征$z$，计算其平均值$\mu$和标准差$\sigma$，然后应用以下公式进行归一化：<br>$$\mu &#x3D; \frac{1}{N} \sum_{i&#x3D;1}^N z_i$$<br>$$\sigma &#x3D; \sqrt{\frac{1}{N} \sum_{i&#x3D;1}^N (z_i - \mu)^2}$$<br>$$\tilde{z}_i &#x3D; \frac{z_i - \mu}{\sigma}$$<br>归一化可以放在激活函数之前或之后，具体取决于所使用的激活函数类型。</p><p>通过这些方法，可以有效地优化深度学习模型的训练过程，提高模型的性能和泛化能力。</p><p><img src="/img/downloaded/aHR0cHM6_505f8d8aa22c4fe39bffa4d2ec923c63.png" alt="## 考虑深度学习"><br>其中，除号代表逐元素的除，即分子分母两个向量对应元素相除。</p><p><img src="/img/downloaded/aHR0cHM6_6578751fd45d475ab9ed1a60c18b844f.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_7a4c7c98a30f4460b319e836792a4a10.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_f8acc678b366409bb4a0913923d7ff4b.png" alt="在这里插入图片描述"></p><p><img src="/img/downloaded/aHR0cHM6_e3559848a8154d44bb9bce913c587bed.png" alt="在这里插入图片描述"></p><p>如果做归一化以后， z˜ 的平均值一定是 0，如果平均值是 0 的话，这会给网络一些限制，这个限制可能会带来负面的影响，所以需要<strong>把 β, γ 加回去，让网络隐藏层的输出平均值不是 0。让网络学习 β, γ 来调整一下输出的分布，从而来调整 zˆ 的分布</strong></p><blockquote><p><strong>以上说的都是训练的部分，测试有时候又称为推断（inference）</strong>。</p></blockquote><h2 id="🎯批量归一化（Batch-Normalization）在测试阶段的应用"><a href="#🎯批量归一化（Batch-Normalization）在测试阶段的应用" class="headerlink" title="🎯批量归一化（Batch Normalization）在测试阶段的应用"></a>🎯批量归一化（Batch Normalization）在测试阶段的应用</h2><h3 id="📌使用移动平均和方差"><a href="#📌使用移动平均和方差" class="headerlink" title="📌使用移动平均和方差"></a>📌使用移动平均和方差</h3><p>在训练阶段，批量归一化通过计算每个批次的均值和方差来归一化数据。在测试阶段，<strong>利用训练期间累积的移动平均均值和方差来处理测试数据，确保模型的稳定性</strong>。</p><p><img src="/img/downloaded/aHR0cHM6_e34f524966b14ad1a4b1e4c66c216ace.png" alt="在这里插入图片描述"><br>使用训练过程中计算的移动平均均值 $\mu_{\text{moving}}$ 和方差 $\sigma^2_{\text{moving}}$ 替代批次统计量：</p><p>$$<br>\hat{x}<em>{\text{test}} &#x3D; \frac{x \mu</em>{\text{moving}}}{\sqrt{\sigma^2_{\text{moving}} + \epsilon}}<br>$$</p><p>$$<br>y_{\text{test}} &#x3D; \gamma \hat{x}_{\text{test}} + \beta<br>$$</p><p>这样，即使在<strong>测试时单个样本的分布可能与训练时的批次分布不同，模型仍然能够以一种稳定的方式进行推理</strong>。</p><h4 id="🔧不依赖批次统计"><a href="#🔧不依赖批次统计" class="headerlink" title="🔧不依赖批次统计"></a>🔧不依赖批次统计</h4><p>测试阶段不计算新的统计量，而是<strong>直接使用训练阶段得到的全局均值和方差，独立处理每个测试样本</strong>。</p><h4 id="🔧减少内部协变量偏移"><a href="#🔧减少内部协变量偏移" class="headerlink" title="🔧减少内部协变量偏移"></a>🔧减少内部协变量偏移</h4><p>批量归一化通过<strong>使用固定的全局统计量</strong>，继续在测试阶段减少网络各层激活分布的变化，从而<strong>提高模型的稳定性</strong>。</p><h4 id="🔧提高泛化能力"><a href="#🔧提高泛化能力" class="headerlink" title="🔧提高泛化能力"></a>🔧提高泛化能力</h4><p>测试阶段应用批量归一化有助于<strong>提升模型对新数据的泛化能力</strong>，<strong>减少对训练数据特定特征的过度拟合</strong>。</p><h4 id="🔧无需调整学习率"><a href="#🔧无需调整学习率" class="headerlink" title="🔧无需调整学习率"></a>🔧无需调整学习率</h4><p><strong>由于测试阶段不涉及梯度更新，因此不需要调整学习率</strong>，简化了模型的应用过程。</p><h4 id="🔧计算效率"><a href="#🔧计算效率" class="headerlink" title="🔧计算效率"></a>🔧计算效率</h4><p><strong>在测试阶段，批量归一化避免了复杂的统计计算</strong>，从而提高了推理过程的计算效率。</p><h4 id="🔧模型部署"><a href="#🔧模型部署" class="headerlink" title="🔧模型部署"></a>🔧模型部署</h4><p>批量归一化在模型部署时作为一个固定步骤，确保了模型在不同环境中的一致性和可靠性。</p><h2 id="🎯内部协变量偏移"><a href="#🎯内部协变量偏移" class="headerlink" title="🎯内部协变量偏移"></a>🎯内部协变量偏移</h2><p><strong>批量归一化最初被提出来是为了解决神经网络中的内部协变量偏移问题</strong>。这个问题说的是，网络中每一层的输入数据分布会随着前面层的参数更新而变化，这可能会让训练过程变得不太稳定。<br><strong>批量归一化通过规范化层间的输出，减少这种分布变化，帮助训练过程更稳定。</strong></p><p><img src="/img/downloaded/aHR0cHM6_31171673034c427c8dc262d4922a7356.png" alt="在这里插入图片描述"></p><h3 id="📌对优化的帮助"><a href="#📌对优化的帮助" class="headerlink" title="📌对优化的帮助"></a>📌对优化的帮助</h3><p><strong>论文《How Does Batch Normalization Help Optimization?》提出了不同的看法，质疑内部协变量偏移是否真的是训练网络的主要障碍</strong>。研究发现，<strong>即使存在内部协变量偏移，也不一定会对训练产生负面影响</strong>。实验显示，无论是否使用批量归一化，网络层输出的分布变化对训练的影响都不大，梯度方向的变化也不显著。这表明<strong>批量归一化的有效性可能并非仅仅因为它解决了内部协变量偏移</strong>。</p><h3 id="📌误差表面平滑化"><a href="#📌误差表面平滑化" class="headerlink" title="📌误差表面平滑化"></a>📌误差表面平滑化</h3><p><strong>论文还提出了另一个观点，即批量归一化可能通过改变网络的误差表面，使其变得更加平滑，从而有助于优化过程。这个观点得到了理论和实验的支持</strong>。论文还指出还有其他方法也可以使误差表面平滑化，效果可能与批量归一化相似或更好。</p><h3 id="📌归一化方法的多样性"><a href="#📌归一化方法的多样性" class="headerlink" title="📌归一化方法的多样性"></a>📌归一化方法的多样性</h3><p><strong>批量归一化不是唯一的归一化技术。实际上，存在多种归一化方法，包括批量重归一化、层归一化、实例归一化、组归一化、权重归一化和谱归一化等</strong>。可以根据具体的需求和场景选择合适的方法。</p><h1 id="🚩-Task-3-2-Task-3-3"><a href="#🚩-Task-3-2-Task-3-3" class="headerlink" title="🚩 Task 3.2 &amp;&amp; Task 3.3"></a>🚩 Task 3.2 &amp;&amp; Task 3.3</h1><blockquote><p>卷积神经网络(CNN)</p></blockquote><h2 id="🎯如何把图像输入到计算机里面"><a href="#🎯如何把图像输入到计算机里面" class="headerlink" title="🎯如何把图像输入到计算机里面"></a>🎯如何把图像输入到计算机里面</h2><blockquote><p>一张图像是一个<strong>三维的张量</strong>，其中<strong>一维代表图像的宽，另外一维代表图像的高，还有一维代表图像的通道（channel） 的数目</strong>。</p></blockquote><h2 id="🎯什么是卷积神经网络架构"><a href="#🎯什么是卷积神经网络架构" class="headerlink" title="🎯什么是卷积神经网络架构"></a>🎯什么是卷积神经网络架构</h2><blockquote><p>卷积神经网络（CNN）是一种经典的网络架构，常用于图像处理等计算机视觉任务。</p></blockquote><p><strong>通过卷积层提取图像特征，实现图像识别</strong>。</p><h2 id="🎯图像表示"><a href="#🎯图像表示" class="headerlink" title="🎯图像表示"></a>🎯图像表示</h2><p><img src="/img/downloaded/aHR0cHM6_b77708ce050146eea74588d076ce5af4.png" alt="在这里插入图片描述"></p><p><strong>图像可以被机器识别，机器通过图像识别图中的对象</strong>（如狗、飞机、汽车等）。<br><strong>彩色图像由红色、绿色、蓝色三种颜色的组合构成，每种颜色的强度不同</strong>。</p><h2 id="🎯向量化处理"><a href="#🎯向量化处理" class="headerlink" title="🎯向量化处理"></a>🎯向量化处理</h2><p>网络处理时，需要<strong>将图像的三维数据（宽度、高度、颜色通道）拉直成一维向量</strong>。<br><strong>每个像素点的颜色值被展开成一个向量，作为网络的输入</strong>。</p><h2 id="🎯标准化处理"><a href="#🎯标准化处理" class="headerlink" title="🎯标准化处理"></a>🎯标准化处理</h2><p>不同图像大小不一，通常将所有图像调整为相同大小再输入网络。<br><strong>标准化处理有助于统一网络输入，简化图像识别过程</strong>。</p><h2 id="🎯卷积层的作用"><a href="#🎯卷积层的作用" class="headerlink" title="🎯卷积层的作用"></a>🎯卷积层的作用</h2><p>卷积层通过卷积操作提取图像特征。<br><strong>卷积层的输出是特征图，特征图上的每个点代表图像中某种特征的存在概率</strong>。</p><h2 id="🎯特征图的解释"><a href="#🎯特征图的解释" class="headerlink" title="🎯特征图的解释"></a>🎯特征图的解释</h2><p>特征图上的<strong>每个点（激活值）代表网络对输入图像中特定特征的响应</strong>。<br><strong>激活值高表示相应特征在图像中出现的可能性大</strong>。</p><h2 id="🎯目标检测"><a href="#🎯目标检测" class="headerlink" title="🎯目标检测"></a>🎯目标检测</h2><p><img src="/img/downloaded/aHR0cHM6_f61051d5d2c54f8da474201771a4aba2.png" alt="在这里插入图片描述"></p><p>卷积神经网络也可用于目标检测，即<strong>识别图像中是否存在特定对象</strong>。<br><strong>通过卷积层提取的特征，可以用于判断图像中是否包含某些特定模式或对象</strong>。</p><h2 id="🎯感受野"><a href="#🎯感受野" class="headerlink" title="🎯感受野"></a>🎯感受野</h2><p>感受野是指网络中每个神经元“关心”的输入图像区域大小。<br><img src="/img/downloaded/aHR0cHM6_05ade20ce2b74995a9e1d16df8810bb9.png" alt="在这里插入图片描述"><br>卷积层的神经元只关注输入图像的一小部分区域，通过这种方式提取局部特征。</p><p> <strong>感受野是输入图像中影响特定神经元输出的局部区域。</strong></p><p> 每个神经元<strong>只关注输入图像的一个特定区域，这个区域称为它的感受野。</strong></p><h3 id="📌神经元和权重"><a href="#📌神经元和权重" class="headerlink" title="📌神经元和权重"></a>📌神经元和权重</h3><p><strong>每个神经元接收一个多维输入向量，并对每个维度赋予权重</strong>。<br>例如，一个神经元可能有 $3 \times 3 \times 3 &#x3D; 27$个权重，对应于3x3x3的输入数据。<br><img src="/img/downloaded/aHR0cHM6_c3be881dad944c0086ff8bca71937633.png" alt="在这里插入图片描述"></p><h3 id="📌偏置（Bias）"><a href="#📌偏置（Bias）" class="headerlink" title="📌偏置（Bias）"></a>📌偏置（Bias）</h3><p><strong>神经元除了权重外，还有一个偏置项，用于调整输出。</strong></p><h3 id="📌感受野的重叠"><a href="#📌感受野的重叠" class="headerlink" title="📌感受野的重叠"></a>📌感受野的重叠</h3><p><strong>不同神经元的感受野可以重叠，允许多个神经元同时响应图像中的同一个局部区域</strong>。<br>重叠的感受野有助于网络捕捉图像中的复杂特征。</p><p><img src="/img/downloaded/aHR0cHM6_42e7293167fe4f4e9f4538f5d1e65bfb.png" alt="在这里插入图片描述"></p><h3 id="📌感受野的大小和形状"><a href="#📌感受野的大小和形状" class="headerlink" title="📌感受野的大小和形状"></a>📌感受野的大小和形状</h3><p><strong>感受野的大小可以根据需要调整，不仅限于正方形，也可以是长方形或其他形状</strong>。<br>有的模式可能在小范围内就能被检测到，而有的则需要更大的范围。</p><h3 id="📌通道的选择性"><a href="#📌通道的选择性" class="headerlink" title="📌通道的选择性"></a>📌通道的选择性</h3><p><strong>感受野不仅可以覆盖所有颜色通道（如RGB），也可以只关注特定的颜色通道</strong>。<br>这允许网络对某些颜色通道中的特征更加敏感。</p><h3 id="📌设计感受野"><a href="#📌设计感受野" class="headerlink" title="📌设计感受野"></a>📌设计感受野</h3><p>设计感受野时，可以根据任务的需求和图像的特性来决定其大小、形状和覆盖的通道。<br><strong>经典的感受野安排方式会考虑如何有效地覆盖和响应图像的不同区域</strong>。</p><h2 id="🎯卷积操作"><a href="#🎯卷积操作" class="headerlink" title="🎯卷积操作"></a>🎯卷积操作</h2><p><img src="/img/downloaded/aHR0cHM6_f87e535e84e04b14928b66f91fcc9f14.png" alt="在这里插入图片描述"></p><p>卷积操作通过滑动窗口（卷积核或滤波器）在图像上移动，计算窗口内像素与卷积核值的点积。</p><h3 id="📌步幅"><a href="#📌步幅" class="headerlink" title="📌步幅"></a>📌步幅</h3><p><img src="/img/downloaded/aHR0cHM6_f8afb1ce9b574f77867b34dc192fdd68.png" alt="在这里插入图片描述"></p><blockquote><p>我们把左上角的感受野往右移一个步幅，就制造出一个新的守备范围，即新的感受野。移动的量称为步幅（stride） ，图 4.9 中的这个例子里面，步幅就等于 2。</p></blockquote><p>感受野移动的距离</p><p><strong>每次移动的步长称为步幅，步幅影响感受野的重叠程度。</strong></p><h3 id="📌填充"><a href="#📌填充" class="headerlink" title="📌填充"></a>📌填充</h3><p>为了<strong>处理图像边缘，避免卷积后图像尺寸过小，可以在图像边缘添加填充（padding）</strong>。<br><strong>填充通常使用零值，也可以使用其他策略。</strong></p><p><img src="/img/downloaded/aHR0cHM6_65f7e2df7e5d439bbaf7a72525fa52b9.png" alt="在这里插入图片描述"></p><blockquote><p>如图 4.10 所示，超出范围就做填充（padding） ，填充就是补值，一般使用零填充（zero padding），超出范围就补 0，如果感受野有一部分超出图像的范围之外，就当做那个里面的值都是 0。其实也有别的补值的方法，比如补整张图像里面所有值的平均值或者把边界的这些数字拿出来补没有值的地方。</p></blockquote><blockquote><p>而感受野加上参数共享就是卷积层（convolutional layer），用到卷积层的网络就叫卷积神经网络。</p></blockquote><h3 id="📌卷积层的参数共享"><a href="#📌卷积层的参数共享" class="headerlink" title="📌卷积层的参数共享"></a>📌卷积层的参数共享</h3><blockquote><p>如果不同的守备范围都要有一个检测鸟嘴的神经元，参数量会太多了，因此需要做出相应的简化</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_f7fb8c83c2d14467a90efd3a6ff58881.png" alt="在这里插入图片描述"></p><blockquote><p>让不同感受野的神经元共享参数，也就是做<strong>参数共享（parameter sharing）</strong>，如图 4.13 所示。所谓参数共享就是两个神经元的权重完全是一样的。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_d5b91176e5bc43e79597eea40b46dd91.png" alt="在这里插入图片描述"></p><p>卷积层的参数（卷积核）在整个图像上共享，减少模型参数数量，提高训练效率。<br>参数共享使得网络能够学习到图像中普遍存在的模式。</p><h3 id="📌全连接层（Fully-Connected-Layer）"><a href="#📌全连接层（Fully-Connected-Layer）" class="headerlink" title="📌全连接层（Fully Connected Layer）"></a>📌全连接层（Fully Connected Layer）</h3><blockquote><p>拓展</p></blockquote><p>全连接层是神经网络中的一种层，其中每个神经元都与前一层的所有神经元相连。<br><strong>全连接层主要用于整合前一层的特征，进行最终的分类或回归分析。</strong><br>它们<strong>通常位于卷积神经网络的末尾，用于处理卷积层和池化层提取的特征</strong>。</p><p><strong>全连接层广泛应用于图像识别、语音处理和自然语言处理等多种任务中。<br>它们是构建深度学习模型的关键组件之一</strong>。</p><h4 id="🔧特点"><a href="#🔧特点" class="headerlink" title="🔧特点"></a>🔧特点</h4><p><strong>在全连接层中，每个神经元对所有输入数据进行加权求和，然后通过激活函数</strong>。</p><p><strong>这些层通常包含大量的参数，因为每个输入都与每个神经元相连。</strong></p><h4 id="🔧计算过程"><a href="#🔧计算过程" class="headerlink" title="🔧计算过程"></a>🔧计算过程</h4><p>每个神经元的输出计算公式为：$$\text{output} &#x3D; \text{activation}(\text{weights} \times \text{input} + \text{bias})$$<br>其中，weights 是权重矩阵，input 是前一层的输出，bias 是偏置项，activation 是激活函数。</p><h4 id="🔧激活函数"><a href="#🔧激活函数" class="headerlink" title="🔧激活函数"></a>🔧激活函数</h4><p><strong>激活函数用于引入非线性，使网络能够学习复杂的模式。</strong><br>常用的激活函数包括 <strong>ReLU、sigmoid 和 tanh。</strong></p><h4 id="🔧训练"><a href="#🔧训练" class="headerlink" title="🔧训练"></a>🔧训练</h4><p><strong>全连接层的权重和偏置通过反向传播算法和梯度下降进行优化。</strong><br>训练过程中，网络通过调整这些参数来最小化损失函数。</p><h4 id="🔧输出"><a href="#🔧输出" class="headerlink" title="🔧输出"></a>🔧输出</h4><p><strong>在分类任务中，全连接层的输出通常是一个概率分布，表示不同类别的预测概率。<br>在回归任务中，全连接层可能只有一个输出节点，直接预测连续值。</strong></p><p><img src="/img/downloaded/aHR0cHM6_09043dd87ad44ba983a100f8a07232d7.png" alt="在这里插入图片描述"></p><h3 id="📌特征映射"><a href="#📌特征映射" class="headerlink" title="📌特征映射"></a>📌特征映射</h3><p><img src="/img/downloaded/aHR0cHM6_fb4f563f365641ec981ed5682de92c22.png" alt="在这里插入图片描述"></p><blockquote><p>如果有 64 个滤波器，就可以得到 64 组的数字。这组数字称为<strong>特征映射（feature map） 。当一张图像通过一个卷积层里面一堆滤波器的时候，就会产生一个特征映射</strong>。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_5169beb0ddfe4b61a157b23c22e69a44.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_4df27931c9eb4473ad3f2c20e5994bd3.png" alt="在这里插入图片描述"></p><h3 id="📌多卷积核"><a href="#📌多卷积核" class="headerlink" title="📌多卷积核"></a>📌多卷积核</h3><p><strong>卷积层通常包含多个卷积核，每个卷积核负责提取图像中的不同特征。</strong><br>多个卷积核的输出可以组合成新的特征图，提供更丰富的图像表示。<br><img src="/img/downloaded/aHR0cHM6_f3addfe5f8e346dfb674ef225e61882e.png" alt="在这里插入图片描述"></p><blockquote><p>如图 4.22 所示，第 2 层的卷积里面也有一堆的滤波器，每个滤波器的大小设成 3 × 3。<strong>其高度必须设为 64，因为滤波器的高度就是它要处理的图像的通道</strong>。如果输入的图像是黑白的，通道是 1，滤波器的高度就是 1。</p></blockquote><blockquote><p><strong>而共享权重其实就是用滤波器扫过一张图像，这个过程就是卷积</strong>。这就是卷积层名字的由来。把滤波器扫过图像就相当于不同的感受野神经元可以共用参数，这组共用的参数就叫做一个滤波器。</p></blockquote><h3 id="📌采样"><a href="#📌采样" class="headerlink" title="📌采样"></a>📌采样</h3><blockquote><p>把一张比较大的图像做下采样（downsampling），把图像偶数的列都拿掉，奇数的行都拿掉，图像变成为原来的 1&#x2F;4，但是不会影响里面是什么东西。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_b9534762754e4a06b55b63892a438da3.png" alt="在这里插入图片描述"></p><h3 id="📌汇聚"><a href="#📌汇聚" class="headerlink" title="📌汇聚"></a>📌汇聚</h3><blockquote><p><strong>做完卷积以后，往往后面还会搭配汇聚</strong>。汇聚就是把图像变小。做完卷积以后会得到一张图像，这张图像里面有很多的通道。做完汇聚以后，这张图像的通道不变。</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_50148c5c6437431b9e25f402d3f803b4.png" alt="在这里插入图片描述"></p><blockquote><p>图 4.27 中的例子是 2 × 2 个一组。汇聚有很多不同的版本，以最大汇聚（max pooling） 为例。<strong>最大汇聚在每一组里面选一个代表，选的代表就是最大的一个</strong>，如图 4.28 所示。<strong>除了最大汇聚，还有平均汇聚（mean pooling），平均汇聚是取每一组的平均值</strong>。</p></blockquote><p><strong>汇聚可能会对模型的性能造成一定的损害。</strong><br><strong>特别是在检测非常细微的特征时，进行下采样可能会使性能稍微降低</strong>。</p><h4 id="🔧全卷积网络的趋势"><a href="#🔧全卷积网络的趋势" class="headerlink" title="🔧全卷积网络的趋势"></a>🔧全卷积网络的趋势</h4><p>近年来，图像网络设计趋向于舍弃汇聚层，转而使用全卷积网络。全卷积网络中整个网络结构都是卷积层，不使用汇聚层，这种设计可以保持更多的空间信息，有助于特征的提取。</p><h4 id="🔧汇聚的主要作用"><a href="#🔧汇聚的主要作用" class="headerlink" title="🔧汇聚的主要作用"></a>🔧汇聚的主要作用</h4><p><strong>汇聚的主要作用是减少运算量。</strong> 通过下采样缩小图像尺寸，从而减少计算量，这在<strong>资源有限的情况下非常有用</strong>。</p><h4 id="🔧运算能力的提升"><a href="#🔧运算能力的提升" class="headerlink" title="🔧运算能力的提升"></a>🔧运算能力的提升</h4><p>随着运算能力的提升，如果有足够的运算资源，<strong>很多网络架构设计选择不使用汇聚</strong>。<strong>采用全卷积设计</strong>，从开始到结束都使用卷积层，探索是否可以取得更好的效果。</p><h4 id="🔧一般网络架构"><a href="#🔧一般网络架构" class="headerlink" title="🔧一般网络架构"></a>🔧一般网络架构</h4><p><strong>传统的网络架构通常包括卷积层和汇聚层。汇聚层是可有可无的，许多设计选择不使用汇聚层，以避免可能的性能损失。</strong></p><h4 id="🔧架构示例"><a href="#🔧架构示例" class="headerlink" title="🔧架构示例"></a>🔧架构示例</h4><p><strong>在完成卷积和汇聚后，通常将汇聚的输出扁平化，形成一维向量。然后将这个向量输入到全连接层中，最终通过 softmax 层得到图像识别的结果</strong>。<br><img src="/img/downloaded/aHR0cHM6_9917eead742f4276987292fbbe7a1862.png" alt="在这里插入图片描述"><br>这是一个经典的图像识别网络，包括卷积层、汇聚层、扁平化处理，以及全连接层或 softmax 层。</p><h2 id="🎯卷积神经网络的应用"><a href="#🎯卷积神经网络的应用" class="headerlink" title="🎯卷积神经网络的应用"></a>🎯卷积神经网络的应用</h2><p>卷积神经网络广泛应用于图像识别、目标检测等领域。<br>通过学习图像特征，卷积神经网络能够识别和分类图像中的不同对象。</p><h2 id="🎯围棋落子预测"><a href="#🎯围棋落子预测" class="headerlink" title="🎯围棋落子预测"></a>🎯围棋落子预测</h2><p>卷积神经网络也可用于围棋等策略游戏，预测下一步最佳落子位置。<br>通过分析棋盘状态，网络可以评估每个位置的重要性，指导决策。</p><h1 id="🚩自注意力机制"><a href="#🚩自注意力机制" class="headerlink" title="🚩自注意力机制"></a>🚩自注意力机制</h1><h2 id="🎯自注意力模型（Self-Attention-Model）"><a href="#🎯自注意力模型（Self-Attention-Model）" class="headerlink" title="🎯自注意力模型（Self-Attention Model）"></a>🎯自注意力模型（Self-Attention Model）</h2><blockquote><p>自注意力模型是深度学习中处理序列数据的一种重要架构，尤其适用于处理输入序列长度可变的问题。</p></blockquote><h3 id="📌输入与输出"><a href="#📌输入与输出" class="headerlink" title="📌输入与输出"></a>📌输入与输出</h3><p><img src="/img/downloaded/aHR0cHM6_9e2d9e86cb494283bff6748c3fd9494b.png" alt="在这里插入图片描述"></p><p><strong>输入通常是向量序列，输出可以是标量、类别或另一个向量序列。</strong></p><p>自注意力模型能够处理输入序列长度不一的情况，适用于文本、语音、图数据等多种序列任务。</p><h3 id="📌序列处理的挑战"><a href="#📌序列处理的挑战" class="headerlink" title="📌序列处理的挑战"></a>📌序列处理的挑战</h3><p>传统的卷积或全连接网络在处理序列数据时，可能<strong>因固定窗口大小或不考虑序列间长距离依赖而受限</strong>。</p><h3 id="📌自注意力机制"><a href="#📌自注意力机制" class="headerlink" title="📌自注意力机制"></a>📌自注意力机制</h3><p><strong>自注意力模型通过计算序列中每个元素对其他所有元素的关联程度（注意力分数），来捕捉序列内的长距离依赖关系</strong>。</p><p>模型不需要预设固定大小的窗口，能够动态地关注序列中任意距离的依赖。</p><h3 id="📌独热编码与词嵌入"><a href="#📌独热编码与词嵌入" class="headerlink" title="📌独热编码与词嵌入"></a>📌独热编码与词嵌入</h3><p><strong>独热编码是一种将词汇表示为向量的方法，但这种方法无法表达词汇之间的语义关系</strong>。</p><p><strong>词嵌入（Word Embedding）通过将词汇映射到包含语义信息的向量空间，能够更好地捕捉词汇之间的关系</strong>。</p><h3 id="📌序列到序列的任务"><a href="#📌序列到序列的任务" class="headerlink" title="📌序列到序列的任务"></a>📌序列到序列的任务</h3><p>一些任务如机器翻译，输入和输出序列的长度可能不同，自注意力模型能够灵活处理这类序列到序列的任务。</p><h3 id="📌注意力分数的计算"><a href="#📌注意力分数的计算" class="headerlink" title="📌注意力分数的计算"></a>📌注意力分数的计算</h3><p><img src="/img/downloaded/aHR0cHM6_5e66d30130d64898bd5b22a77df6763e.png" alt="在这里插入图片描述"></p><p><strong>注意力分数通过查询（Query）、键（Key）和值（Value）的机制计算得出。</strong></p><p><img src="/img/downloaded/aHR0cHM6_9846e5485ece4f7aacf74e1b9f4d264f.png" alt="在这里插入图片描述"></p><p><strong>常见的计算方法包括点积（Dot Product）和相加（Additive）等</strong>。</p><h3 id="📌多头注意力"><a href="#📌多头注意力" class="headerlink" title="📌多头注意力"></a>📌多头注意力</h3><p><strong>多头注意力（Multi-Head Attention）是自注意力的一种扩展，它将输入向量分割成多个头，每个头计算不同的注意力，最终再将结果合并，以捕获不同子空间的信息</strong>。</p><h3 id="📌Transformer-架构"><a href="#📌Transformer-架构" class="headerlink" title="📌Transformer 架构"></a>📌Transformer 架构</h3><p>Transformer 是一种<strong>完全基于自注意力机制的网络架构，广泛应用于自然语言处理任务</strong>。<br>Transformer 通过<strong>堆叠多个自注意力层和前馈神经网络层，并通过残差连接和层归一化来提高训练效率和性能</strong>。</p><h3 id="📌应用实例"><a href="#📌应用实例" class="headerlink" title="📌应用实例"></a>📌应用实例</h3><p><strong>文本处理：如情感分析、词性标注、机器翻译。<br>语音处理：如语音识别、语音合成。<br>图数据：如社交网络分析、药物分子发现。</strong></p><blockquote><p><strong>自注意力模型通过其灵活的注意力机制，为深度学习在序列数据处理方面提供了强大的工具，推动了多个领域的发展。</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>408数据结构考研大纲详解</title>
      <link href="/2025/03/10/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%80%83%E7%A0%94%E5%A4%A7%E7%BA%B2%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/10/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%80%83%E7%A0%94%E5%A4%A7%E7%BA%B2%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="408数据结构考研大纲详解"><a href="#408数据结构考研大纲详解" class="headerlink" title="408数据结构考研大纲详解"></a>408数据结构考研大纲详解</h1><p>本文根据计算机专业考研408数据结构大纲，系统地整理了数据结构的核心知识点，包括基本概念、线性表、栈与队列、树与二叉树、图、查找和排序等内容。每个部分都包含了定义、性质、基本操作及其算法实现、时间复杂度分析和典型应用场景，帮助考生全面掌握数据结构的重要知识点。</p><h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p><strong>数据结构</strong>是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。</p><p><strong>基本术语</strong>：</p><ul><li>数据：描述客观事物的符号，是计算机中可以操作的对象</li><li>数据元素：数据的基本单位</li><li>数据项：构成数据元素的不可分割的最小单位</li><li>数据对象：性质相同的数据元素的集合</li><li>数据类型：一组性质相同的值的集合及定义在此集合上的一组操作</li><li>抽象数据类型(ADT)：一个数学模型及定义在该模型上的一组操作</li></ul><h3 id="2-算法与算法评价"><a href="#2-算法与算法评价" class="headerlink" title="2. 算法与算法评价"></a>2. 算法与算法评价</h3><p><strong>算法</strong>是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列。</p><p><strong>算法特性</strong>：</p><ul><li>有穷性：算法必须在有限步骤内结束</li><li>确定性：每一步骤都有明确的定义</li><li>可行性：每一步都必须是可行的</li><li>输入：有零个或多个输入</li><li>输出：有一个或多个输出</li></ul><p><strong>算法评价</strong>：</p><ul><li>时间复杂度：算法执行所需的时间</li><li>空间复杂度：算法执行所需的存储空间</li></ul><p><strong>常见的时间复杂度</strong>：</p><ul><li>O(1)：常数阶</li><li>O(log n)：对数阶</li><li>O(n)：线性阶</li><li>O(n log n)：线性对数阶</li><li>O(n²)：平方阶</li><li>O(n³)：立方阶</li><li>O(2ⁿ)：指数阶</li></ul><h2 id="二、线性表"><a href="#二、线性表" class="headerlink" title="二、线性表"></a>二、线性表</h2><h3 id="1-线性表的定义与基本操作"><a href="#1-线性表的定义与基本操作" class="headerlink" title="1. 线性表的定义与基本操作"></a>1. 线性表的定义与基本操作</h3><p><strong>线性表</strong>是具有相同数据类型的n个数据元素的有限序列，其中n≥0。</p><p><strong>基本操作</strong>：</p><ul><li>InitList(&amp;L)：初始化线性表</li><li>Length(L)：返回线性表长度</li><li>LocateElem(L, e)：查找元素</li><li>GetElem(L, i)：获取指定位置的元素</li><li>ListInsert(&amp;L, i, e)：插入元素</li><li>ListDelete(&amp;L, i, &amp;e)：删除元素</li><li>PrintList(L)：输出线性表</li><li>Empty(L)：判断线性表是否为空</li><li>DestroyList(&amp;L)：销毁线性表</li></ul><h3 id="2-线性表的顺序存储"><a href="#2-线性表的顺序存储" class="headerlink" title="2. 线性表的顺序存储"></a>2. 线性表的顺序存储</h3><p><strong>顺序表</strong>是用一段地址连续的存储单元依次存储线性表的数据元素。</p><p><strong>特点</strong>：</p><ul><li>随机访问，时间复杂度O(1)</li><li>插入和删除需要移动元素，时间复杂度O(n)</li><li>存储密度高</li></ul><p><strong>基本操作实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 顺序表的结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span>  <span class="token comment">// 存储空间基址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>      <span class="token comment">// 当前长度</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token comment">// 总容量</span><span class="token punctuation">&#125;</span> SqList<span class="token punctuation">;</span><span class="token comment">// 初始化顺序表</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>size <span class="token operator">=</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入操作</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">>=</span> L<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除操作</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-线性表的链式存储"><a href="#3-线性表的链式存储" class="headerlink" title="3. 线性表的链式存储"></a>3. 线性表的链式存储</h3><p><strong>链表</strong>是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。</p><p><strong>单链表</strong>：</p><ul><li>每个节点包含数据域和指针域</li><li>节点的存储地址是任意的</li><li>查找元素需要遍历，时间复杂度O(n)</li><li>插入和删除操作简单，时间复杂度O(1)（不考虑查找时间）</li></ul><p><strong>基本操作实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 单链表节点定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">// 初始化单链表（带头结点）</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> new LNode<span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入操作</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">></span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        LNode <span class="token operator">*</span>s <span class="token operator">=</span> new LNode<span class="token punctuation">;</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除操作</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-></span>next <span class="token operator">||</span> j <span class="token operator">></span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        LNode <span class="token operator">*</span>q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>    delete q<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双链表</strong>：</p><ul><li>每个节点有两个指针域，分别指向前驱和后继节点</li><li>可以双向遍历</li><li>删除和插入操作更加灵活</li></ul><p><strong>循环链表</strong>：</p><ul><li>尾节点的指针指向头节点，形成一个环</li><li>可以从任意节点出发遍历整个链表</li></ul><h2 id="三、栈与队列"><a href="#三、栈与队列" class="headerlink" title="三、栈与队列"></a>三、栈与队列</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h3><p><strong>栈</strong>是一种只允许在一端（栈顶）进行插入和删除操作的线性表，遵循后进先出(LIFO)原则。</p><p><strong>基本操作</strong>：</p><ul><li>InitStack(&amp;S)：初始化栈</li><li>Push(&amp;S, e)：入栈</li><li>Pop(&amp;S, &amp;e)：出栈</li><li>GetTop(S, &amp;e)：获取栈顶元素</li><li>StackEmpty(S)：判断栈是否为空</li></ul><p><strong>顺序栈实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 顺序栈结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>base<span class="token punctuation">;</span>    ElemType <span class="token operator">*</span>top<span class="token punctuation">;</span>    <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqStack<span class="token punctuation">;</span><span class="token comment">// 初始化顺序栈</span>Status <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    S<span class="token punctuation">.</span>base <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>stacksize <span class="token operator">=</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 入栈操作</span>Status <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">-</span> S<span class="token punctuation">.</span>base <span class="token operator">>=</span> S<span class="token punctuation">.</span>stacksize<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token operator">++</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出栈操作</span>Status <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> S<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">--</span>S<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>链栈实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 链栈节点定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> StackNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkStack<span class="token punctuation">;</span><span class="token comment">// 初始化链栈</span>Status <span class="token function">InitStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    S <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 入栈操作</span>Status <span class="token function">Push</span><span class="token punctuation">(</span>LinkStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    StackNode <span class="token operator">*</span>p <span class="token operator">=</span> new StackNode<span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> S<span class="token punctuation">;</span>    S <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出栈操作</span>Status <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">;</span>    StackNode <span class="token operator">*</span>p <span class="token operator">=</span> S<span class="token punctuation">;</span>    S <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>栈的应用</strong>：</p><ul><li>表达式求值</li><li>括号匹配</li><li>函数调用</li><li>递归实现</li><li>中缀表达式转后缀表达式</li></ul><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2. 队列"></a>2. 队列</h3><p><strong>队列</strong>是一种只允许在一端（队尾）进行插入操作，在另一端（队头）进行删除操作的线性表，遵循先进先出(FIFO)原则。</p><p><strong>基本操作</strong>：</p><ul><li>InitQueue(&amp;Q)：初始化队列</li><li>EnQueue(&amp;Q, e)：入队</li><li>DeQueue(&amp;Q, &amp;e)：出队</li><li>GetHead(Q, &amp;e)：获取队头元素</li><li>QueueEmpty(Q)：判断队列是否为空</li></ul><p><strong>循环队列实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 循环队列结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>base<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token comment">// 初始化循环队列</span>Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 入队操作</span>Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出队操作</span>Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>链队列实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 链队列节点定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> QNode<span class="token punctuation">,</span> <span class="token operator">*</span>QueuePtr<span class="token punctuation">;</span><span class="token comment">// 链队列结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    QueuePtr front<span class="token punctuation">;</span>    QueuePtr rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkQueue<span class="token punctuation">;</span><span class="token comment">// 初始化链队列</span>Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> new QNode<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 入队操作</span>Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    QNode <span class="token operator">*</span>p <span class="token operator">=</span> new QNode<span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出队操作</span>Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    QNode <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>队列的应用</strong>：</p><ul><li>广度优先搜索</li><li>操作系统中的作业调度</li><li>打印机任务队列</li><li>消息缓冲区</li></ul><h2 id="四、树与二叉树"><a href="#四、树与二叉树" class="headerlink" title="四、树与二叉树"></a>四、树与二叉树</h2><h3 id="1-树的基本概念"><a href="#1-树的基本概念" class="headerlink" title="1. 树的基本概念"></a>1. 树的基本概念</h3><p><strong>树</strong>是n(n≥0)个结点的有限集合，当n&#x3D;0时称为空树，否则树满足：有且仅有一个特定的称为根的结点，其余结点可分为m(m≥0)个互不相交的有限集，每个集合本身又是一棵树，称为根的子树。</p><p><strong>基本术语</strong>：</p><ul><li>结点的度：结点拥有的子树数</li><li>树的度：树中结点的最大度数</li><li>叶子结点：度为0的结点</li><li>分支结点：度不为0的结点</li><li>结点的层次：根结点为第1层，其子结点为第2层，以此类推</li><li>树的高度：树中结点的最大层次</li><li>森林：m(m≥0)棵互不相交的树的集合</li></ul><h3 id="2-二叉树的定义与性质"><a href="#2-二叉树的定义与性质" class="headerlink" title="2. 二叉树的定义与性质"></a>2. 二叉树的定义与性质</h3><p><strong>二叉树</strong>是n(n≥0)个结点的有限集合，它或者是空集(n&#x3D;0)，或者由一个根结点及两棵互不相交的分别称为左子树和右子树的二叉树组成。</p><p><strong>二叉树的性质</strong>：</p><ul><li>第i层上至多有2^(i-1)个结点</li><li>高度为h的二叉树至多有2^h-1个结点</li><li>对任何一棵二叉树，若叶子结点数为n0，度为2的结点数为n2，则n0&#x3D;n2+1</li></ul><p><strong>满二叉树</strong>：一棵高度为h且含有2^h-1个结点的二叉树</p><p><strong>完全二叉树</strong>：一棵高度为h的二叉树，其第1层到第h-1层的结点都达到最大个数，第h层的结点都连续集中在最左边</p><h3 id="3-二叉树的存储结构"><a href="#3-二叉树的存储结构" class="headerlink" title="3. 二叉树的存储结构"></a>3. 二叉树的存储结构</h3><p><strong>顺序存储</strong>：</p><ul><li>适用于完全二叉树</li><li>按层次顺序存储</li><li>对于结点i，其左孩子为2i，右孩子为2i+1，父结点为⌊i&#x2F;2⌋</li></ul><p><strong>链式存储</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 二叉树结点定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-二叉树的遍历"><a href="#4-二叉树的遍历" class="headerlink" title="4. 二叉树的遍历"></a>4. 二叉树的遍历</h3><p><strong>先序遍历</strong>：根-&gt;左-&gt;右</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 访问根结点</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先序遍历左子树</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先序遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中序遍历</strong>：左-&gt;根-&gt;右</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历左子树</span>        <span class="token function">Visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 访问根结点</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>后序遍历</strong>：左-&gt;右-&gt;根</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后序遍历左子树</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后序遍历右子树</span>        <span class="token function">Visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 访问根结点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>层次遍历</strong>：按层次从上到下，从左到右访问所有结点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 初始化辅助队列</span>    BiTree p<span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 根结点入队</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队头结点出队</span>        <span class="token function">Visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 访问出队结点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左子树根结点入队</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右子树根结点入队</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-线索二叉树"><a href="#5-线索二叉树" class="headerlink" title="5. 线索二叉树"></a>5. 线索二叉树</h3><p><strong>线索二叉树</strong>是一种利用二叉树中空指针域的存储结构，将二叉树中的结点按某种遍历方式的前驱和后继关系记录在空指针域中。</p><p><strong>结点结构</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ThreadNode</span> <span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ThreadNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token keyword">int</span> ltag<span class="token punctuation">,</span> rtag<span class="token punctuation">;</span>  <span class="token comment">// 标志位，0表示指针指向孩子，1表示指针是线索</span><span class="token punctuation">&#125;</span> ThreadNode<span class="token punctuation">,</span> <span class="token operator">*</span>ThreadTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-树与森林"><a href="#6-树与森林" class="headerlink" title="6. 树与森林"></a>6. 树与森林</h3><p><strong>树的存储结构</strong>：</p><ul><li>双亲表示法：每个结点中保存其双亲结点的位置</li><li>孩子表示法：每个结点中保存其所有孩子结点的指针</li><li>孩子兄弟表示法：每个结点保存指向第一个孩子和下一个兄弟的指针</li></ul><p><strong>树与二叉树的转换</strong>：</p><ul><li>树转换为二叉树：每个结点的左指针指向第一个孩子，右指针指向下一个兄弟</li><li>森林转换为二叉树：先将森林中每棵树转换为二叉树，然后将每棵二叉树的根结点看作兄弟，用右指针连接</li></ul><h3 id="7-哈夫曼树与哈夫曼编码"><a href="#7-哈夫曼树与哈夫曼编码" class="headerlink" title="7. 哈夫曼树与哈夫曼编码"></a>7. 哈夫曼树与哈夫曼编码</h3><p><strong>哈夫曼树</strong>是一种带权路径长度最短的二叉树，也称为最优二叉树。</p><p><strong>构造方法</strong>：</p><ol><li>将所有结点看作独立的树，构成森林</li><li>选择森林中权值最小的两棵树，作为新树的左右子树，新树的权值为两棵子树权值之和</li><li>从森林中删除这两棵树，将新树加入森林</li><li>重复步骤2和3，直到森林中只剩一棵树</li></ol><p><strong>哈夫曼编码</strong>是一种前缀编码，用于数据压缩，具有最优性。</p><h2 id="五、图"><a href="#五、图" class="headerlink" title="五、图"></a>五、图</h2><h3 id="1-图的基本概念"><a href="#1-图的基本概念" class="headerlink" title="1. 图的基本概念"></a>1. 图的基本概念</h3><p><strong>图</strong>是由顶点集V和边集E组成的，记为G&#x3D;(V,E)，其中V是非空集合，E是V中顶点的有序对或无序对集合。</p><p><strong>基本术语</strong>：</p><ul><li>有向图：边有方向</li><li>无向图：边无方向</li><li>完全图：任意两个顶点之间都有边</li><li>连通图：任意两个顶点之间都有路径</li><li>连通分量：无向图的极大连通子图</li><li>强连通图：有向图中任意两个顶点之间都有路径</li><li>强连通分量：有向图的极大强连通子图</li><li>生成树：包含图中所有顶点的一棵树</li><li>生成森林：非连通图的生成树集合</li></ul><h3 id="2-图的存储结构"><a href="#2-图的存储结构" class="headerlink" title="2. 图的存储结构"></a>2. 图的存储结构</h3><p><strong>邻接矩阵</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    VertexType vex<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 顶点表</span>    EdgeType arc<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 邻接矩阵</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>                  <span class="token comment">// 顶点数和边数</span><span class="token punctuation">&#125;</span> MGraph<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>邻接表</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 边表结点</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>             <span class="token comment">// 该边所指向的顶点的位置</span>    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>   <span class="token comment">// 指向下一条边的指针</span>    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>         <span class="token comment">// 边权值等信息</span><span class="token punctuation">&#125;</span> ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VNode</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 顶点表结点</span>    VertexType data<span class="token punctuation">;</span>        <span class="token comment">// 顶点信息</span>    ArcNode <span class="token operator">*</span>first<span class="token punctuation">;</span>         <span class="token comment">// 指向第一条依附该顶点的边的指针</span><span class="token punctuation">&#125;</span> VNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    AdjList vertices<span class="token punctuation">;</span>       <span class="token comment">// 邻接表</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>     <span class="token comment">// 顶点数和边数</span><span class="token punctuation">&#125;</span> ALGraph<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-图的遍历"><a href="#3-图的遍历" class="headerlink" title="3. 图的遍历"></a>3. 图的遍历</h3><p><strong>深度优先搜索(DFS)</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>       <span class="token comment">// 标记v已访问</span>    <span class="token function">Visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 访问顶点v</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> w <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 递归访问v的未访问邻接点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>广度优先搜索(BFS)</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>       <span class="token comment">// 标记v已访问</span>    <span class="token function">Visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 访问顶点v</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 初始化辅助队列</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// v入队</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 队头元素出队</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> w <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                <span class="token function">Visit</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-最小生成树"><a href="#4-最小生成树" class="headerlink" title="4. 最小生成树"></a>4. 最小生成树</h3><p><strong>Prim算法</strong>：</p><ol><li>从图中任选一个顶点加入树T</li><li>在所有与树T中顶点相邻的边中，选择权值最小的边(u,v)，其中u在T中，v不在T中</li><li>将顶点v和边(u,v)加入树T</li><li>重复步骤2和3，直到所有顶点都在T中</li></ol><p><strong>Kruskal算法</strong>：</p><ol><li>将图中所有边按权值从小到大排序</li><li>从权值最小的边开始，如果该边不会与已选边构成回路，则选择该边</li><li>重复步骤2，直到选择了n-1条边（n为顶点数）</li></ol><h3 id="5-最短路径"><a href="#5-最短路径" class="headerlink" title="5. 最短路径"></a>5. 最短路径</h3><p><strong>Dijkstra算法</strong>：求单源最短路径</p><ol><li>初始化：S&#x3D;{源点s}，对所有顶点v，若v与s直接相邻，则dist[v]&#x3D;边(s,v)的权值，否则dist[v]&#x3D;∞</li><li>从未标记的顶点中选择dist值最小的顶点u，标记u</li><li>更新所有与u相邻的未标记顶点v的dist值：dist[v]&#x3D;min{dist[v], dist[u]+边(u,v)的权值}</li><li>重复步骤2和3，直到所有顶点都被标记</li></ol><p><strong>Floyd算法</strong>：求所有顶点对之间的最短路径</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Floyd</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化D矩阵</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> D<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> D<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 更新最短路径</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-拓扑排序"><a href="#6-拓扑排序" class="headerlink" title="6. 拓扑排序"></a>6. 拓扑排序</h3><p><strong>拓扑排序</strong>是将有向无环图中的顶点排成一个线性序列，使得图中任意一对顶点u和v，若存在边&lt;u,v&gt;，则u在线性序列中出现在v之前。</p><p><strong>算法步骤</strong>：</p><ol><li>从图中选择一个没有前驱的顶点并输出</li><li>从图中删除该顶点和所有以它为起点的边</li><li>重复步骤1和2，直到图为空或图中不存在无前驱的顶点</li></ol><h3 id="7-关键路径"><a href="#7-关键路径" class="headerlink" title="7. 关键路径"></a>7. 关键路径</h3><p><strong>关键路径</strong>是指在带权有向无环图中，从源点到汇点的路径中，具有最大路径长度的路径，这条路径上的活动称为关键活动。</p><p><strong>算法步骤</strong>：</p><ol><li>求各顶点的最早发生时间ve</li><li>求各顶点的最迟发生时间vl</li><li>求各活动的最早开始时间e</li><li>求各活动的最迟开始时间l</li><li>求各活动的时间余量l-e，时间余量为0的活动即为关键活动</li></ol><h2 id="六、查找"><a href="#六、查找" class="headerlink" title="六、查找"></a>六、查找</h2><h3 id="1-查找的基本概念"><a href="#1-查找的基本概念" class="headerlink" title="1. 查找的基本概念"></a>1. 查找的基本概念</h3><p><strong>查找</strong>是在数据集合中寻找满足条件的特定数据元素的过程。</p><p><strong>查找的衡量指标</strong>：</p><ul><li>平均查找长度（ASL）：需要比较的关键字次数的期望值</li></ul><h3 id="2-顺序查找"><a href="#2-顺序查找" class="headerlink" title="2. 顺序查找"></a>2. 顺序查找</h3><p><strong>顺序查找</strong>是从表的一端开始，逐个检查关键字是否匹配。</p><p><strong>算法实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SeqSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token comment">// 查找成功，返回位置</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">// 查找失败</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>平均查找长度</strong>：</p><ul><li>查找成功：(n+1)&#x2F;2</li><li>查找失败：n</li></ul><h3 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3. 二分查找"></a>3. 二分查找</h3><p><strong>二分查找</strong>适用于有序表，每次将查找区间缩小一半。</p><p><strong>算法实现</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>      <span class="token comment">// 查找成功</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 在左半区间查找</span>        <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 在右半区间查找</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">// 查找失败</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>平均查找长度</strong>：O(log₂n)</p><h3 id="4-二叉排序树"><a href="#4-二叉排序树" class="headerlink" title="4. 二叉排序树"></a>4. 二叉排序树</h3><p><strong>二叉排序树</strong>（二叉搜索树）是一种特殊的二叉树，满足以下性质：</p><ul><li>若左子树不为空，则左子树上所有结点的值均小于根结点的值</li><li>若右子树不为空，则右子树上所有结点的值均大于根结点的值</li><li>左、右子树也分别为二叉排序树</li></ul><p><strong>查找操作</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">BiTree <span class="token function">SearchBST</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> KeyType key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T <span class="token operator">||</span> key <span class="token operator">==</span> T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> T<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在左子树中查找</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在右子树中查找</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>插入操作</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 树为空，创建新结点</span>        T <span class="token operator">=</span> new BiTNode<span class="token punctuation">;</span>        T<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>        T<span class="token operator">-></span>lchild <span class="token operator">=</span> T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">==</span> T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>  <span class="token comment">// 关键字已存在</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在左子树中插入</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在右子树中插入</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除操作</strong>：</p><ol><li>若被删结点是叶子结点，直接删除</li><li>若被删结点只有左子树或右子树，用子树替代被删结点</li><li>若被删结点有左右子树，用直接后继（右子树中最小的结点）或直接前驱（左子树中最大的结点）替代被删结点</li></ol><h3 id="5-平衡二叉树"><a href="#5-平衡二叉树" class="headerlink" title="5. 平衡二叉树"></a>5. 平衡二叉树</h3><p><strong>平衡二叉树</strong>（AVL树）是一种特殊的二叉排序树，任意结点的左右子树高度差不超过1。</p><p><strong>平衡因子</strong>：结点的左子树高度减去右子树高度</p><p><strong>旋转操作</strong>：</p><ul><li>LL型：右旋</li><li>RR型：左旋</li><li>LR型：先左旋后右旋</li><li>RL型：先右旋后左旋</li></ul><h3 id="6-B树和B-树"><a href="#6-B树和B-树" class="headerlink" title="6. B树和B+树"></a>6. B树和B+树</h3><p><strong>B树</strong>是一种多路平衡查找树，常用于文件系统和数据库索引。</p><p><strong>B树的性质</strong>：</p><ul><li>每个结点最多有m个子树</li><li>除根结点和叶子结点外，其他结点至少有⌈m&#x2F;2⌉个子树</li><li>所有叶子结点都在同一层</li></ul><p><strong>B+树</strong>是B树的变种，有以下特点：</p><ul><li>非叶子结点只存储索引，不存储数据</li><li>所有数据都存储在叶子结点中</li><li>叶子结点之间用指针连接，形成有序链表</li></ul><h3 id="7-散列表"><a href="#7-散列表" class="headerlink" title="7. 散列表"></a>7. 散列表</h3><p><strong>散列表</strong>（哈希表）是一种根据关键字直接访问数据的数据结构。</p><p><strong>散列函数</strong>：将关键字映射到散列表地址的函数</p><p><strong>处理冲突的方法</strong>：</p><ul><li>开放定址法：线性探测、二次探测、双散列</li><li>链地址法：将同一地址的冲突元素用链表连接</li><li>再散列法：使用另一个散列函数</li><li>建立公共溢出区</li></ul><p><strong>散列查找的平均查找长度</strong>：与装填因子α有关，α越大，平均查找长度越长</p><h2 id="七、排序"><a href="#七、排序" class="headerlink" title="七、排序"></a>七、排序</h2><h3 id="1-排序的基本概念"><a href="#1-排序的基本概念" class="headerlink" title="1. 排序的基本概念"></a>1. 排序的基本概念</h3><p><strong>排序</strong>是将一组数据按照特定的顺序重新排列的过程。</p><p><strong>排序的稳定性</strong>：相同关键字的元素在排序前后相对位置不变，则称排序算法是稳定的</p><p><strong>内部排序</strong>：数据全部存放在内存中进行排序</p><p><strong>外部排序</strong>：数据太大，无法全部放入内存，需要借助外存进行排序</p><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2. 插入排序"></a>2. 插入排序</h3><p><strong>直接插入排序</strong>：将一个元素插入到已排序的序列中的适当位置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若第i个元素小于前一个元素</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 暂存a[i]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 后移元素</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token comment">// 插入到正确位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n²)</p><p><strong>空间复杂度</strong>：O(1)</p><p><strong>稳定性</strong>：稳定</p><p><strong>希尔排序</strong>：将序列分成若干子序列，对每个子序列进行直接插入排序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> d<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> d <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 步长序列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">-</span>d<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> d<span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：与步长序列有关，平均为O(n^1.3)</p><p><strong>空间复杂度</strong>：O(1)</p><p><strong>稳定性</strong>：不稳定</p><h3 id="3-交换排序"><a href="#3-交换排序" class="headerlink" title="3. 交换排序"></a>3. 交换排序</h3><p><strong>冒泡排序</strong>：相邻元素两两比较，将最大的元素逐渐”冒”到序列的末尾</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 标记本轮是否发生交换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 发生了交换</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 如果没有发生交换，说明已经有序</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n²)</p><p><strong>空间复杂度</strong>：O(1)</p><p><strong>稳定性</strong>：稳定</p><p><strong>快速排序</strong>：选择一个基准元素，将序列分为两部分，一部分小于基准，一部分大于基准</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 选择第一个元素作为基准</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将比基准小的元素移到左边</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将比基准大的元素移到右边</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>  <span class="token comment">// 基准元素放到最终位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>       <span class="token comment">// 返回基准元素的位置</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivotpos <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotpos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 排序左子序列</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pivotpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 排序右子序列</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：平均O(n log n)，最坏O(n²)</p><p><strong>空间复杂度</strong>：O(log n)</p><p><strong>稳定性</strong>：不稳定</p><h3 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h3><p><strong>简单选择排序</strong>：每次从未排序序列中选择最小的元素放到已排序序列的末尾</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> min<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 记录最小元素位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>  <span class="token comment">// 更新最小元素位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 交换a[i]和a[min]</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n²)</p><p><strong>空间复杂度</strong>：O(1)</p><p><strong>稳定性</strong>：不稳定</p><p><strong>堆排序</strong>：利用堆的性质进行排序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 调整以k为根的子树为大根堆</span><span class="token keyword">void</span> <span class="token function">HeapAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// i为k的左孩子</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 取左右孩子中较大者</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 根结点已是最大</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 将较大的孩子上移</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>             <span class="token comment">// 继续向下调整</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>          <span class="token comment">// 放入最终位置</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 建立大根堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 堆顶元素与最后一个元素交换</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重新调整堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n log n)</p><p><strong>空间复杂度</strong>：O(1)</p><p><strong>稳定性</strong>：不稳定</p><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h3><p><strong>归并排序</strong>：将两个或多个有序序列合并成一个有序序列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 合并两个有序序列</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 辅助数组</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 比较两个子序列的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>   <span class="token comment">// 复制剩余元素</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 将temp中的元素复制回a</span>        a<span class="token punctuation">[</span>low<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 排序左半部分</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 排序右半部分</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 合并两部分</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n log n)</p><p><strong>空间复杂度</strong>：O(n)</p><p><strong>稳定性</strong>：稳定</p><h3 id="6-基数排序"><a href="#6-基数排序" class="headerlink" title="6. 基数排序"></a>6. 基数排序</h3><p><strong>基数排序</strong>：按照关键字的位数进行排序，从低位到高位或从高位到低位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RadixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// d为最大位数</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>count <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 计数器</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从低位到高位</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 计数器清零</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> radix<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 获取当前位的数字</span>            count<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 统计每个数字出现的次数</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将count转换为位置索引</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从后向前遍历，保证稳定性</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> radix<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>count<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 放入对应位置</span>            count<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 将临时数组复制回原数组</span>                radix <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 处理下一位</span>    <span class="token punctuation">&#125;</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(d(n+r))，其中d为位数，r为基数（这里为10）</p><p><strong>空间复杂度</strong>：O(n+r)</p><p><strong>稳定性</strong>：稳定</p><h3 id="7-各种排序算法的比较"><a href="#7-各种排序算法的比较" class="headerlink" title="7. 各种排序算法的比较"></a>7. 各种排序算法的比较</h3><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>直接插入排序</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n^1.3)</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>冒泡排序</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(n log n)</td><td>O(n²)</td><td>O(log n)</td><td>不稳定</td></tr><tr><td>简单选择排序</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(n log n)</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n)</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(n+r)</td><td>稳定</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文系统地整理了408数据结构考研大纲的核心知识点，包括基本概念、线性表、栈与队列、树与二叉树、图、查找和排序等内容。每个部分都包含了定义、性质、基本操作及其算法实现、时间复杂度分析和典型应用场景，帮助考生全面掌握数据结构的重要知识点。</p><p>数据结构是计算机科学的基础，也是408考研的重点科目之一。掌握好数据结构不仅对考研有帮助，对未来的学习和工作也有很大的益处。希望本文能够帮助考生系统地复习数据结构，取得好成绩。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 408 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零入门 AI for Science（AI+药物) 笔记</title>
      <link href="/2025/03/10/%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8-AI-for-Science%EF%BC%88AI-%E8%8D%AF%E7%89%A9-%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/10/%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8-AI-for-Science%EF%BC%88AI-%E8%8D%AF%E7%89%A9-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="使用平台"><a href="#使用平台" class="headerlink" title="使用平台"></a>使用平台</h1><p><a href="https://modelscope.cn/my/mynotebook/preset">我的Notebook · 魔搭社区 https://modelscope.cn/my/mynotebook/preset </a>.</p><blockquote><p>魔搭高峰期打不开Task3又换回飞桨了 吧torch 架构换成了 飞桨的paddle </p></blockquote><p><a href="https://aistudio.baidu.com/projectdetail/8191835?contributionType=1">飞桨AI Studio星河社区-人工智能学习与实训社区<br>https://aistudio.baidu.com/projectdetail/8191835?contributionType=1</a></p><h2 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h2><ol><li><p>运行实例，如果有时长尽量选择方式二（<strong>以下操作基于方式二的实例实现</strong>）<br><img src="/img/downloaded/aHR0cHM6_92e7fdf7158644d28c6c0e3b62aff0b9.png" alt="在这里插入图片描述"></p></li><li><p>创建文件夹，并重命名为  <strong>2.3siRNA</strong> </p></li><li><p>上传两个文件<img src="/img/downloaded/aHR0cHM6_41268aec0e374679b7216b239d101ff4.png" alt="在这里插入图片描述"><br>到文件夹， 这里面的第三个按钮是上传<img src="/img/downloaded/aHR0cHM6_fc198bfaeb75475b9cbac58e5cf1fc7e.png" alt="在这里插入图片描述"></p></li><li><p>在当前文件夹打开终端（如图示意打开终端）并输入解压命令<br><img src="/img/downloaded/aHR0cHM6_086901afd6a349a5bfb06ab4536adf46.png" alt="在这里插入图片描述"></p></li></ol><p>注意：如果你的压缩包名字不是这个请将“siRNA_0715.zip” 换成你的压缩文件的名字“xxx.zip”(xxx为文件名)<br>（方便复制）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> siRNA_0715.zip <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>到这里准备工作可以了，如果解压出问题了，可以重新上传一下，然后重复解压的操作</code></pre><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p><img src="/img/downloaded/aHR0cHM6_ec1ffa1535df433d9866dae1ce51808e.png" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/qq_23311271/article/details/140357529"> 详细可以参考这篇 </a></p><h1 id="参赛平台"><a href="#参赛平台" class="headerlink" title="参赛平台"></a>参赛平台</h1><p><a href="http://competition.sais.com.cn/competitionDetail/532230/format"> 上海科学智能研究院 </a></p><h1 id="Task-1-跑通基线"><a href="#Task-1-跑通基线" class="headerlink" title="Task 1 跑通基线"></a>Task 1 跑通基线</h1><blockquote><p><strong>baseline</strong></p></blockquote><ol><li>运行笔记本<blockquote><p>2.3siRNA&#x2F;task3.2_siRNA.ipynb<br><img src="/img/downloaded/aHR0cHM6_eb0ba47957fd4bf2aad2d33e633b2b16.png" alt="在这里插入图片描述"><br>就是这个橙不溜秋的书签，双击运行</p></blockquote></li><li>运行笔记本中的所有代码<br><img src="/img/downloaded/aHR0cHM6_ee4bb5641c0b436faffe246b30265603.png" alt="在这里插入图片描述"></li><li>等待结果出来<br><img src="/img/downloaded/aHR0cHM6_21c0df2a98f545b29c1d63ead8a5875f.png" alt="在这里插入图片描述"><br>可以看到多了一个文件夹和文件<blockquote><p>右键下载<strong>result&#x2F;submission.csv</strong>文件（<strong>download</strong>）</p></blockquote></li></ol><p><img src="/img/downloaded/aHR0cHM6_62f2ab77362b42bc9f367cc35b494ac8.png" alt="在这里插入图片描述"></p><h4 id="注意用完平台记得关闭实例（右上角）"><a href="#注意用完平台记得关闭实例（右上角）" class="headerlink" title="注意用完平台记得关闭实例（右上角）!!!"></a><font color="red" size = "1" >注意用完平台记得关闭实例（右上角）!!!</font></h4><h4 id="注意用完平台记得关闭实例（右上角）-1"><a href="#注意用完平台记得关闭实例（右上角）-1" class="headerlink" title="注意用完平台记得关闭实例（右上角）!!!"></a><font color="red" size = "2" >注意用完平台记得关闭实例（右上角）!!!</font></h4><h4 id="注意用完平台记得关闭实例（右上角）-2"><a href="#注意用完平台记得关闭实例（右上角）-2" class="headerlink" title="注意用完平台记得关闭实例（右上角）!!! "></a><font color="red" size = "3" >注意用完平台记得关闭实例（右上角）!!! </font></h4><p><img src="/img/downloaded/aHR0cHM6_00d5071a6a4f47ca960e424701f6ee83.png" alt="在这里插入图片描述"><br>tips: 算力充足可以当我没说,不关的话时长会一直使用</p><h2 id="提交文件获得第一个分数"><a href="#提交文件获得第一个分数" class="headerlink" title="提交文件获得第一个分数"></a>提交文件获得第一个分数</h2><p>平台：<a href="http://competition.sais.com.cn/competitionDetail/532230/format"> 上海科学智能研究院 </a></p><blockquote><p>注册和实名制略过</p></blockquote><h3 id="点击提交结果和选中刚刚下载的文件等待上传"><a href="#点击提交结果和选中刚刚下载的文件等待上传" class="headerlink" title="点击提交结果和选中刚刚下载的文件等待上传"></a>点击提交结果和选中刚刚下载的文件等待上传</h3><p><img src="/img/downloaded/aHR0cHM6_244591e9908741fea87392f2f0b922dd.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_31f7f73a377a4c258dcc762529a674ba.png" alt="在这里插入图片描述"></p><h3 id="点击我的成绩查看分数"><a href="#点击我的成绩查看分数" class="headerlink" title="点击我的成绩查看分数"></a>点击我的成绩查看分数</h3><p><img src="/img/downloaded/aHR0cHM6_efc7fa8898c945a68fa54f42e5207e63.png" alt="在这里插入图片描述"><br>其中task1中只选择了部分作为特征值，可以将全部的有效数据转换成特征值，必涨点。<br><img src="/img/downloaded/aHR0cHM6_add42f7cd5224b7bb3c98235ac281141.png" alt="在这里插入图片描述"></p><h3 id="训练数据表头说明"><a href="#训练数据表头说明" class="headerlink" title="训练数据表头说明"></a>训练数据表头说明</h3><blockquote><p>数据来源于官网</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_a59fef77e4c14944adf799a4de3ebb0c.png" alt="在这里插入图片描述"></p><h4 id="特征的分析总结"><a href="#特征的分析总结" class="headerlink" title="特征的分析总结"></a>特征的分析总结</h4><table><thead><tr><th>特征类别</th><th>特征字段名称</th><th>特征描述</th><th>分析目的</th></tr></thead><tbody><tr><td>基因特异性</td><td>gene_target_symbol_name</td><td>靶基因符号名称</td><td>研究不同基因名称对siRNA设计的影响</td></tr><tr><td></td><td>gene_target_ncbi_id</td><td>靶基因的NCBI标识</td><td>研究不同NCBI ID对siRNA设计的影响</td></tr><tr><td></td><td>gene_target_species</td><td>靶基因参考序列的物种</td><td>研究不同物种对siRNA沉默效率的影响</td></tr><tr><td>siRNA序列特征</td><td>siRNA_sense_seq</td><td>siRNA的sense序列</td><td>分析sense序列设计对沉默效率的影响</td></tr><tr><td></td><td>siRNA_antisense_seq</td><td>siRNA的antisense序列</td><td>分析antisense序列设计对沉默效率的影响</td></tr><tr><td></td><td>modified_siRNA_sense_seq</td><td>带修饰的siRNA的sense序列</td><td>分析修饰对siRNA功能的影响</td></tr><tr><td></td><td>modified_siRNA_antisense_seq</td><td>带修饰的siRNA的antisense序列</td><td>分析修饰对siRNA功能的影响</td></tr><tr><td>siRNA浓度和单位</td><td>siRNA_concentration</td><td>实验使用的siRNA浓度</td><td>研究不同浓度对沉默效率的影响</td></tr><tr><td></td><td>concentration_unit</td><td>siRNA浓度单位</td><td>研究不同单位对siRNA浓度影响的理解</td></tr><tr><td>转染方法</td><td>Transfection_method</td><td>转染方法</td><td>分析不同转染技术对siRNA传递和沉默效果的影响</td></tr><tr><td>转染后持续时间</td><td>Duration_after_transfection_h</td><td>转染后持续时间</td><td>了解转染后不同时间点的沉默效果</td></tr><tr><td>序列分解列表</td><td>modified_siRNA_sense_seq_list</td><td>带修饰的siRNA的sense序列分解列表</td><td>识别关键核苷酸位点，优化siRNA设计</td></tr><tr><td></td><td>modified_siRNA_antisense_seq_list</td><td>带修饰的siRNA的antisense序列分解列表</td><td>识别关键核苷酸位点，优化siRNA设计</td></tr><tr><td>靶基因序列</td><td>gene_target_seq</td><td>靶基因的参考序列</td><td>分析siRNA与靶基因序列匹配程度对沉默效率的影响</td></tr><tr><td>沉默效率</td><td>mRNA_remaining_pct</td><td>实验后mRNA的剩余百分比</td><td>评估不同条件下siRNA沉默效率的直接指标</td></tr></tbody></table><blockquote><p>目前尝试了 计算序列的长度 、计算序列的熵值、序列中腺嘌呤（A）、胸腺嘧啶（T）、胞嘧啶（C）和鸟嘌呤（G）的数目、GC含量、序列的熵值</p></blockquote><p>创建了两个函数作为特征</p><ol><li><p><code>calculate_sequence_features</code> 函数：</p><ul><li>它首先计算序列的长度。</li><li>然后计算序列中腺嘌呤（A）、胸腺嘧啶（T）、胞嘧啶（C）和鸟嘌呤（G）的数目，并由此计算出它们的相对频率。</li><li>接着计算GC含量，即序列中G和C的比例，这是影响DNA稳定性的一个重要因素。</li><li>计算序列的熵值，熵是一个度量序列随机性或复杂性的指标。熵越高，表示序列的多样性越高，没有明显的偏好性。</li></ul></li><li><p><code>calculate_entropy</code> 函数：</p><ul><li>计算序列中每个核苷酸（A、C、G、T）的数目。</li><li>用一个字典来存储每个核苷酸的计数。</li><li>遍历这个字典，对每个非零计数的核苷酸，使用公式 $-p \log_2(p)$  来计算其对熵的贡献。</li></ul></li></ol><p>（比赛原因先不贴代码）</p><blockquote><p>至此Task1 baseline 任务完成 </p></blockquote><h2 id="Task1-知识点终结"><a href="#Task1-知识点终结" class="headerlink" title="Task1 知识点终结"></a>Task1 知识点终结</h2><h3 id="基因组分词器类"><a href="#基因组分词器类" class="headerlink" title="基因组分词器类"></a>基因组分词器类</h3><p>基因组分词器的目的是将基因组序列分割成固定长度的n-gram片段。这是为了进一步处理或分析基因组数据时的需要。</p><p><strong>基因组数据通常是由ACGT四个字母（腺嘌呤、胞嘧啶、鸟嘌呤和胸腺嘧啶）组成的序列。</strong> </p><h4 id="n-gram"><a href="#n-gram" class="headerlink" title="n-gram"></a>n-gram</h4><blockquote><p>指由n个连续字母构成的片段。将基因组序列分割成n-gram片段可以帮助我们理解基因组的结构和功能。</p></blockquote><p>基因组分词器将基因组序列分割成固定长度的n-gram片段可以用于以下应用：</p><ul><li><strong>基因组注释</strong>：通过分析n-gram片段可以识别基因、启动子、转录因子结合位点等功能区域。</li><li><strong>基因组比对</strong>：将n-gram片段与已知的基因组序列进行比对，可以找到相似的片段并识别基因的同源性。</li><li><strong>基因组序列分类</strong>：通过分析n-gram片段可以将不同物种的基因组序列进行分类。</li></ul><h3 id="GRU的神经网络模型"><a href="#GRU的神经网络模型" class="headerlink" title="GRU的神经网络模型"></a>GRU的神经网络模型</h3><blockquote><p>GRU是一种循环神经网络（RNN）模型，全称为Gated Recurrent Unit。它是一种改进的RNN架构，用于处理序列数据，尤其在自然语言处理和语音识别等任务中表现出色。</p></blockquote><p>GRU通过<strong>引入门控机制来解决传统RNN存在的短期记忆和长期记忆不平衡的问题</strong>。它具有两个门控单元：<strong>重置门（reset gate）和更新门（update gate）</strong>。重置门控制了当前状态如何与先前状态相结合，而更新门控制了用于传递信息的新状态的计算。</p><blockquote><p>GRU单元结构如下图所示<br><img src="/img/downloaded/aHR0cHM6_e5feeae81be9445ca8263ebf1a870248.png" alt="在这里插入图片描述"><br>GRU是Ilya Sutskever和Oriol Vinyals等人在2014年提出的一种改进的RNN单元，它旨在解决传统RNN在处理长序列时出现的梯度消失或梯度爆炸问题。</p></blockquote><p>GRU的核心思想是引入两个门控机制：<strong>更新门（Update Gate）和重置门（Reset Gate）。<strong>这两个门控机制允许模型</strong>动态地决定在每个时间步上应该保留多少之前的信息，以及应该更新多少当前的信息</strong>。这使得GRU能够更好地捕捉长距离依赖关系。</p><h4 id="GRU的数学模型"><a href="#GRU的数学模型" class="headerlink" title="GRU的数学模型"></a>GRU的数学模型</h4><h5 id="更新门（Update-Gate）"><a href="#更新门（Update-Gate）" class="headerlink" title="更新门（Update Gate）"></a>更新门（Update Gate）</h5><p>更新门决定了在当前时间步应该保留多少之前的隐藏状态。更新门的公式如下：</p><p>$$<br>z_t &#x3D; \sigma(W_z \cdot [h_{t-1}, x_t])<br>$$</p><p>其中，$z_t$ 是更新门的输出，$W_z$ 是更新门的权重矩阵，$\sigma$ 是<strong>sigmoid函数</strong>（不懂的后面有讲 sigmoid函数）。</p><h5 id="重置门（Reset-Gate）"><a href="#重置门（Reset-Gate）" class="headerlink" title="重置门（Reset Gate）"></a>重置门（Reset Gate）</h5><p>重置门决定了在当前时间步应该忽略多少之前的隐藏状态。重置门的公式如下：</p><p>$$<br>r_t &#x3D; \sigma(W_r \cdot [h_{t-1}, x_t])<br>$$</p><p>其中，$r_t$ 是重置门的输出，$W_r$ 是重置门的权重矩阵。</p><h5 id="候选隐藏状态（Candidate-Hidden-State）"><a href="#候选隐藏状态（Candidate-Hidden-State）" class="headerlink" title="候选隐藏状态（Candidate Hidden State）"></a>候选隐藏状态（Candidate Hidden State）</h5><p>候选隐藏状态是当前时间步的新信息，其公式如下：</p><p>$$<br>\tilde{h}<em>t &#x3D; \tanh(W \cdot [r_t \odot h</em>{t-1}, x_t])<br>$$</p><p>其中，$\tilde{h}_t$ 是候选隐藏状态，$W$ 是候选隐藏状态的权重矩阵，$\odot$ 表示<strong>Hadamard乘积</strong>(不懂的后面有讲 Hadamard乘积)。</p><h5 id="最终隐藏状态（Final-Hidden-State）"><a href="#最终隐藏状态（Final-Hidden-State）" class="headerlink" title="最终隐藏状态（Final Hidden State）"></a>最终隐藏状态（Final Hidden State）</h5><p>最终隐藏状态结合了之前保留的信息和当前的新信息，其公式如下：</p><p>$$<br>h_t &#x3D; (1 - z_t) \odot h_{t-1} + z_t \odot \tilde{h}_t<br>$$</p><p>其中，$h_t$ 是最终的隐藏状态。　</p><p><strong>GRU在自然语言处理、语音识别和时间序列预测等领域有着广泛的应用</strong>。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong>相比于普通的RNN模型，GRU具有更好的记忆能力和更强的建模能力，同时减少了参数数量，使得训练过程更加高效。</strong> 由于其优秀的性能和实用性，GRU已经成为经典的循环神经网络模型之一，并被广泛应用于各种序列数据分析任务中。</p><h3 id="学科知识"><a href="#学科知识" class="headerlink" title="学科知识"></a>学科知识</h3><h4 id="RNA干扰（RNAi）"><a href="#RNA干扰（RNAi）" class="headerlink" title="RNA干扰（RNAi）"></a>RNA干扰（RNAi）</h4><blockquote><p><strong>RNA干扰（RNAi）是一种细胞内的基因调控机制，通过通过RNA分子的干扰来抑制特定基因的表达。</strong></p></blockquote><p>RNAi在细胞内通过两种途径实现：<strong>小干扰RNA（siRNA） 和微小RNA（miRNA）</strong>。</p><p>在RNAi中，基因表达的抑制通常发生在转录后水平。当特定基因的DNA序列转录成RNA时，RNA聚合酶将生成多个复制的RNA分子。<strong>这些RNA分子中的一部分可以通过Dicer酶切割成长度约为21-23个核苷酸的小片段，即siRNA或miRNA</strong>。这些小片段与蛋白质复合物<strong>形成RNA-诱导沉默复合物（RISC），并通过与靶标mRNA相互作用来抑制其翻译或引起其降解</strong>。</p><p><strong>siRNA是通过外源性引入细胞的siRNA分子，通过与特定基因的mRNA相互作用来抑制其表达。</strong><br><strong>miRNA是内在于细胞的小RNA分子，能够识别并与多个基因的mRNA结合，从而调节多个基因的表达。</strong></p><p>RNAi在生物学研究中被广泛应用。可以<strong>用于研究基因功能，筛选潜在药物靶点，开发基因治疗方法等</strong>。<strong>还有潜力成为治疗疾病的方法，包括癌症、病毒感染和遗传疾病等</strong>。</p><h4 id="Dicer-酶"><a href="#Dicer-酶" class="headerlink" title="Dicer 酶"></a>Dicer 酶</h4><blockquote><p>RNA 干扰（RNAi）过程中的一个关键酶。它是一种 RNase III 家族的内切酶，在 RNAi 过程中起着重要的作用。</p></blockquote><p>Dicer 酶能够识别和切割双链 RNA（dsRNA）分子，将其切割成短的双链小干扰 RNA（siRNA）。</p><h4 id="RNAi作用机制"><a href="#RNAi作用机制" class="headerlink" title="RNAi作用机制"></a>RNAi作用机制</h4><blockquote><p>文档内容里面的这个讲的很详细我啃臭cv一份</p></blockquote><p>生物体内，RNAi首先将较长的双链RNA加工和切割成 siRNA，通常在每条链的3’末端带有2个核苷酸突出端。负责这种加工的酶是一种RNase III样酶，称为Dicer。形成后，siRNA与一种称为RNA诱导的沉默复合物（RNAinduced silencing complex, RISC）的多蛋白组分复合物结合。在RISC复合物中，siRNA链被分离，具有更稳定的5′末端的链通常被整合到活性RISC复合物中。然后，反义单链siRNA组分引导并排列在靶mRNA上，并通过催化RISC蛋白（Argonaute family（Ago2））的作用，mRNA被切割，即对应基因被沉默，表达蛋白能力削弱。<br><img src="/img/downloaded/aHR0cHM6_87da9c44cd4a49e493ce7ccd5998c7c7.png" alt="在这里插入图片描述"><br>传统siRNA设计原则与知识<br>  siRNA的沉默效率与众多因素相关，例如siRNA的稳定性、修饰、转染方法等。一些经验的生物知识可用于特征构建和AI模型的设计。</p><p>在siRNA一般设计过程中有以下知识和原则：</p><blockquote><ol><li>siRNA序列（一般为反义链）与靶向RNA互补。</li><li>siRNA序列长度一般在19～29nt之间。研究表明21nt相比27nt对靶基因的最大抑制率更容易达到。</li><li>一般来说，从靶基因起始密码子AUG下游50～100个核苷酸，或位于终止密码子50-100个核苷酸范围内的序列（确保转录基因为沉默状态）搜寻理想的siRNA序列，越靠近靶基因的3′端，其基因沉默效果可能越好。</li><li>一般设计好的潜在siRNA序列，会在GenBank数据库进行BLAST，去掉其他基因有显著同源性的靶序列（错误靶向）。</li><li>具体序列而言，最好为AA+(Nn)UU(N代表任意碱基，n为碱基数目)，其次是NA(Nn)UU和NA(Nn)NN。</li><li>一般情况下，siRNA的稳定性直接影响其最终在细胞中的敲低效率。在siRNA的反义链5’端第一个碱基尽量可能是为A或U; siRNA正义链的5’端第一个碱基尽量为G或C。</li><li>一般情况下，3′端的2个碱基使用突出的dTdT（deoxythymidine dinucleotide）取代，能够增强siRNA 双链复合体的稳定性，进而增加siRNA的敲低效率。</li><li>G&#x2F;C含量在30%～52%的siRNA序列，其沉默基因效果较好。研究表明40–55％ GC的含量敲低效率高于GC含量高于55%的。</li><li>一般来说，siRNA序列中连续2个及以上G&#x2F;C能够降低双链RNA内在稳定性，从而降低siRNA在细胞中的敲低效率；而连续3个以上的A和U可能终止由RNA Polymerase III介导的转录作用。siRNA序列中的重复序列或回文结构可能形成发夹状结构，这种结构的存在可以降低siRNA敲低效率。</li></ol></blockquote><h4 id="化学修饰siRNA"><a href="#化学修饰siRNA" class="headerlink" title="化学修饰siRNA"></a>化学修饰siRNA</h4><p>化学修饰siRNA是指通过<strong>在siRNA分子上引入化学修饰基团，改变其结构或性质的方法</strong>。这种修饰<strong>可以增强siRNA的稳定性、增加其目标特异性、改善细胞内进入能力</strong>等。</p><blockquote><p>常用的siRNA化学修饰包括以下几种:</p><ol><li>2’-氧甲基（2’-O-Me）修饰：这种修饰是将2’-羟基上的氧原子替换为甲基基团。它可以增加siRNA的稳定性，提高RNA酶的抵抗性。</li><li>2’-氟（2’-F）修饰：这种修饰是将2’-羟基上的氧原子替换为氟原子。它可以提高siRNA的稳定性和特异性，减少对非特定靶标的作用。</li><li>磷酸甲酯（PS）修饰：这种修饰是在磷酸二酯桥上引入甲酯基团。它可以增强siRNA的稳定性和细胞内进入能力。</li><li>枝状修饰：这种修饰是在siRNA分子上引入枝状结构，增加其稳定性和亲水性。</li><li>核苷酸修饰：这种修饰是在siRNA的碱基上引入修饰基团，例如甲基化、二硫苷化等。它可以改变siRNA与靶标RNA的配对能力和稳定性。</li></ol></blockquote><p>化学修饰siRNA可以<strong>优化其性能和提高其在RNAi研究和治疗中的应用潜力</strong>。但化学修饰可能会<strong>对siRNA的活性和毒性产生影响</strong>，因此在设计和选择修饰方案时需要进行<strong>全面的评估和优化</strong>。</p><h3 id="机器学习知识点"><a href="#机器学习知识点" class="headerlink" title="机器学习知识点"></a>机器学习知识点</h3><h4 id="MAE-Mean-Absolute-Error"><a href="#MAE-Mean-Absolute-Error" class="headerlink" title="MAE (Mean Absolute Error)"></a>MAE (Mean Absolute Error)</h4><blockquote><p><strong>表示预测值与真实值之间的平均绝对误差。</strong></p></blockquote><p>它计算每个样本的预测值与真实值之间的差值的绝对值，然后对所有样本取平均。</p><h4 id="召回率（Recall）"><a href="#召回率（Recall）" class="headerlink" title="召回率（Recall）"></a>召回率（Recall）</h4><blockquote><p><strong>表示所有真正例中被正确预测为正例的比例。</strong></p></blockquote><p>召回率可以衡量模型对正例的覆盖程度，即模型有多少能够找到真正例。</p><h4 id="F1得分"><a href="#F1得分" class="headerlink" title="F1得分"></a>F1得分</h4><blockquote><p><strong>精确度和召回率的调和平均值。</strong></p></blockquote><p>F1得分的取值范围为0到1，其中1表示最佳性能，0表示最差性能。</p><h4 id="精确度（Precision）"><a href="#精确度（Precision）" class="headerlink" title="精确度（Precision）"></a>精确度（Precision）</h4><blockquote><p><strong>表示被预测为正例中实际为正例的比例。</strong></p></blockquote><p>精确度可以衡量模型的准确性，即模型有多少预测为正例的样本真正是正例。</p><h5 id="赛题评分代码"><a href="#赛题评分代码" class="headerlink" title="赛题评分代码"></a>赛题评分代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># score = 50% × (1−MAE/100) + 50% × F1 × (1−Range-MAE/100)</span><span class="token keyword">def</span> <span class="token function">calculate_metrics</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 计算平均绝对误差（MAE）</span>    mae <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y_true <span class="token operator">-</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 将真实值和预测值转换为二值标签，根据阈值进行分类</span>    y_true_binary <span class="token operator">=</span> <span class="token punctuation">(</span>y_true <span class="token operator">&lt;</span> threshold<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    y_pred_binary <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">&lt;</span> threshold<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment"># 阈值（30）</span>    <span class="token comment"># 创建一个掩码，用于将预测值限制在指定范围内</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_pred <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span>    <span class="token comment"># 在掩码范围内计算平均绝对误差（MAE）</span>    range_mae <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>y_true<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> y_pred<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mask<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">100</span>    <span class="token comment"># 计算精确度、召回率和F1分数</span>    precision <span class="token operator">=</span> precision_score<span class="token punctuation">(</span>y_true_binary<span class="token punctuation">,</span> y_pred_binary<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">)</span>    recall <span class="token operator">=</span> recall_score<span class="token punctuation">(</span>y_true_binary<span class="token punctuation">,</span> y_pred_binary<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> precision <span class="token operator">*</span> recall <span class="token operator">/</span> <span class="token punctuation">(</span>precision <span class="token operator">+</span> recall<span class="token punctuation">)</span>    <span class="token comment"># 计算综合评分</span>    score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> range_mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> <span class="token number">0.5</span>        <span class="token keyword">return</span> score <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="综合评分"><a href="#综合评分" class="headerlink" title="综合评分"></a>综合评分</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> range_mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> <span class="token number">0.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>最终的评分是根据模型在三个方面的表现进行计算的。</p><ol><li>通过计算平均绝对误差（MAE）来衡量模型的整体预测精度，MAE越小，表明模型的预测误差越小，得分越高。</li><li>通过计算在指定范围内的平均绝对误差（Range MAE），来衡量模型对于特定范围内的预测的准确性，Range MAE越小，表明模型在该范围内的预测误差越小，得分越高。</li><li>计算模型的分类性能，即精确度、召回率和F1得分。F1得分越高，表明模型在分类任务上的性能越好，得分越高。最终的评分是这几个值的加权平均数，其中MAE和Range MAE各占50%权重。<br>综合考虑这些因素，可以得出模型的总体表现得分。</li></ol></blockquote><h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h5><p><strong>在分类问题中，精确度和召回率是互相影响的指标</strong>。高精确度可能意味着模型只预测那些非常确信的正例，导致召回率较低。相反，高召回率可能意味着模型会将更多样本预测为正例，导致精确度较低。因此，F1得分作为精确度和召回率的综合指标，可以平衡这两个指标的表现。<strong>在评估模型性能时，通常会综合考虑精确度、召回率和F1得分。</strong></p><h4 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h4><blockquote><p>一种常用的激活函数，用于在神经网络中引入非线性。</p></blockquote><p>它的数学表达式如下：</p><p>$$<br>sigmoid(x) &#x3D; 1 &#x2F; (1 + exp(-x))<br>$$</p><p>其中，$exp(-x)$表示e的-x次方，e是自然常数。</p><p><strong>Sigmoid函数的输出值范围在0到1之间，通常用于将输入值映射到一个概率分布，或者作为二分类问题中的激活函数。</strong></p><p>在GRU单元中，Sigmoid函数被用于计算两个门控向量：更新门（update gate）和重置门（reset gate）。这两个门控向量通过Sigmoid函数将输入向量和先前的隐藏状态向量映射到0到1之间的值，以控制它们对更新和重置操作的贡献。</p><p><strong>更新门决定了先前的隐藏状态应该如何被保留或更新，而重置门决定了先前的隐藏状态如何与当前输入进行组合。<br>Sigmoid函数在GRU单元中通过限制门控向量的取值范围，使得GRU单元能够自适应地更新和遗忘信息，并有效地处理输入序列数据。</strong></p><h4 id="Hadamard乘积"><a href="#Hadamard乘积" class="headerlink" title="Hadamard乘积"></a>Hadamard乘积</h4><blockquote><p>也称为元素级乘积或逐元素乘积，是一种运算，用来<strong>对两个具有相同维度的向量、矩阵或张量进行逐元素的相乘</strong>。</p></blockquote><p>对于两个维度相同的向量 A 和 B，Hadamard乘积的运算规则为：<br>$$<br>C &#x3D; A ⊙ B<br>$$<br>其中 ⊙ 表示Hadamard乘积运算，C 是结果向量，C 的每个元素都等于 A 和 B 对应位置元素的乘积。</p><p>对于矩阵和张量，Hadamard乘积的运算规则与向量相同，只不过是在对应位置的元素进行相乘。<br><strong>Hadamard乘积通常用于逐元素操作，如逐元素乘法、逐元素加法等。</strong><br>它与矩阵乘法或点积运算不同，<strong>矩阵乘法是对应位置元素的乘积再求和</strong>，<br>而<strong>Hadamard乘积是对应位置元素直接相乘。</strong><br>Hadamard乘积<strong>在深度学习中经常用于一些操作，如逐元素激活函数、逐元素损失函数、逐元素操作的正则化等</strong>。它可以帮助模型学习非线性关系，同时保持数据的维度不变。</p><h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><blockquote><p>前面了解了赛题，这个主要讲baseline代码，入门RNN和特征工程</p></blockquote><h2 id="解读官方baseline"><a href="#解读官方baseline" class="headerlink" title="解读官方baseline"></a>解读官方baseline</h2><h2 id="set-random-seed"><a href="#set-random-seed" class="headerlink" title="set_random_seed"></a>set_random_seed</h2><blockquote><p>统一设置随机种子</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_random_seed</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置随机种子，确保结果可复现。    参数:        seed (int): 随机种子值。    返回:        无    """</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># 设置NumPy的随机种子</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># 设置Python内置的随机数生成器的种子</span>    torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># 设置PyTorch的随机种子</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># 设置CUDA的随机种子</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># 设置所有CUDA设备的随机种子</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 确保每次卷积算法选择都是确定的</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 关闭CuDNN自动优化功能，确保结果可复现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里做了这些操作</p></blockquote><ol><li>设置NumPy的随机种子 </li><li>设置Python内置的随机数生成器的种子 </li><li>设置PyTorch的随机种子 </li><li>设置CUDA的随机种子</li><li>设置所有CUDA设备的随机种子 </li><li>确保每次卷积算法选择是确定的 </li><li>关闭CuDNN自动优化功能</li></ol><p><strong>就是把每一个自动优化或随机种子的选项都关掉了，然后确保结果不会因为自动优化或随机数而改变,因而可以复现结果。</strong></p><h2 id="SiRNADataset"><a href="#SiRNADataset" class="headerlink" title="SiRNADataset"></a>SiRNADataset</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiRNADataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> tokenizer<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> is_test<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化SiRNADataset类                参数：            df (DataFrame): 包含数据的数据框            columns (list): 包含序列的列名列表            vocab (Vocab): 词汇表            tokenizer (Tokenizer): 分词器            max_len (int): 最大序列长度            is_test (bool, optional): 是否是测试集，默认为False        """</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> df        self<span class="token punctuation">.</span>columns <span class="token operator">=</span> columns        self<span class="token punctuation">.</span>vocab <span class="token operator">=</span> vocab        self<span class="token punctuation">.</span>tokenizer <span class="token operator">=</span> tokenizer        self<span class="token punctuation">.</span>max_len <span class="token operator">=</span> max_len        self<span class="token punctuation">.</span>is_test <span class="token operator">=</span> is_test    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回数据集的长度        """</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取数据集中的第idx个样本                参数：            idx (int): 样本索引                    返回：            seqs (list): 编码后的序列列表            target (tensor): 目标值张量（仅在非测试集模式下）        """</span>        row <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        seqs <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenize_and_encode<span class="token punctuation">(</span>row<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> self<span class="token punctuation">.</span>columns<span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_test<span class="token punctuation">:</span>            <span class="token keyword">return</span> seqs        <span class="token keyword">else</span><span class="token punctuation">:</span>            target <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'mRNA_remaining_pct'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> seqs<span class="token punctuation">,</span> target    <span class="token keyword">def</span> <span class="token function">tokenize_and_encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        对序列进行分词和编码                参数：            seq (str): 待处理的序列                    返回：            encoded_seq (tensor): 编码后的序列张量        """</span>        <span class="token keyword">if</span> <span class="token string">' '</span> <span class="token keyword">in</span> seq<span class="token punctuation">:</span>            tokens <span class="token operator">=</span> seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 如果序列中包含空格，则按空格分词</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tokens <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>  <span class="token comment"># 否则使用分词器进行分词</span>        encoded <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>stoi<span class="token punctuation">.</span>get<span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">]</span>  <span class="token comment"># 将分词后的每个词编码为对应的索引</span>        padded <span class="token operator">=</span> encoded <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_len <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将序列补齐到最大长度</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>padded<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>max_len<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了一个<strong>SiRNADataset类来创建一个自定义的PyTorch数据集对象</strong>。</p><p><strong>目的是将输入的数据框（df）中的序列数据分词、编码和填充，并返回编码后的序列和目标值</strong>。</p><h3 id="SiRNADataset类的方法"><a href="#SiRNADataset类的方法" class="headerlink" title="SiRNADataset类的方法"></a>SiRNADataset类的方法</h3><h4 id="初始化方法："><a href="#初始化方法：" class="headerlink" title="初始化方法："></a>初始化方法：</h4><blockquote><p>接受数据并处理成对象属性</p></blockquote><p>接收了下面这些数据并保存为对象的属性：</p><p> <strong>1. 接收数据框（df）<br> 2. 包含序列的列名（columns）<br> 3. 词汇表（vocab）<br> 4. 分词器（tokenizer）<br> 5. 最大序列长度（max_len）<br> 6. 否为测试集（is_test)</strong></p><h4 id="len-方法"><a href="#len-方法" class="headerlink" title="__len__方法"></a>__len__方法</h4><blockquote><p>返回数据框中的样本数量。</p></blockquote><h4 id="getitem-方法"><a href="#getitem-方法" class="headerlink" title="__getitem__方法"></a>__getitem__方法</h4><blockquote><p>根据给定的索引（idx），获取数据集中的第idx个样本。</p></blockquote><p>首先根据索引获取数据框中的一行数据，然后对每一列的序列数据进行分词和编码。</p><ul><li>如果是测试集模式（is_test为True），则返回编码后的序列。</li><li>如果不是测试集模式，则将目标值转换为张量，并返回编码后的序列和目标值。</li></ul><h4 id="tokenize-and-encode方法"><a href="#tokenize-and-encode方法" class="headerlink" title="tokenize_and_encode方法"></a>tokenize_and_encode方法</h4><blockquote><p>接收一个序列（seq，这个就是我们要处理的序列）作为输入，根据序列是否包含空格，选择不同的方式分词。</p></blockquote><p>这里有两种分词方法:</p><ul><li>包含空格的序列，将其按空格进行分词；  （这个就是对<strong>modified_siRNA_antisense_seq_list(modified_xxxx)</strong> 的数据，它本身已经根据空格分好了）</li><li>常规序列，使用指定的分词器进行分词。</li></ul><p>然后，将分词后的token转换为词汇表中对应的索引，未知的token使用索引0（代表$<pad>$）。最后将编码后的序列填充到最大长度，返回张量格式的序列。</p><h2 id="SiRNAModel-类"><a href="#SiRNAModel-类" class="headerlink" title="SiRNAModel 类"></a>SiRNAModel 类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiRNAModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embed_dim<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> hidden_dim<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> n_layers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化SiRNA模型        参数:            vocab_size (int): 词汇表大小            embed_dim (int): 嵌入维度 (默认值: 200)            hidden_dim (int): 隐藏层维度 (默认值: 256)            n_layers (int): GRU层的层数 (默认值: 3)            dropout (float): Dropout层的丢弃率 (默认值: 0.5)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SiRNAModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embed_dim<span class="token punctuation">,</span> padding_idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化嵌入层</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>embed_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>  <span class="token comment"># 初始化GRU层</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化全连接层</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>  <span class="token comment"># 初始化Dropout层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        前向传播函数        参数:            x (List[Tensor]): 输入序列列表        返回:            Tensor: 模型的输出张量        """</span>        embedded <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token keyword">for</span> seq <span class="token keyword">in</span> x<span class="token punctuation">]</span>  <span class="token comment"># 将输入序列传入嵌入层</span>        outputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> embed <span class="token keyword">in</span> embedded<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>embed<span class="token punctuation">)</span>  <span class="token comment"># 传入GRU层</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取最后一个隐藏状态，并进行dropout处理</span>            outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 将所有序列的输出拼接起来</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 传入全连接层</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类继承自nn.Module类，用来处理RNA序列。</p><ol><li><strong>先将输入序列列表x传入嵌入层</strong>，</li><li>然后通过<strong>循环将每个序列的嵌入向量传入双向GRU层</strong>，<strong>取最后一个隐藏状态</strong>，<strong>并进行dropout处理</strong>。</li><li>最后，<strong>将所有序列的输出拼接起来，并传入一个全连接层，输出一个标量结果</strong>。</li></ol><h3 id="nn-Module类"><a href="#nn-Module类" class="headerlink" title="nn.Module类"></a>nn.Module类</h3><p><strong>nn.Module类是PyTorch中所有神经网络模型的基类</strong>，提供了一些<strong>基本的功能和方法，用于定义和管理神经网络模型的结构和参数</strong>。</p><h4 id="nn-Module类的作用有："><a href="#nn-Module类的作用有：" class="headerlink" title="nn.Module类的作用有："></a>nn.Module类的作用有：</h4><h5 id="定义模型的结构"><a href="#定义模型的结构" class="headerlink" title="定义模型的结构"></a>定义模型的结构</h5><blockquote><p><strong>通过__init__方法中定义各个层和模块，可以将不同的层组合在一起，构建出模型的结构。</strong></p></blockquote><h5 id="前向传播函数"><a href="#前向传播函数" class="headerlink" title="前向传播函数"></a>前向传播函数</h5><blockquote><p>通过forward方法中<strong>定义前向传播的过程</strong>，可以<strong>将输入数据在模型中传递，计算输出结果</strong>。</p></blockquote><h5 id="参数管理"><a href="#参数管理" class="headerlink" title="参数管理"></a>参数管理</h5><p>nn.Module类提供了一些方法，如<code>parameters()</code>和<code>named_parameters()</code>，可以自动追踪模型中所有的可学习参数，可以方便地进行参数的访问和管理。</p><h6 id="parameters"><a href="#parameters" class="headerlink" title="parameters()"></a><code>parameters()</code></h6><blockquote><p><code>parameters()</code>方法返回一个迭代器，该迭代器会遍历模型中的所有可学习参数。</p></blockquote><p>可学习参数是指那些需要在训练过程中进行优化调整的参数，例如神经网络中的权重和偏置项。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> SiRNAModel<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="named-parameters"><a href="#named-parameters" class="headerlink" title="named_parameters()"></a><code>named_parameters()</code></h6><blockquote><p><code>named_parameters()</code>方法返回一个迭代器，该迭代器会遍历模型中的所有可学习参数，并为每个参数附上一个名称。</p></blockquote><p>这个方法<strong>在调试和模型分析时常见</strong>，可以方便地<strong>查看每个参数的名称和对应的数值</strong>。也<strong>可以利用这个方法来选择性地冻结或更新某些参数。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'embedding'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>        param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 冻结嵌入层的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="模型保存和加载"><a href="#模型保存和加载" class="headerlink" title="模型保存和加载"></a>模型保存和加载</h5><blockquote><p>nn.Module类提供了方法，如<code>state_dict()</code>和<code>load_state_dict()</code>，可以方便地保存模型的状态和加载已保存的状态。</p></blockquote><p><strong>继承自nn.Module类的子类可以自由定义自己的网络结构，并且可以利用nn.Module提供的方法和功能来管理参数和实现前向传播过程。</strong><br>还可以<strong>与优化器、损失函数、数据加载器</strong>等，<strong>进一步提升模型的训练和使用效果</strong>。</p><h5 id="state-dict"><a href="#state-dict" class="headerlink" title="state_dict()"></a><code>state_dict()</code></h5><blockquote><p><code>state_dict()</code>(状态字典)是一个Python字典对象，其中包含了模型的所有可学习参数的名称和对应的张量值。</p></blockquote><p><code>state_dict()</code>方法返回模型的状态字典，可以将其保存到文件中，以便在之后的时间点恢复模型的状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> SiRNAModel<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'model.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="load-state-dict"><a href="#load-state-dict" class="headerlink" title="load_state_dict()"></a><code>load_state_dict()</code></h5><blockquote><p>用于加载之前保存的模型的状态字典。可以将保存的状态字典加载到同一类别的模型对象中，以便恢复模型的参数。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> SiRNAModel<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'model.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过<code>state_dict()</code>和<code>load_state_dict()</code>方法，可以方便地保存和加载模型的参数状态，以便进行模型的训练和推理。这些方法在迁移学习、继续训练以及模型部署等场景中常见。</p><h2 id="如何将序列转换成张量输入到模型里"><a href="#如何将序列转换成张量输入到模型里" class="headerlink" title="如何将序列转换成张量输入到模型里"></a>如何将序列转换成张量输入到模型里</h2><blockquote><p>关键代码是在<code>forward()</code>方法<br>方法: <code>forward(self, x)</code><br>参数: x (List[Tensor]): 输入序列列表</p></blockquote><p>   发现输入的是这个x，x又是输入的序列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> inputs<span class="token punctuation">,</span>target <span class="token keyword">in</span> train_loader<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"len(inputs):\n &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inputs[0].shape:\n &#123;0&#125; "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"intputs[0][0]:\n &#123;0&#125; "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"traget.shape:\n &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_91e9abd4fcdb4caa81d99e2e2132da2f.png" alt="在这里插入图片描述"><br>在处理siRNA序列数据时，我们首先注意到输入数据inputs包含两个元素，每个元素的尺寸为64×25。<br>这里的64表示批量处理的大小，而25代表每个序列的长度。通过观察inputs[0][0]，我们可以了解到siRNA的反义链序列（siRNA_antisense_seq）在经过向量化处理后的表现。在这里，<strong>序列的前7位是非零值，这些非零值代表了序列编码中每个字符的唯一标识符。</strong></p><blockquote><p>在这个模型的嵌入层初始化时我们做了这样一个操作，<br><img src="/img/downloaded/aHR0cHM6_965bd3ff86014a3986bcb223777759b1.png" alt="在这里插入图片描述"><br>其中<br><strong>vocab_size表示词汇表的大小<br>embed_dim表示嵌入向量的维度<br>padding_idx&#x3D;0表示对应的填充符号的索引。</strong></p></blockquote><p>为了使RNN模型能够有效处理这些数据，需要保证每个输入样本的长度一致，在创建模型时采取了<strong>填充（padding）策略</strong>（上方引用）。<br><strong>如果某个序列编码后的长度小于最大长度，我们会在其后补零，以确保所有序列在输入到RNN模型时具有统一的长度</strong>。<br>这里把所有序列都被填充至25位，来满足模型的输入要求。</p><h2 id="如何为siRNA序列分配唯一标识符"><a href="#如何为siRNA序列分配唯一标识符" class="headerlink" title="如何为siRNA序列分配唯一标识符"></a>如何为siRNA序列分配唯一标识符</h2><h3 id="首先进行分词处理"><a href="#首先进行分词处理" class="headerlink" title="首先进行分词处理"></a>首先进行分词处理</h3><h4 id="对于未格式化的siRNA-antisense-seq等序列"><a href="#对于未格式化的siRNA-antisense-seq等序列" class="headerlink" title="对于未格式化的siRNA_antisense_seq等序列"></a>对于未格式化的siRNA_antisense_seq等序列</h4><blockquote><p>使用GenomicTokenizer实现</p></blockquote><p>siRNA_antisense_seq序列通过每3个核苷酸一组划分，使用GenomicTokenizer实现，其中ngram和stride均设为3。</p><p>例如序列”AGCCGAGAU”，分词后得到[“AGC”, “CGA”, “GAU”]。</p><h4 id="对于格式化的modified-siRNA-antisense-seq-list等序列"><a href="#对于格式化的modified-siRNA-antisense-seq-list等序列" class="headerlink" title="对于格式化的modified_siRNA_antisense_seq_list等序列"></a>对于格式化的modified_siRNA_antisense_seq_list等序列</h4><blockquote><p>modified_siRNA_antisense_seq_list序列根据空格已分词。</p></blockquote><h3 id="基于数据集中所有token构建词汇表。"><a href="#基于数据集中所有token构建词汇表。" class="headerlink" title="基于数据集中所有token构建词汇表。"></a>基于数据集中所有token构建词汇表。</h3><blockquote><p>该词汇表映射token至唯一标识符，即索引。映射过程确保RNN模型接收数值形式输入，同时学习序列中不同token间关系。</p></blockquote><p>使用<code>GenomicVocab.create</code>方法基于<code>tokens</code>创建基因词汇表。</p><h3 id="创建基因词汇表代码"><a href="#创建基因词汇表代码" class="headerlink" title="创建基因词汇表代码"></a>创建基因词汇表代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建分词器</span>```pythontokenizer <span class="token operator">=</span> GenomicTokenizer<span class="token punctuation">(</span>ngram<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 创建词汇表</span>all_tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储所有的tokens</span><span class="token keyword">for</span> col <span class="token keyword">in</span> columns<span class="token punctuation">:</span>  <span class="token comment"># 遍历每一列</span>    <span class="token keyword">for</span> seq <span class="token keyword">in</span> train_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历每个序列</span>        <span class="token keyword">if</span> <span class="token string">' '</span> <span class="token keyword">in</span> seq<span class="token punctuation">:</span>  <span class="token comment"># 如果序列中包含空格，则说明是修改过的序列</span>            all_tokens<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将序列按空格进行切分，并添加到all_tokens中</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 如果序列中不包含空格，则使用tokenizer对序列进行分词</span>            all_tokens<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将分词后的结果添加到all_tokens中</span>vocab <span class="token operator">=</span> GenomicVocab<span class="token punctuation">.</span>create<span class="token punctuation">(</span>all_tokens<span class="token punctuation">,</span> max_vocab<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 使用all_tokens创建基因词汇表，设定最大词汇量为10000，词频阈值为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>先创建一个<code>GenomicTokenizer</code>对象，用于对序列进行分词。</li><li>然后遍历数据集中的每个序列，如果序列中包含空格，则说明是修改过的序列，直接按空格切分并添加到<code>all_tokens</code>中；</li><li>如果序列中不包含空格，则使用分词器<code>tokenizer</code>对序列进行分词，并将结果添加到<code>all_tokens</code>中。</li><li>最后使用<code>GenomicVocab.create</code>方法基于<code>all_tokens</code>创建基因词汇表，设定最大词汇量为10000，词频阈值为1。</li></ol><h4 id="来获得序列的最大长度"><a href="#来获得序列的最大长度" class="headerlink" title="来获得序列的最大长度"></a>来获得序列的最大长度</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用于计算训练数据中每列数据最大长度</span><span class="token comment"># 首先使用嵌套的生成器表达式，遍历训练数据中的每一列</span><span class="token comment"># 在内部生成器中，首先检查当前列的每个样本，判断是否包含空格</span><span class="token comment"># 如果包含空格，则使用split()方法将字符串拆分成单词，并返回拆分后的单词个数</span><span class="token comment"># 如果不包含空格，则使用tokenizer.tokenize()将字符串拆分成单词，并返回拆分后的单词个数</span><span class="token comment"># 通过max函数将每列中的最大长度取出，并使用嵌套的生成器表达式再次计算所有列中的最大长度</span>max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>    <span class="token builtin">max</span><span class="token punctuation">(</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">' '</span> <span class="token keyword">in</span> seq <span class="token keyword">else</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> seq <span class="token keyword">in</span> train_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SiRNADataset类"><a href="#SiRNADataset类" class="headerlink" title="SiRNADataset类"></a>SiRNADataset类</h3><blockquote><p>完成上面的操作之后，在loader获取样本的时候把token转为索引，即我们通过转换成SiRNADataset类的过程中，让数据转换成索引</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiRNADataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> tokenizer<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> is_test<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化SiRNADataset类                参数：        - df：包含数据的DataFrame        - columns：包含序列的列名        - vocab：词汇表        - tokenizer：分词器        - max_len：最大序列长度        - is_test：指示是否是测试集                """</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> df  <span class="token comment"># 数据框</span>        self<span class="token punctuation">.</span>columns <span class="token operator">=</span> columns  <span class="token comment"># 包含序列的列名</span>        self<span class="token punctuation">.</span>vocab <span class="token operator">=</span> vocab  <span class="token comment"># 词汇表</span>        self<span class="token punctuation">.</span>tokenizer <span class="token operator">=</span> tokenizer  <span class="token comment"># 分词器</span>        self<span class="token punctuation">.</span>max_len <span class="token operator">=</span> max_len  <span class="token comment"># 最大序列长度</span>        self<span class="token punctuation">.</span>is_test <span class="token operator">=</span> is_test  <span class="token comment"># 指示是否是测试集</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取数据集的长度                返回值：        - 数据集的长度                """</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取数据集中的第idx个样本                参数：        - idx：样本索引                返回值：        - 如果是测试集模式，返回编码后的序列        - 如果是训练集模式，返回编码后的序列和对应的目标值                """</span>        row <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>  <span class="token comment"># 获取第idx行数据</span>                <span class="token comment"># 对每一列进行分词和编码</span>        seqs <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenize_and_encode<span class="token punctuation">(</span>row<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> self<span class="token punctuation">.</span>columns<span class="token punctuation">]</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_test<span class="token punctuation">:</span>            <span class="token comment"># 仅返回编码后的序列（测试集模式）</span>            <span class="token keyword">return</span> seqs        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 获取目标值并转换为张量（训练集模式）</span>            target <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'mRNA_remaining_pct'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>            <span class="token comment"># 返回编码后的序列和目标值</span>            <span class="token keyword">return</span> seqs<span class="token punctuation">,</span> target    <span class="token keyword">def</span> <span class="token function">tokenize_and_encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        对序列进行分词和编码                参数：        - seq：输入的序列                返回值：        - 编码后的序列                """</span>        <span class="token keyword">if</span> <span class="token string">' '</span> <span class="token keyword">in</span> seq<span class="token punctuation">:</span>            <span class="token comment"># 修改过的序列，按空格分词</span>            tokens <span class="token operator">=</span> seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 常规序列，使用分词器分词</span>            tokens <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>                <span class="token comment"># 将token转换为索引，未知token使用0（&lt;pad>）</span>        encoded <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>stoi<span class="token punctuation">.</span>get<span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">]</span>        <span class="token comment"># 将序列填充到最大长度</span>        padded <span class="token operator">=</span> encoded <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_len <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 返回张量格式的序列</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>padded<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>max_len<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类继承自<strong>PyTorch的Dataset类</strong>，用于加载数据并将其传递给模型进行训练或预测。</p><p>在<code>__getitem__</code>方法中，根据索引idx获取对应的数据行。然后<strong>针对每个包含序列的列，调用<code>tokenize_and_encode</code>方法对序列进行分词和编码。</strong> 如果是测试集模式，直接返回编码后的序列；如果是训练集模式，还需获取目标值并将其转换为张量。然后，<code>tokenize_and_encode</code>方法用于对序列进行分词和编码。<strong>对于常规序列，使用传入的分词器对其进行分词；对于修改过的序列，直接按空格进行分词。然后将分词后的token转换为词汇表中的索引，未知token使用索引0表示。最后将序列填充到最大长度，并返回张量格式的序列。</strong></p><h4 id="Dataset类"><a href="#Dataset类" class="headerlink" title="Dataset类"></a>Dataset类</h4><blockquote><p>它是一个数据集的抽象接口，可以根据需要自定义数据集的读取和处理方式。</p></blockquote><p>在<strong>使用PyTorch进行训练和预测</strong>时，需要将<strong>数据加载到Dataset对象中</strong>，并<strong>通过DataLoader对象对数据进行批处理和数据加载</strong>。<br><strong>通过继承Dataset类，我们可以自定义数据集的处理逻辑，包括数据读取、数据预处理、数据转换等。</strong></p><p>我们需要实现__len__和__getitem__方法，分别用于获取数据集的长度和获取指定索引位置的样本。</p><p><strong>可以自定义Dataset类来灵活地处理不同类型的数据集，并将其传递给模型进行训练或预测。</strong></p><p>关于训练的模型前面在<code>SiRNAModel 类</code>时讲过，就不再重述</p><p>我们首先进行索引嵌入处理，即<strong>将离散的符号（例如单词、字符或基因序列片段）转换成连续的向量形式</strong>。过程中涉及<strong>将高维的稀疏表示（如独热编码）转换为低维的密集向量</strong>，以使得<strong>语义相近的符号在向量空间中的相对位置更接近</strong>。<br>转换后，嵌入向量的维度将从BatchSize * Length扩展为BatchSize * Length * EmbeddingSize，其中EmbeddingSize，也就是嵌入维度embed_dim，被设定为200。</p><h3 id="RNN（递归神经网络）知识点"><a href="#RNN（递归神经网络）知识点" class="headerlink" title="RNN（递归神经网络）知识点"></a>RNN（递归神经网络）知识点</h3><blockquote><p>一种专门用于处理序列数据的神经网络模型。<br>与传统的前馈神经网络不同，RNN具有反馈连接，可以将前面的输出作为后续输入的一部分，使其具有记忆性。</p></blockquote><p>RNN的基本结构是一个单元（cell）或节点，其中包含一个输入层、一个隐藏层和一个输出层。隐藏层中的神经元通过时间反馈连接，使得信息可以在不同时间步之间传递和共享。这种结构使得RNN能够处理任意长度的序列数据，并且能够捕捉到序列中的上下文信息。</p><blockquote><p>RNN的架构示意图<br><img src="/img/downloaded/aHR0cHM6_f48dc300b4e84e29aa59b0553582be4d.png" alt="在这里插入图片描述"><br>RNN，即循环神经网络（Recurrent Neural Network），是一种适合于序列数据的深度学习模型。它与传统的前馈神经网络（如多层感知机）不同，RNN 能够处理序列中的动态特征，即能够捕捉时间序列中的动态依赖关系。</p></blockquote><p>RNN的数学表达可以简化为以下形式：<br>$$<br> h_t &#x3D; f(W_{hh} h_{t-1} + W_{xh} x_t + b_h)<br>$$<br>$$<br>y_t &#x3D; f(W_{hy} h_t + b_y)<br>$$</p><p>其中，<br>$h_t$是时间步$t$的隐藏状态。<br>$x_t$是时间步$t$的输入向量。<br>$W_{hh}$和$W_{xh}$分别是从上一个时间步的隐藏状态到当前隐藏状态、从当前时间步的输入到当前隐藏状态的权重矩阵。<br>$b_h$是隐藏层的偏置项。<br>$W_{hy}$是从隐藏状态到输出的权重矩阵。<br>$b_y$是输出层的偏置项。<br>$f$是激活函数。</p><h4 id="RNN的训练过程"><a href="#RNN的训练过程" class="headerlink" title="RNN的训练过程"></a>RNN的训练过程</h4><p>在RNN中，<strong>每个时间步都有一个输入和一个输出</strong>。输入可以是任意维度的向量，而输出通常是一个固定大小的向量或者是一个标量。RNN通过学习一组可学习的权重参数来对输入序列进行处理，并输出相应的预测结果。</p><p><strong>RNN的训练过程通常是使用反向传播算法来优化模型的权重参数。</strong> 由于反向传播算法的梯度消失问题，在处理长序列时RNN往往会出现难以学习到长期依赖关系的情况。为了解决这个问题，一种<strong>常用的改进版本是长短期记忆网络（LSTM）和门控循环单元（GRU），它们能够更有效地捕捉和利用序列中的长期依赖关系。</strong> </p><h4 id="RNN-的特点"><a href="#RNN-的特点" class="headerlink" title="RNN 的特点"></a>RNN 的特点</h4><ul><li><strong>循环连接</strong>：RNN的每个神经元不仅与下一层的神经元相连，而且与同一层的下一个时间步的神经元相连，形成了一个循环结构。    </li><li><strong>时间步</strong>：RNN在序列的每个时间步上都会进行计算，每个时间步的输出不仅依赖于当前的输入，还依赖于前一个时间步的输出。</li><li><strong>隐藏状态</strong>：RNN通过隐藏状态（hidden state）来传递之前时间步的信息。隐藏状态可以看作是网络对之前序列信息的总结。  </li><li><strong>参数共享</strong>：在RNN中，同一网络参数在每个时间步上都会被重复使用，这简化了模型结构，但同时也带来了一些挑战，如梯度消失或梯度爆炸问题。</li><li><strong>长短期记忆（LSTM）和门控循环单元（GRU）</strong>：这两种网络结构是对传统RNN的改进，它们通过引入门控机制来解决梯度消失问题，使得网络能够学习长期依赖关系。</li><li><strong>应用领域</strong>：RNN广泛应用于自然语言处理（NLP）、语音识别、时间序列预测等领域，特别是在需要处理序列数据和捕捉时间依赖性的任务中。</li><li><strong>训练挑战</strong>：RNN的训练可能面临梯度消失或梯度爆炸的问题，这使得训练过程可能不稳定。现代优化技术如梯度裁剪或使用更高级的优化器（如Adam）可以帮助缓解这些问题。</li><li><strong>变长序列处理</strong>：RNN能够处理不同长度的序列，但需要通过填充（padding）或截断来保证输入序列具有相同的长度。</li></ul><h2 id="数据的特征工程-（EDA）"><a href="#数据的特征工程-（EDA）" class="headerlink" title="数据的特征工程 （EDA）"></a>数据的特征工程 （EDA）</h2><p>在官方baseline中，得分较低可能是由于数据特征简单、序列特征构造粗糙以及数据量不足等原因。为了解决序列特征问题，可以将其转化为表格问题并进行特征工程。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p>检查数据是否存在缺失值，并根据具体情况决定如何处理缺失值，如删除、填充等。</p><h4 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h4><p>检测和处理数据中的异常值，包括通过可视化和统计学方法识别异常值，并根据业务逻辑进行处理。</p><h3 id="处理类别型变量"><a href="#处理类别型变量" class="headerlink" title="处理类别型变量"></a>处理类别型变量</h3><h4 id="统计唯一值"><a href="#统计唯一值" class="headerlink" title="统计唯一值"></a>统计唯一值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>gene_target_symbol_name<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>计算DataFrame（df）中某一列（gene_target_symbol_name）中唯一值（unique value）的数量（nunique）。也就是统计该列中有多少不重复的值。</p></blockquote><h5 id="nunique"><a href="#nunique" class="headerlink" title="nunique()"></a><code>nunique()</code></h5><p><code>nunique()</code>函数是<strong>pandas库</strong>中的一个方法，用于<strong>计算一个序列（Series）或数据框（DataFrame）中唯一值的数量</strong>。<br>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Series<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 或</span>DataFrame<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dropna<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><ul><li><code>dropna</code>：是否排除缺失值，默认为True，即排除缺失值。</li><li><code>axis</code>：对于数据框，可以指定按行（axis&#x3D;0）或按列（axis&#x3D;1）计算唯一值的数量。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unique_count <span class="token operator">=</span> data<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_count<span class="token punctuation">)</span>  <span class="token comment"># 输出：5</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>unique_count_col <span class="token operator">=</span> df<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_count_col<span class="token punctuation">)</span><span class="token comment"># 输出：</span><span class="token comment"># A    3</span><span class="token comment"># B    2</span><span class="token comment"># dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计每个值的频率分布"><a href="#统计每个值的频率分布" class="headerlink" title="统计每个值的频率分布"></a>统计每个值的频率分布</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>gene_target_symbol_name<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这段代码是用来计算DataFrame（df）中某一列（gene_target_symbol_name）中每个唯一值（unique value）出现的次数（count）。它会返回一个Series对象，其中索引是唯一值，值是对应唯一值的出现次数。通过这个可以快速了解该列中每个值的频率分布。</p></blockquote><h4 id="value-counts"><a href="#value-counts" class="headerlink" title="value_counts()"></a><code>value_counts()</code></h4><p><code>value_counts()</code>函数是<strong>pandas库</strong>中的一个方法，用于<strong>计算一个序列（Series）中每个唯一值的数量。</strong></p><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Series<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dropna<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li><code>normalize</code>：是否返回相对频率，默认为False，即返回唯一值的数量。</li><li><code>sort</code>：是否按值进行排序，默认为True，即按值进行排序。</li><li><code>ascending</code>：是否按升序排列，默认为False，即按降序排列。</li><li><code>bins</code>：指定柱状图的箱数。</li><li><code>dropna</code>：是否排除缺失值，默认为True，即排除缺失值。</li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>value_count <span class="token operator">=</span> data<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>value_count<span class="token punctuation">)</span><span class="token comment"># 输出：</span><span class="token comment"># 2    3</span><span class="token comment"># 1    2</span><span class="token comment"># 3    2</span><span class="token comment"># 5    1</span><span class="token comment"># 4    1</span><span class="token comment"># dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上<code>value_counts()</code>方法计算了序列<code>data</code>中每个唯一值出现的次数，按降序排列输出。</p><h3 id="one-hot特征的构造"><a href="#one-hot特征的构造" class="headerlink" title="one-hot特征的构造"></a>one-hot特征的构造</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果有40个类别，那么会产生40列，如果第i行属于第j个类别，那么第j列第i行就是1，否则为0</span>df_gene_target_symbol_name <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">.</span>gene_target_symbol_name<span class="token punctuation">)</span>df_gene_target_symbol_name<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-interpolation"><span class="token string">f"feat_gene_target_symbol_name_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> df_gene_target_symbol_name<span class="token punctuation">.</span>columns<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间特征构造"><a href="#时间特征构造" class="headerlink" title="时间特征构造"></a>时间特征构造</h3><blockquote><p>有可能<br>没看出来，啃臭cv一份，很妙</p></blockquote><p>在数据观察的时候发现，siRNA_duplex_id的编码方式很有意思，其格式为AD-1810676.1，我们猜测AD是某个类别，后面的.1是版本，当中的可能是按照一定顺序的序列号，因此可以构造如下特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">siRNA_duplex_id_values <span class="token operator">=</span> df<span class="token punctuation">.</span>siRNA_duplex_id<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-|\."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码是从siRNA_duplex_id列中提取出按照一定顺序的序列号作为新的特征siRNA_duplex_id_values。<br>siRNA_duplex_id的编码格式为”AD-1810676.1”，<strong>其中”AD”表示某个类别，”.1”表示版本号，而中间的数字则是按照顺序的序列号。(假定，大概率)</strong><br>代码通过使用正则表达式分隔符”-“和”.”，将siRNA_duplex_id拆分成多个部分，然后取第二部分（索引为1），并将其转换为整数类型。得到的siRNA_duplex_id_values列即为按照一定顺序的序列号特征。</p><h4 id="上述对每一个siRNA-duplex-id的过程同下"><a href="#上述对每一个siRNA-duplex-id的过程同下" class="headerlink" title="上述对每一个siRNA_duplex_id的过程同下"></a>上述对每一个siRNA_duplex_id的过程同下</h4><p>(方便复制)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"AD-1810676.1"</span><span class="token comment"># 使用正则表达式分割字符串</span>parts <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'[-.]'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 将数字部分转换为NumPy数组，并转换为整数类型</span>numbers <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/downloaded/aHR0cHM6_578501e1ade440e8834f6f880cf4748d.png" alt="在这里插入图片描述"></p><h3 id="包含某些单词"><a href="#包含某些单词" class="headerlink" title="包含某些单词"></a>包含某些单词</h3><h4 id="对df中的cell-line-donor列构造特征"><a href="#对df中的cell-line-donor列构造特征" class="headerlink" title="对df中的cell_line_donor列构造特征"></a>对df中的<code>cell_line_donor</code>列构造特征</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对cell_line_donor列进行独热编码</span>df_cell_line_donor <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">.</span>cell_line_donor<span class="token punctuation">)</span><span class="token comment"># 为独热编码后的列名添加前缀</span>df_cell_line_donor<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-interpolation"><span class="token string">f"feat_cell_line_donor_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> df_cell_line_donor<span class="token punctuation">.</span>columns<span class="token punctuation">]</span><span class="token comment"># 创建新的特征列feat_cell_line_donor_hepatocytes，值为cell_line_donor列是否包含"Hepatocytes"的布尔值转换为整数</span>df_cell_line_donor<span class="token punctuation">[</span><span class="token string">"feat_cell_line_donor_hepatocytes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span>df<span class="token punctuation">.</span>cell_line_donor<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">"Hepatocytes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 创建新的特征列feat_cell_line_donor_cells，值为cell_line_donor列是否包含"Cells"的布尔值转换为整数</span>df_cell_line_donor<span class="token punctuation">[</span><span class="token string">"feat_cell_line_donor_cells"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    df<span class="token punctuation">.</span>cell_line_donor<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">"Cells"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码小结"><a href="#代码小结" class="headerlink" title="代码小结"></a>代码小结</h5><ol><li><strong>使用 <code>pd.get_dummies()</code> 函数对 <code>cell_line_donor</code> 列进行独热编码，</strong>  编码后的列会根据不同的取值创建新的列。</li><li><strong>使用列表推导式为 <code>df_cell_line_donor</code> 的列名添加前缀 “feat_cell_line_donor_”。</strong></li><li>创建新的特征列 <code>feat_cell_line_donor_hepatocytes</code>，<strong>根据 <code>cell_line_donor</code> 列是否包含 “Hepatocytes”</strong> ，将布尔值转换为整数（1 表示包含，0 表示不包含）。</li><li>创建新的特征列 <code>feat_cell_line_donor_cells</code>，<strong>根据 <code>cell_line_donor</code> 列是否包含 “Cells” 来确定的</strong>，将布尔值转换为整数（1 表示包含，0 表示不包含）。</li></ol><p>将 <code>cell_line_donor</code> 列转换为独热编码，并创建两个新的特征列，用于表示是否包含特定的关键词。</p><h3 id="对碱基的模式进行特征构造"><a href="#对碱基的模式进行特征构造" class="headerlink" title="对碱基的模式进行特征构造"></a>对碱基的模式进行特征构造</h3><h4 id="根据上一个task中的rna知识提取"><a href="#根据上一个task中的rna知识提取" class="headerlink" title="根据上一个task中的rna知识提取"></a>根据上一个task中的rna知识提取</h4><blockquote><p><img src="/img/downloaded/aHR0cHM6_ea0117b0c9ba4164bcf2c176b69dd5a1.png" alt="在这里插入图片描述"></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">siRNA_feat_builder</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">,</span> anti<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    构建siRNA特征的函数    参数:    s: pd.Series -- 输入的siRNA序列    anti: bool -- 是否构建反义链特征，默认为False    返回:    pd.DataFrame -- 构建的siRNA特征DataFrame    """</span>    name <span class="token operator">=</span> <span class="token string">"anti"</span> <span class="token keyword">if</span> anti <span class="token keyword">else</span> <span class="token string">"sense"</span>  <span class="token comment"># 根据 anti 的值确定特征名称前缀</span>    df <span class="token operator">=</span> s<span class="token punctuation">.</span>to_frame<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将输入的 Series 对象转换为 DataFrame 对象</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_len"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 计算序列长度，并将其作为特征添加到 DataFrame 中</span>    <span class="token comment"># 遍历两个位置：第一个和最后一个</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 遍历碱基：A、U、G、C</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"AUGC"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 判断序列的第一个或最后一个碱基是否与当前碱基相等，并将结果作为特征添加到 DataFrame 中</span>            df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'front'</span> <span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'back'</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>                s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> c            <span class="token punctuation">)</span>    <span class="token comment"># 判断序列是否以特定的模式开头和结尾，并将结果作为特征添加到 DataFrame 中</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_1"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"UU"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_2"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"GA"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"UU"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_3"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"CA"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"UU"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_4"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"UA"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"UU"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_5"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"UU"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"AA"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_6"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"UU"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"GA"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_7"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"UU"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"CA"</span>    <span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_8"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"UU"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>        <span class="token string">"UA"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 判断序列的第二位和倒数第二位是否为 A，并将结果作为特征添加到 DataFrame 中</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_9"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_10"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span>    <span class="token comment"># 计算序列中的 GC 碱基占整体长度的比例，并将结果作为特征添加到 DataFrame 中</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_GC_frac"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>        s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token operator">/</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 返回除第一列外的所有列，即去掉序列本身的列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码小结-1"><a href="#代码小结-1" class="headerlink" title="代码小结"></a>代码小结</h5><ol><li>“feat_siRNA_{name}_seq_len”：siRNA序列的长度作为特征。</li><li>siRNA序列的第一个和最后一个位置，在前端或后端：<ul><li>“feat_siRNA_{name}<em>seq</em>{c}_{‘front’ if pos &#x3D;&#x3D; 0 else ‘back’}”：判断序列的第一个或最后一个碱基是否与’A’, ‘U’, ‘G’, ‘C’相等。</li></ul></li><li>siRNA序列的起始和结束：<ul><li>“feat_siRNA_{name}<em>seq_pattern_1”，…，”feat_siRNA</em>{name}_seq_pattern_8”：判断序列是否以特定的模式开头和结尾。</li></ul></li><li>siRNA序列的第二位和倒数第二位：<ul><li>“feat_siRNA_{name}_seq_pattern_9”：判断序列的第二位是否为’A’。</li><li>“feat_siRNA_{name}_seq_pattern_10”：判断序列的倒数第二位是否为’A’。</li></ul></li><li>“feat_siRNA_{name}_seq_pattern_GC_frac”：计算序列中的GC碱基占整体长度的比例。</li></ol><h2 id="最后选择模型预测"><a href="#最后选择模型预测" class="headerlink" title="最后选择模型预测"></a>最后选择模型预测</h2><blockquote><p>这里是task2给出的lightgbm的代码来对特征值预测 引一份</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> label<span class="token operator">=</span>y_train<span class="token punctuation">)</span>  <span class="token comment"># 创建训练数据集，X_train为特征矩阵，y_train为标签向量</span>test_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> label<span class="token operator">=</span>y_test<span class="token punctuation">,</span> reference<span class="token operator">=</span>train_data<span class="token punctuation">)</span>  <span class="token comment"># 创建测试数据集，并引用训练数据集</span><span class="token keyword">def</span> <span class="token function">print_validation_result</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> env<span class="token punctuation">.</span>evaluation_result_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>env<span class="token punctuation">.</span>iteration<span class="token punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'s </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token comment"># 打印验证结果的回调函数，用于输出每次迭代后的验证结果</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"boosting_type"</span><span class="token punctuation">:</span> <span class="token string">"gbdt"</span><span class="token punctuation">,</span>  <span class="token comment"># 梯度提升树类型，可选"gbdt"、"dart"、"goss"</span>    <span class="token string">"objective"</span><span class="token punctuation">:</span> <span class="token string">"regression"</span><span class="token punctuation">,</span>  <span class="token comment"># 模型优化目标，回归任务一般选择"regression"</span>    <span class="token string">"metric"</span><span class="token punctuation">:</span> <span class="token string">"root_mean_squared_error"</span><span class="token punctuation">,</span>  <span class="token comment"># 评估指标，回归任务一般选择"root_mean_squared_error"（均方根误差）</span>    <span class="token string">"max_depth"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment"># 每棵树的最大深度，控制模型的复杂度</span>    <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> <span class="token number">0.02</span><span class="token punctuation">,</span>  <span class="token comment"># 学习率，控制每个树的贡献</span>    <span class="token string">"verbose"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># 控制训练过程中的输出，设置为非零值可输出训练信息</span><span class="token punctuation">&#125;</span>gbm <span class="token operator">=</span> lgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>    params<span class="token punctuation">,</span>  <span class="token comment"># 参数字典，包含模型训练所需的参数</span>    train_data<span class="token punctuation">,</span>  <span class="token comment"># 训练数据集</span>    num_boost_round<span class="token operator">=</span><span class="token number">15000</span><span class="token punctuation">,</span>  <span class="token comment"># 迭代次数，指定生成的树的数量</span>    valid_sets<span class="token operator">=</span><span class="token punctuation">[</span>test_data<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 用于验证模型的数据集，可以根据需要指定多个</span>    callbacks<span class="token operator">=</span><span class="token punctuation">[</span>print_validation_result<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 在训练过程中执行的回调函数，可用于打印验证结果、保存模型等</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p><img src="/img/downloaded/aHR0cHM6_63cbb25b5cf54def8d7291c17327172b.png" alt="在这里插入图片描述"></p><h3 id="一些常用的LightGBM参数"><a href="#一些常用的LightGBM参数" class="headerlink" title="一些常用的LightGBM参数"></a>一些常用的LightGBM参数</h3><p>LightGBM是一种梯度提升树模型。</p><h4 id="boosting-type"><a href="#boosting-type" class="headerlink" title="boosting_type"></a><code>boosting_type</code></h4><blockquote><p>指定梯度提升树的类型</p></blockquote><p>有<code>gbdt</code>（传统的梯度提升决策树）、<code>dart</code>（dropout加速梯度提升树）和<code>goss</code>（梯度优化送出采样）。</p><h4 id="objective"><a href="#objective" class="headerlink" title="objective"></a><code>objective</code></h4><blockquote><p>指定模型的优化目标，根据任务类型选择合适的目标函数。</p></blockquote><p>回归任务可以使用<code>regression</code>，分类任务可以使用<code>binary</code>或<code>multiclass</code>。</p><h4 id="metric"><a href="#metric" class="headerlink" title="metric"></a><code>metric</code></h4><blockquote><p>指定模型的评估指标，用于衡量模型的性能。</p></blockquote><p>对于回归任务可以使用<code>root_mean_squared_error</code>（均方根误差）。</p><h4 id="max-depth"><a href="#max-depth" class="headerlink" title="max_depth"></a><code>max_depth</code></h4><blockquote><p>每棵树的最大深度，控制模型的复杂度。</p></blockquote><p>较小的值可以防止过拟合，但可能会导致欠拟合。<br><strong>max_depth 一般在 （6，10）</strong></p><h4 id="learning-rate"><a href="#learning-rate" class="headerlink" title="learning_rate"></a><code>learning_rate</code></h4><blockquote><p>学习率控制每个树的贡献。</p></blockquote><p>较小的值会使算法收敛得更慢，但可能会获得更好的精度。</p><h4 id="num-boost-round"><a href="#num-boost-round" class="headerlink" title="num_boost_round"></a><code>num_boost_round</code></h4><blockquote><p>迭代次数，指定生成的树的数量。</p></blockquote><p>较大的值可以提高模型的性能，但也会增加计算时间。</p><h4 id="valid-sets"><a href="#valid-sets" class="headerlink" title="valid_sets"></a><code>valid_sets</code></h4><blockquote><p>用于验证模型的数据集，可以根据需要指定多个。</p></blockquote><p>在训练过程中，模型会根据验证集的性能进行调整。</p><h4 id="callbacks"><a href="#callbacks" class="headerlink" title="callbacks"></a><code>callbacks</code></h4><blockquote><p>在训练过程中执行的回调函数，可以用于打印模型的验证结果、保存模型等。</p></blockquote><blockquote><p>可以通过回调函数自定义返回的东西，如打印测试情况之类的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">callbacks<span class="token operator">=</span><span class="token punctuation">[</span>print_validation_result<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里就是回调时，用了print_validation_result 作为输出<br>输出函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_validation_result</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> env<span class="token punctuation">.</span>evaluation_result_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>env<span class="token punctuation">.</span>iteration<span class="token punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'s </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token comment"># 打印验证结果的回调函数，用于输出每次迭代后的验证结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="num-leaves"><a href="#num-leaves" class="headerlink" title="num_leaves"></a><code>num_leaves</code></h4><blockquote><p>每棵树的叶子节点数，与<code>max_depth</code>参数一起控制模型的复杂度。</p></blockquote><h4 id="min-data-in-leaf"><a href="#min-data-in-leaf" class="headerlink" title="min_data_in_leaf"></a><code>min_data_in_leaf</code></h4><blockquote><p>叶子节点的最小数据量，用于防止模型在小数据集上过拟合。</p></blockquote><h4 id="subsample"><a href="#subsample" class="headerlink" title="subsample"></a><code>subsample</code></h4><blockquote><p>训练时使用的样本比例，可以用于防止过拟合。</p></blockquote><h4 id="verbose"><a href="#verbose" class="headerlink" title="verbose"></a><code>verbose</code></h4><blockquote><p>是否在训练过程中打印详细的信息。</p></blockquote><h4 id="random-state"><a href="#random-state" class="headerlink" title="random_state"></a><code>random_state</code></h4><blockquote><p>随机数生成器的种子，用于确保结果的可复现性。</p></blockquote><h4 id="device-type"><a href="#device-type" class="headerlink" title="device_type"></a><code>device_type</code></h4><blockquote><p>指定训练时使用的设备类型，如CPU或GPU。<br>一般本地训练需要调整</p></blockquote><p><strong>更多参数还是建议自主参考官方文档</strong><br><a href="https://lightgbm.readthedocs.io/en/latest/Parameters.html">Parameters — LightGBM 4.5.0.99 documentation<br>https://lightgbm.readthedocs.io/en/latest/Parameters.htmll</a></p><p>举例一个其他的模型的训练参数<br><img src="/img/downloaded/aHR0cHM6_06551847b64747f9a13ecbcf6c382bf1.png" alt="在这里插入图片描述"></p><p>根据具体任务和数据的特点，可以尝试不同的参数组合来优化模型性能。</p><blockquote><p>tips : 可以构造更多特征，多模型融合，k折 ，调超参等方法涨点</p></blockquote><p>这里给出一个k折的框架</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token comment"># train函数用于训练模型</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>feats<span class="token punctuation">,</span> n_original<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义k折交叉验证</span>    n_splits <span class="token operator">=</span> <span class="token number">10</span>    kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span>n_splits<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>    <span class="token comment"># 开始k折交叉验证</span>    gbms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fold<span class="token punctuation">,</span> <span class="token punctuation">(</span>train_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>        kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span>n_original<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 准备训练集和验证集</span>        X_train<span class="token punctuation">,</span> X_val <span class="token operator">=</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        y_train<span class="token punctuation">,</span> y_val <span class="token operator">=</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        w_train <span class="token operator">=</span> weight_ls<span class="token punctuation">[</span>train_idx<span class="token punctuation">]</span>                <span class="token comment"># 创建LightGBM数据集</span>        train_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> label<span class="token operator">=</span>y_train<span class="token punctuation">,</span> weight<span class="token operator">=</span>w_train<span class="token punctuation">)</span>        val_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_val<span class="token punctuation">,</span> label<span class="token operator">=</span>y_val<span class="token punctuation">,</span> reference<span class="token operator">=</span>train_data<span class="token punctuation">)</span>        boost_round <span class="token operator">=</span> <span class="token number">25000</span>        early_stop_rounds <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>boost_round<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment"># 显示metric</span>        lgb_log <span class="token operator">=</span> lgb<span class="token punctuation">.</span>log_evaluation<span class="token punctuation">(</span>period<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> show_stdv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        lgb_stop <span class="token operator">=</span> lgb<span class="token punctuation">.</span>early_stopping<span class="token punctuation">(</span>stopping_rounds<span class="token operator">=</span>early_stop_rounds<span class="token punctuation">,</span> first_metric_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> min_delta<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>        <span class="token comment"># 设置LightGBM参数</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"boosting_type"</span><span class="token punctuation">:</span> <span class="token string">"gbdt"</span><span class="token punctuation">,</span>            <span class="token string">"objective"</span><span class="token punctuation">:</span> <span class="token string">"regression"</span><span class="token punctuation">,</span>            <span class="token string">"metric"</span><span class="token punctuation">:</span> <span class="token string">"None"</span><span class="token punctuation">,</span>            <span class="token string">"metric"</span><span class="token punctuation">:</span> <span class="token string">"root_mean_squared_error"</span><span class="token punctuation">,</span>            <span class="token string">"max_depth"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string">"num_leaves"</span><span class="token punctuation">:</span> <span class="token number">63</span><span class="token punctuation">,</span>            <span class="token string">"min_data_in_leaf"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">,</span>            <span class="token string">"feature_fraction"</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token string">"lambda_l1"</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>            <span class="token string">"lambda_l2"</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>            <span class="token string">"verbose"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># -1时不输出</span>            <span class="token string">"early_stopping_round"</span><span class="token punctuation">:</span> early_stop_rounds<span class="token punctuation">,</span>            <span class="token string">"num_threads"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        gbm <span class="token operator">=</span> lgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>            params<span class="token punctuation">,</span>            train_data<span class="token punctuation">,</span>            num_boost_round<span class="token operator">=</span>boost_round<span class="token punctuation">,</span>            valid_sets<span class="token operator">=</span><span class="token punctuation">[</span>val_data<span class="token punctuation">]</span><span class="token punctuation">,</span>            feval<span class="token operator">=</span>calculate_metrics<span class="token punctuation">,</span>  <span class="token comment"># 将自定义指标函数作为feval参数传入</span>            callbacks<span class="token operator">=</span><span class="token punctuation">[</span>print_validation_result<span class="token punctuation">,</span> lgb_log<span class="token punctuation">,</span> lgb_stop<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        valid_score <span class="token operator">=</span> gbm<span class="token punctuation">.</span>best_score<span class="token punctuation">[</span><span class="token string">"valid_0"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"custom_score"</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"best_valid_score: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>valid_score<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        gbms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gbm<span class="token punctuation">)</span>    <span class="token keyword">return</span> gbms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分数-1"><a href="#分数-1" class="headerlink" title="分数"></a>分数</h3><blockquote><p>目前还在冲分，后续补上代码</p></blockquote><p><img src="/img/downloaded/aHR0cHM6_6c52070d6004422e81552c1be0f88c66.png" alt="在这里插入图片描述"></p><h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><blockquote><p>特征工程进阶</p></blockquote><h2 id="对task2引入生物知识"><a href="#对task2引入生物知识" class="headerlink" title="对task2引入生物知识"></a>对task2引入生物知识</h2><blockquote><p>引入的长度、GC含量等特征细节刻画</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">siRNA_feat_builder3</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">,</span> anti<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"anti"</span> <span class="token keyword">if</span> anti <span class="token keyword">else</span> <span class="token string">"sense"</span>    df <span class="token operator">=</span> s<span class="token punctuation">.</span>to_frame<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 长度分组</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_len21"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">21</span><span class="token punctuation">)</span>    <span class="token comment"># 省略号标识以此类推构造特征</span>    <span class="token comment"># GC含量</span>    GC_frac <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_GC_in"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>GC_frac <span class="token operator">>=</span> <span class="token number">0.36</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>GC_frac <span class="token operator">&lt;=</span> <span class="token number">0.52</span><span class="token punctuation">)</span>    <span class="token comment"># 局部GC含量</span>    GC_frac1 <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_siRNA_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_GC_in1"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> GC_frac1    <span class="token keyword">return</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码可以看出，新增有长度分组，GC含量和局部GC含量</p></blockquote><h3 id="修饰siRNA构建特征"><a href="#修饰siRNA构建特征" class="headerlink" title="修饰siRNA构建特征"></a>修饰siRNA构建特征</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">siRNA_feat_builder3_mod</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">,</span> anti<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"anti"</span> <span class="token keyword">if</span> anti <span class="token keyword">else</span> <span class="token string">"sense"</span>    df <span class="token operator">=</span> s<span class="token punctuation">.</span>to_frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 修饰RNA的起始、终止位置单元类别</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> voc_ls<span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> voc_ls<span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修饰siRNA序列进行n-gram的词频统计"><a href="#修饰siRNA序列进行n-gram的词频统计" class="headerlink" title="修饰siRNA序列进行n-gram的词频统计"></a>修饰siRNA序列进行n-gram的词频统计</h3><blockquote><p>同时也可对未修饰序列进行相同的操作</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GenomicTokenizer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ngram<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化分词器，设置n-gram长度和步幅</span>        self<span class="token punctuation">.</span>ngram <span class="token operator">=</span> ngram        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride            <span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 字符串变list</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>ngram <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment"># 如果n-gram长度为1，直接将序列转换为字符列表</span>            toks <span class="token operator">=</span> t        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 否则，按照步幅对序列进行n-gram分词</span>            toks <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>self<span class="token punctuation">.</span>ngram<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stride<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>self<span class="token punctuation">.</span>ngram<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>ngram<span class="token punctuation">]</span>                    <span class="token comment"># 如果最后一个分词长度小于n-gram，移除最后一个分词</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>toks<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ngram<span class="token punctuation">:</span>                toks <span class="token operator">=</span> toks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># sub list to str</span>            toks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> toks<span class="token punctuation">]</span>        <span class="token comment"># 返回分词结果</span>        <span class="token keyword">return</span> toks<span class="token keyword">class</span> <span class="token class-name">GenomicVocab</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> itos<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化词汇表，itos是一个词汇表列表</span>        self<span class="token punctuation">.</span>itos <span class="token operator">=</span> itos        <span class="token comment"># 创建从词汇到索引的映射</span>        self<span class="token punctuation">.</span>stoi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>itos<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> max_vocab<span class="token punctuation">,</span> min_freq<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建词汇表类方法</span>        <span class="token comment"># 统计每个token出现的频率</span>        freq <span class="token operator">=</span> Counter<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span>        <span class="token comment"># 选择出现频率大于等于min_freq的token，并且最多保留max_vocab个token</span>        <span class="token comment"># itos = ['&lt;pad>'] + [o for o, c in freq.most_common(max_vocab - 1) if c >= min_freq]</span>        itos <span class="token operator">=</span> <span class="token punctuation">[</span>o <span class="token keyword">for</span> o<span class="token punctuation">,</span> c <span class="token keyword">in</span> freq<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span>max_vocab <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> c <span class="token operator">>=</span> min_freq<span class="token punctuation">]</span>        <span class="token comment"># 返回包含词汇表的类实例</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>itos<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">siRNA_feat_builder_substr</span><span class="token punctuation">(</span>se<span class="token punctuation">,</span> name<span class="token punctuation">,</span> patterns<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建一个空字典来存储特征</span>    features <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> pattern <span class="token keyword">in</span> patterns<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># escaped_pattern = re.escape(pattern)  # 转义模式中的特殊字符</span>            escaped_pattern <span class="token operator">=</span> pattern            features<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"feat_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_seq_pattern_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>escaped_pattern<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>escaped_pattern<span class="token punctuation">)</span>        <span class="token keyword">except</span> re<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Error in pattern </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pattern<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 将字典转换为DataFrame</span>    feature_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>features<span class="token punctuation">)</span>    <span class="token keyword">return</span> feature_df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 处理序列特征</span>seq_features_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>tokenizer1 <span class="token operator">=</span> GenomicTokenizer<span class="token punctuation">(</span>ngram<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1gram</span>tokenizer2 <span class="token operator">=</span> GenomicTokenizer<span class="token punctuation">(</span>ngram<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 2gram</span>tokenizer3 <span class="token operator">=</span> GenomicTokenizer<span class="token punctuation">(</span>ngram<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 3gram</span><span class="token comment"># 子串词频统计，未修饰序列</span>cols_nomod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"siRNA_sense_seq"</span><span class="token punctuation">,</span> <span class="token string">"siRNA_antisense_seq"</span><span class="token punctuation">]</span>all_tokens_nomod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cols_nomod<span class="token punctuation">:</span>    <span class="token keyword">for</span> seq <span class="token keyword">in</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pd<span class="token punctuation">.</span>isna<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#all_tokens_nomod: '</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_tokens_nomod<span class="token punctuation">)</span><span class="token punctuation">)</span>vocab_nomod <span class="token operator">=</span> GenomicVocab<span class="token punctuation">.</span>create<span class="token punctuation">(</span>all_tokens_nomod<span class="token punctuation">,</span> max_vocab<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#vocab_nomod: '</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab_nomod<span class="token punctuation">.</span>itos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cols_nomod<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tokenizer-的工作方式"><a href="#tokenizer-的工作方式" class="headerlink" title="tokenizer 的工作方式"></a><code>tokenizer</code> 的工作方式</h4><p> 这里解释一下通过一个例子来展示不同 <code>tokenizer</code> 的工作方式。<br>我们有一个由碱基组成的基因序列：</p><pre class="line-numbers language-none"><code class="language-none">AGTCATG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们将使用这个序列来演示每个 <code>tokenizer</code> 如何将其分割。</p><h5 id="tokenizer1-ngram-1-stride-1"><a href="#tokenizer1-ngram-1-stride-1" class="headerlink" title="tokenizer1 (ngram&#x3D;1, stride&#x3D;1)"></a><strong><code>tokenizer1</code> (ngram&#x3D;1, stride&#x3D;1)</strong></h5><ul><li>将序列分割成单个碱基的片段，步长为1。</li><li>结果: <code>[&#39;A&#39;, &#39;G&#39;, &#39;T&#39;, &#39;C&#39;, &#39;A&#39;, &#39;T&#39;, &#39;G&#39;]</code></li></ul><h5 id="tokenizer2-ngram-2-stride-2"><a href="#tokenizer2-ngram-2-stride-2" class="headerlink" title="tokenizer2 (ngram&#x3D;2, stride&#x3D;2)"></a><strong><code>tokenizer2</code> (ngram&#x3D;2, stride&#x3D;2)</strong></h5><ul><li>将序列分割成长度为2的片段，步长为2。</li><li>结果: <code>[&#39;AG&#39;, &#39;TG&#39;]</code>（从’A’开始，跳过一个碱基到’G’，然后再次跳过一个碱基到’T’）</li></ul><h5 id="tokenizer3-ngram-3-stride-3"><a href="#tokenizer3-ngram-3-stride-3" class="headerlink" title="tokenizer3 (ngram&#x3D;3, stride&#x3D;3)"></a><strong><code>tokenizer3</code> (ngram&#x3D;3, stride&#x3D;3)</strong></h5><ul><li>将序列分割成长度为3的片段，步长为3。</li><li>结果: <code>[&#39;AGT&#39;]</code>（从’A’开始，跳过两个碱基到’G’）</li></ul><h5 id="tokenizer6-ngram-6-stride-6"><a href="#tokenizer6-ngram-6-stride-6" class="headerlink" title="tokenizer6 (ngram&#x3D;6, stride&#x3D;6)"></a><strong><code>tokenizer6</code> (ngram&#x3D;6, stride&#x3D;6)</strong></h5><ul><li>由于序列长度只有7个碱基，而步长为6，所以这个 <code>tokenizer</code> 只会生成一个长度为6的片段。</li><li>结果: <code>[&#39;AGTCAT&#39;]</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 子串词频统计，修饰序列</span>cols_mod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"modified_siRNA_sense_seq"</span><span class="token punctuation">,</span> <span class="token string">"modified_siRNA_antisense_seq"</span><span class="token punctuation">]</span>cols_mod_ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"modified_siRNA_sense_seq_list"</span><span class="token punctuation">,</span> <span class="token string">"modified_siRNA_antisense_seq_list"</span><span class="token punctuation">]</span>all_tokens_mod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cols_mod_ls<span class="token punctuation">:</span>    <span class="token keyword">for</span> seq_ls <span class="token keyword">in</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pd<span class="token punctuation">.</span>isna<span class="token punctuation">(</span>seq_ls<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token comment"># print('#all_tokens_mod: ', len(all_tokens_mod))</span>vocab_mod <span class="token operator">=</span> GenomicVocab<span class="token punctuation">.</span>create<span class="token punctuation">(</span>all_tokens_mod<span class="token punctuation">,</span> max_vocab<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># print('#vocab_mod: ', len(vocab_mod.itos))</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cols_mod<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="siRNA序列与target序列对比"><a href="#siRNA序列与target序列对比" class="headerlink" title="siRNA序列与target序列对比"></a>siRNA序列与target序列对比</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Bio <span class="token keyword">import</span> pairwise2<span class="token keyword">from</span> Bio<span class="token punctuation">.</span>pairwise2 <span class="token keyword">import</span> format_alignment<span class="token keyword">def</span> <span class="token function">get_feat_align</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> anti<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计算siRNA序列与target序列的比对得分。        参数:    df : DataFrame        包含siRNA和target序列的DataFrame。    anti : bool        是否处理antisense siRNA序列。默认为False，表示处理sense siRNA序列。            返回:    DataFrame        包含原始DataFrame和比对得分的DataFrame。    """</span>    <span class="token comment"># 假设DataFrame有两列，分别为'sirna_sequence'和'target_sequence'</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        siRNA_seq <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'siRNA_sequence'</span><span class="token punctuation">]</span>        target_seq <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'target_sequence'</span><span class="token punctuation">]</span>                <span class="token comment"># 如果是antisense siRNA，需要反转并补录序列</span>        <span class="token keyword">if</span> anti<span class="token punctuation">:</span>            siRNA_seq <span class="token operator">=</span> siRNA_seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">"ATCG"</span><span class="token punctuation">,</span> <span class="token string">"TAGC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 使用pairwise2.align.localxx进行局部序列比对</span>        alignments <span class="token operator">=</span> pairwise2<span class="token punctuation">.</span>align<span class="token punctuation">.</span>localxx<span class="token punctuation">(</span>siRNA_seq<span class="token punctuation">,</span> target_seq<span class="token punctuation">)</span>                <span class="token comment"># 计算比对得分，这里取最高得分的比对</span>        max_score <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> alignment <span class="token keyword">in</span> alignments<span class="token punctuation">:</span>            score <span class="token operator">=</span> alignment<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># alignment[2] 是比对得分</span>            <span class="token keyword">if</span> score <span class="token operator">></span> max_score<span class="token punctuation">:</span>                max_score <span class="token operator">=</span> score                <span class="token comment"># 将得分添加到DataFrame中</span>        df<span class="token punctuation">.</span>at<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">'alignment_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_score        <span class="token keyword">return</span> df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果siRNA是antisense类型 </p><pre><code>result_df = get_feat_align(df, anti=True) </code></pre><p>如果siRNA是sense类型 </p><pre><code>result_df = get_feat_align(df)  </code></pre><h3 id="其他生物特征"><a href="#其他生物特征" class="headerlink" title="其他生物特征"></a>其他生物特征</h3><blockquote><p>有重复<br><img src="/img/downloaded/aHR0cHM6_402e5e90e3a143109122db8f5e3421d5.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_85c2119965214195afa8837198039a3f.png" alt="在这里插入图片描述"><br><img src="/img/downloaded/aHR0cHM6_7194f9935d2e4339921f7ec3b7b08ede.png" alt="在这里插入图片描述"></p></blockquote><h2 id="lgb模型优化"><a href="#lgb模型优化" class="headerlink" title="lgb模型优化"></a>lgb模型优化</h2><h3 id="低Remaining范围样本高权重"><a href="#低Remaining范围样本高权重" class="headerlink" title="低Remaining范围样本高权重"></a>低Remaining范围样本高权重</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">weight_ls <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>feats<span class="token punctuation">[</span><span class="token string">'mRNA_remaining_pct'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token number">2</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">and</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码是将<code>feats</code>中的<code>mRNA_remaining_pct</code>列的值进行一些判断和处理，生成一个新的<code>weight_ls</code>数组。<br>这段代码<strong>根据<code>mRNA_remaining_pct</code>列的值是否在0到30之间，将对应位置上的<code>weight_ls</code>值设置为2或者1。</strong></p><h3 id="使用官方评价指标作为损失函数"><a href="#使用官方评价指标作为损失函数" class="headerlink" title="使用官方评价指标作为损失函数"></a>使用官方评价指标作为损失函数</h3><blockquote><p>由原来的root_mean_squared_error评价指标被替换为更加复杂的官方评价分数</p></blockquote><p>具体公式为:</p><p>$$\text{score} &#x3D; 50% \times \left(1 - \frac{\text{MAE}}{100}\right) + 50% \times F1 \times \left(1 - \frac{\text{Range-MAE}}{100}\right)$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># calculate_metrics函数用于计算评估指标</span><span class="token keyword">def</span> <span class="token function">calculate_metrics</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> data<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> preds    y_true <span class="token operator">=</span> data<span class="token punctuation">.</span>get_label<span class="token punctuation">(</span><span class="token punctuation">)</span>    mae <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y_true <span class="token operator">-</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># if mae &lt; 0: mae = 0</span>    <span class="token comment"># elif mae >100: mae = 100</span>    y_true_binary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y_true <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_true <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    y_pred_binary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y_pred <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_pred <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_pred <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span>    range_mae <span class="token operator">=</span> <span class="token punctuation">(</span>        mean_absolute_error<span class="token punctuation">(</span>y_true<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> y_pred<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">100</span>    <span class="token punctuation">)</span>    <span class="token comment"># if range_mae &lt; 0: range_mae = 0</span>    <span class="token comment"># elif range_mae >100: range_mae = 100</span>    <span class="token comment"># precision = precision_score(y_true_binary, y_pred_binary, average="binary")</span>    <span class="token comment"># recall = recall_score(y_true_binary, y_pred_binary, average="binary")</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y_pred_binary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        precision <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_pred_binary<span class="token punctuation">)</span> <span class="token operator">&amp;</span> y_true_binary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y_pred_binary<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        precision <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y_true_binary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        recall <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_pred_binary<span class="token punctuation">)</span> <span class="token operator">&amp;</span> y_true_binary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y_true_binary<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        recall <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> precision <span class="token operator">+</span> recall <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        f1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        f1 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> precision <span class="token operator">*</span> recall <span class="token operator">/</span> <span class="token punctuation">(</span>precision <span class="token operator">+</span> recall<span class="token punctuation">)</span>    score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> range_mae <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> <span class="token number">0.5</span>    <span class="token keyword">return</span> <span class="token string">"custom_score"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token boolean">True</span>  <span class="token comment"># True表示分数越高越好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自适应学习率"><a href="#自适应学习率" class="headerlink" title="自适应学习率"></a>自适应学习率</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># adaptive_learning_rate函数用于自适应学习率</span><span class="token keyword">def</span> <span class="token function">adaptive_learning_rate</span><span class="token punctuation">(</span>decay_rate<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    best_score <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化为负无穷,因为分数越高越好</span>    wait <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> best_score<span class="token punctuation">,</span> wait        current_score <span class="token operator">=</span> env<span class="token punctuation">.</span>evaluation_result_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 假设使用的是最后一个评估指标</span>        current_lr <span class="token operator">=</span>  env<span class="token punctuation">.</span>model<span class="token punctuation">.</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> current_score <span class="token operator">></span> best_score<span class="token punctuation">:</span>             best_score <span class="token operator">=</span> current_score            <span class="token comment"># wait = 0 # 需要连续的score没有上升</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            wait <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> wait <span class="token operator">>=</span> patience<span class="token punctuation">:</span>            new_lr <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>current_lr<span class="token punctuation">)</span> <span class="token operator">*</span> decay_rate            wait <span class="token operator">=</span> <span class="token number">0</span>            env<span class="token punctuation">.</span>model<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'learning_rate'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_lr            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Learning rate adjusted to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>env<span class="token punctuation">.</span>model<span class="token punctuation">.</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> callback<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多折交叉训练"><a href="#多折交叉训练" class="headerlink" title="多折交叉训练"></a>多折交叉训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># train函数用于训练模型</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>feats<span class="token punctuation">,</span> n_original<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义k折交叉验证</span>    n_splits <span class="token operator">=</span> <span class="token number">10</span>    kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span>n_splits<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>    <span class="token comment"># 开始k折交叉验证</span>    gbms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fold<span class="token punctuation">,</span> <span class="token punctuation">(</span>train_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>        kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span>n_original<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 准备训练集和验证集</span>        X_train<span class="token punctuation">,</span> X_val <span class="token operator">=</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        y_train<span class="token punctuation">,</span> y_val <span class="token operator">=</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feats<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        w_train <span class="token operator">=</span> weight_ls<span class="token punctuation">[</span>train_idx<span class="token punctuation">]</span>                <span class="token comment"># 创建LightGBM数据集</span>        train_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> label<span class="token operator">=</span>y_train<span class="token punctuation">,</span> weight<span class="token operator">=</span>w_train<span class="token punctuation">)</span>        val_data <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_val<span class="token punctuation">,</span> label<span class="token operator">=</span>y_val<span class="token punctuation">,</span> reference<span class="token operator">=</span>train_data<span class="token punctuation">)</span>        boost_round <span class="token operator">=</span> <span class="token number">25000</span>        early_stop_rounds <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>boost_round<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment"># 显示metric</span>        lgb_log <span class="token operator">=</span> lgb<span class="token punctuation">.</span>log_evaluation<span class="token punctuation">(</span>period<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> show_stdv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        lgb_stop <span class="token operator">=</span> lgb<span class="token punctuation">.</span>early_stopping<span class="token punctuation">(</span>stopping_rounds<span class="token operator">=</span>early_stop_rounds<span class="token punctuation">,</span> first_metric_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> min_delta<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>        <span class="token comment"># 设置LightGBM参数</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"boosting_type"</span><span class="token punctuation">:</span> <span class="token string">"gbdt"</span><span class="token punctuation">,</span>            <span class="token string">"objective"</span><span class="token punctuation">:</span> <span class="token string">"regression"</span><span class="token punctuation">,</span>            <span class="token string">"metric"</span><span class="token punctuation">:</span> <span class="token string">"None"</span><span class="token punctuation">,</span>            <span class="token comment"># "metric": "root_mean_squared_error",</span>            <span class="token string">"max_depth"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string">"num_leaves"</span><span class="token punctuation">:</span> <span class="token number">63</span><span class="token punctuation">,</span>            <span class="token string">"min_data_in_leaf"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">,</span>            <span class="token string">"feature_fraction"</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>            <span class="token string">"lambda_l1"</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>            <span class="token string">"lambda_l2"</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>            <span class="token string">"verbose"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># -1时不输出</span>            <span class="token string">"early_stopping_round"</span><span class="token punctuation">:</span> early_stop_rounds<span class="token punctuation">,</span>            <span class="token string">"num_threads"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 在训练时使用自适应学习率回调函数</span>        adaptive_lr <span class="token operator">=</span> adaptive_learning_rate<span class="token punctuation">(</span>decay_rate<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>        gbm <span class="token operator">=</span> lgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>            params<span class="token punctuation">,</span>            train_data<span class="token punctuation">,</span>            num_boost_round<span class="token operator">=</span>boost_round<span class="token punctuation">,</span>            valid_sets<span class="token operator">=</span><span class="token punctuation">[</span>val_data<span class="token punctuation">]</span><span class="token punctuation">,</span>            feval<span class="token operator">=</span>calculate_metrics<span class="token punctuation">,</span>  <span class="token comment"># 将自定义指标函数作为feval参数传入</span>            <span class="token comment"># callbacks=[print_validation_result, adaptive_lr, lgb_log, lgb_stop],</span>            callbacks<span class="token operator">=</span><span class="token punctuation">[</span>adaptive_lr<span class="token punctuation">,</span> lgb_log<span class="token punctuation">,</span> lgb_stop<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        valid_score <span class="token operator">=</span> gbm<span class="token punctuation">.</span>best_score<span class="token punctuation">[</span><span class="token string">"valid_0"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"custom_score"</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"best_valid_score: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>valid_score<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        gbms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gbm<span class="token punctuation">)</span>    <span class="token keyword">return</span> gbms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完成以上操作的分数"><a href="#完成以上操作的分数" class="headerlink" title="完成以上操作的分数"></a>完成以上操作的分数</h3><p><img src="/img/downloaded/aHR0cHM6_9d49d4b4dd414cf0b9c8196182d91ab6.png" alt="在这里插入图片描述"></p><h3 id="超参数优化"><a href="#超参数优化" class="headerlink" title="超参数优化"></a>超参数优化</h3><h4 id="贝叶斯优化-推荐）"><a href="#贝叶斯优化-推荐）" class="headerlink" title="贝叶斯优化(推荐）"></a>贝叶斯优化(推荐）</h4><blockquote><p>您可以使用如optuna这样的库来执行贝叶斯优化超参数, 参考代码如下</p></blockquote><p>伪代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> optuna<span class="token keyword">def</span> <span class="token function">objective</span><span class="token punctuation">(</span>trial<span class="token punctuation">)</span><span class="token punctuation">:</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'max_depth'</span><span class="token punctuation">:</span> trial<span class="token punctuation">.</span>suggest_int<span class="token punctuation">(</span><span class="token string">'max_depth'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> trial<span class="token punctuation">.</span>suggest_loguniform<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">,</span> <span class="token number">1e-3</span><span class="token punctuation">,</span> <span class="token number">1e-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> trial<span class="token punctuation">.</span>suggest_int<span class="token punctuation">(</span><span class="token string">'n_estimators'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'min_child_samples'</span><span class="token punctuation">:</span> trial<span class="token punctuation">.</span>suggest_int<span class="token punctuation">(</span><span class="token string">'min_child_samples'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        model <span class="token operator">=</span> LGBMRegressor<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_val<span class="token punctuation">,</span> y_val<span class="token punctuation">)</span>study <span class="token operator">=</span> optuna<span class="token punctuation">.</span>create_study<span class="token punctuation">(</span>direction<span class="token operator">=</span><span class="token string">'maximize'</span><span class="token punctuation">)</span>study<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>objective<span class="token punctuation">,</span> n_trials<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best trial:'</span><span class="token punctuation">)</span>trial <span class="token operator">=</span> study<span class="token punctuation">.</span>best_trial<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Value: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>trial<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Params: '</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> trial<span class="token punctuation">.</span>params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'    &#123;&#125;: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过贝叶斯优化方法来进行超参数优化。</p><ol><li>拆分数据集为训练集和测试集。 </li><li>定义超参数搜索空间。 </li><li>创建评估函数，训练LGBMClassifier模型，计算准确率。</li><li>使用贝叶斯优化，找出最佳超参数。</li></ol><p><img src="/img/downloaded/aHR0cHM6_9b8549bd50b14edda88219cbd2c99c40.png" alt="在这里插入图片描述"><br>真的跑很久。。。还没跑完</p><h4 id="网格搜索（Grid-Search）"><a href="#网格搜索（Grid-Search）" class="headerlink" title="网格搜索（Grid Search）"></a>网格搜索（Grid Search）</h4><blockquote><p>使用LightGBM</p></blockquote><p><strong>伪代码</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token comment"># 定义超参数搜索空间</span>param_grid <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'num_leaves'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'min_child_samples'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 创建LightGBM分类器</span>estimator <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建GridSearchCV对象</span>grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>estimator<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span><span class="token comment"># 执行网格搜索</span>grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 输出最佳参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best parameters:'</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="随机搜索（Random-Search）"><a href="#随机搜索（Random-Search）" class="headerlink" title="随机搜索（Random Search）"></a>随机搜索（Random Search）</h4><blockquote><p>使用LightGBM</p></blockquote><p><strong>伪代码</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCV<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> randint<span class="token punctuation">,</span> uniform<span class="token comment"># 定义超参数的连续搜索空间</span>param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'max_depth'</span><span class="token punctuation">:</span> randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> uniform<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'num_leaves'</span><span class="token punctuation">:</span> randint<span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'min_child_samples'</span><span class="token punctuation">:</span> randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment"># 创建LightGBM分类器</span>estimator <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建RandomizedSearchCV对象</span>random_search <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>estimator<span class="token punctuation">,</span> param_distributions<span class="token operator">=</span>param_dist<span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span><span class="token comment"># 执行随机搜索</span>random_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 输出最佳参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best parameters:'</span><span class="token punctuation">,</span> random_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><blockquote><p>多模型可以结合使得稳定</p></blockquote><blockquote><p>集成学习就是把多个弱分类器或回归模型组合起来，变成一个强分类器或回归模型，从而提高预测的准确性。</p></blockquote><p>实现集成学习的方式有很多种，比如通过投票决定最终结果、取平均值来预测、或者给每个模型分配不同的权重。集成学习的主要思想是通过多个模型之间的合作，来弥补每个模型的不足，使整体模型的预测能力更强。</p><blockquote><p>常见的集成学习方法:</p><ol><li>Bagging（自助聚合）：通过在原始数据集上进行多次重采样来创建多个子集，分别训练多个模型，最后进行平均或多数投票决策。</li><li>Boosting：训练多个模型，每个模型都尝试纠正前一个模型的错误，通常是序列处理。</li><li>Stacking：训练多个不同的模型，然后再训练一个新的模型来综合这些模型的输出。</li></ol></blockquote><h3 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h3><p>Stacking 是一种集成学习技术，它将多个模型的预测结果作为输入，然后使用另一个模型（通常称为元模型或元分类器）来进行最终的预测。</p><p>举例一个使用Python的 <code>scikit-learn</code> 库实现Stacking：</p><p><strong>伪代码</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token punctuation">,</span> GradientBoostingClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> StackingClassifier<span class="token comment"># 加载数据集</span>iris <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> y <span class="token operator">=</span> iris<span class="token punctuation">.</span>data<span class="token punctuation">,</span> iris<span class="token punctuation">.</span>target<span class="token comment"># 拆分数据集为训练集和测试集</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment"># 定义基模型列表</span>estimators <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'rf'</span><span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'gb'</span><span class="token punctuation">,</span> GradientBoostingClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'svc'</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 添加元模型</span>estimators<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'lr'</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 创建Stacking分类器</span>stacking_clf <span class="token operator">=</span> StackingClassifier<span class="token punctuation">(</span>estimators<span class="token operator">=</span>estimators<span class="token punctuation">,</span> final_estimator<span class="token operator">=</span>LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练Stacking分类器</span>stacking_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 预测测试集</span>y_pred <span class="token operator">=</span> stacking_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment"># 计算准确率</span>accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Test set accuracy: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stacking模型是什么？"><a href="#Stacking模型是什么？" class="headerlink" title="Stacking模型是什么？"></a>Stacking模型是什么？</h4><p>想象一下，你有好几个不同的老师，他们每个人都对同一组学生进行考试评分。Stacking模型就像是一个“超级老师”，它收集这些不同老师给的分数，然后根据这些分数再给出一个最终的评分。</p><h4 id="基模型"><a href="#基模型" class="headerlink" title="基模型"></a>基模型</h4><p>在这个例子里，我们有三个“老师”：</p><ul><li>第一个老师用的是“随机森林”方法来评分。</li><li>第二个老师用的是“梯度提升”方法。</li><li>第三个老师用的是“支持向量机”方法。</li></ul><h4 id="元模型"><a href="#元模型" class="headerlink" title="元模型"></a>元模型</h4><p>然后，我们有一个“超级老师”，也就是我们的元模型，它用的是“逻辑回归”方法来根据前面三个老师的评分给出最终的评分。</p><h4 id="为什么要这么做？"><a href="#为什么要这么做？" class="headerlink" title="为什么要这么做？"></a>为什么要这么做？</h4><ul><li>有时候，不同的老师（模型）对同一组学生（数据）的看法会有所不同。通过综合他们的意见，我们可以得到一个更全面、更准确的评分。</li><li>但是，这也有风险，如果这些老师（模型）都倾向于犯同样的错误，那么“超级老师”也可能跟着犯错。</li></ul><h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><ol><li>我们首先把学生（数据）分成两部分：一部分用来让每个老师单独评分（训练集），另一部分用来测试最终的评分结果（测试集）。</li><li>每个老师都用他们的方法给训练集的学生打分。</li><li>然后，我们把这些分数收集起来，让“超级老师”来根据这些分数给出最终的评分。</li><li>我们用测试集来看看“超级老师”的评分有多准确。</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>支持向量机老师需要一个特别的设置（<code>probability=True</code>），这样它才能给出每个学生可能得到每个分数的概率，这对于“超级老师”来说很重要。</li><li>我们要小心，不要让“超级老师”太复杂，否则它可能会过度拟合，也就是说，它可能只是在模仿训练集中的分数，而不是真正理解学生的能力。</li></ul><p>总的来说，Stacking模型是一种很有趣的方法，可以让我们把不同的模型结合起来，得到更好的预测结果。但是，我们也需要小心，确保它不会变得太复杂，导致在新数据上表现不佳。</p><h3 id="官方给出的lgb举例"><a href="#官方给出的lgb举例" class="headerlink" title="官方给出的lgb举例"></a>官方给出的lgb举例</h3><blockquote><p>假设已有LightGBM、XGBoost和一个简单的神经网络模型，下面是一个使用Stacking方法的Python示例代码：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> StackingRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neural_network <span class="token keyword">import</span> MLPRegressor<span class="token comment"># 假设已有数据集 df</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 特征列</span>y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span>  <span class="token comment"># 目标列</span><span class="token comment"># 划分训练集和测试集</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment"># 定义基模型</span>estimators <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'lgb'</span><span class="token punctuation">,</span> lgb<span class="token punctuation">.</span>LGBMRegressor<span class="token punctuation">(</span>objective<span class="token operator">=</span><span class="token string">'regression'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'xgb'</span><span class="token punctuation">,</span> XGBRegressor<span class="token punctuation">(</span>objective<span class="token operator">=</span><span class="token string">'reg:squarederror'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'mlp'</span><span class="token punctuation">,</span> MLPRegressor<span class="token punctuation">(</span>hidden_layer_sizes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 定义最终的meta-regressor</span>final_estimator <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建Stacking模型</span>stacking_regressor <span class="token operator">=</span> StackingRegressor<span class="token punctuation">(</span>estimators<span class="token operator">=</span>estimators<span class="token punctuation">,</span> final_estimator<span class="token operator">=</span>final_estimator<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 模型训练</span>stacking_regressor<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 模型预测</span>y_pred <span class="token operator">=</span> stacking_regressor<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment"># 评估模型</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Test MSE: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mse<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 看每个单独模型的性能</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> est <span class="token keyword">in</span> stacking_regressor<span class="token punctuation">.</span>named_estimators_<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred_individual <span class="token operator">=</span> est<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    mse_individual <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_individual<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> Test MSE: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mse_individual<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="混合学习"><a href="#混合学习" class="headerlink" title="混合学习"></a>混合学习</h3><p>在解决复杂的生物信息学问题时，机器学习和深度学习的混合方法可以提供强大的工具。<br>这种方法包括两个主要部分：使用深度学习模型进行特征提取，然后使用传统的机器学习模型进行最终的决策。可以使用PyTorch构建深度学习部分，然后将输出特征传递给LightGBM进行分类或回归。这种混合方法结合了深度学习的特征学习能力和传统机器学习模型的效率与解释性，可以在生物信息学问题中提供强大的解决方案。</p><h4 id="构建PyTorch模型"><a href="#构建PyTorch模型" class="headerlink" title="构建PyTorch模型"></a>构建PyTorch模型</h4><p>首先，我们定义一个简单的卷积神经网络（CNN）来处理序列数据。这个模型将用于提取有用的特征。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> TensorDataset<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">class</span> <span class="token class-name">RegressionCNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sequence_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RegressionCNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv1d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool1d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>flatten <span class="token operator">=</span> nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sequence_length <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># Adjust size accordingly</span>        self<span class="token punctuation">.</span>regressor <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>regressor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 假设df是包含序列和目标值的DataFrame</span>sequence_length <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># 假定每个序列的长度</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> seq <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">'sequence'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> sequence_length<span class="token punctuation">)</span>y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token comment"># 划分数据集</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 创建DataLoader</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 模型和优化器</span>model <span class="token operator">=</span> RegressionCNN<span class="token punctuation">(</span>sequence_length<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 训练模型</span><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 提取特征</span><span class="token keyword">def</span> <span class="token function">extract_features</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> loader<span class="token punctuation">:</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            features<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>output<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            labels<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>target<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>train_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">)</span>X_train_features<span class="token punctuation">,</span> y_train <span class="token operator">=</span> extract_features<span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">)</span>X_test_features<span class="token punctuation">,</span> y_test <span class="token operator">=</span> extract_features<span class="token punctuation">(</span>model<span class="token punctuation">,</span> test_loader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用LightGBM进行回归"><a href="#使用LightGBM进行回归" class="headerlink" title="使用LightGBM进行回归"></a>使用LightGBM进行回归</h4><p>在获取特征后，我们可以使用LightGBM进行回归预测。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用LightGBM进行最终的预测</span>lgb_regressor <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>lgb_regressor<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_features<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 预测和评估</span>y_pred <span class="token operator">=</span> lgb_regressor<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_features<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Test MSE: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mse<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><ul><li>集成额外的生物信息学数据库来增强特征。</li><li>实施自动化特征选择流程以减少模型复杂性和过拟合。</li><li>尝试动态调整学习率，如学习率预热和循环学习率。</li><li>考虑多目标优化，同时优化不同评价指标或设计更全面的评价函数。</li><li>生物学角度新特征</li></ul><h3 id="新模型构建"><a href="#新模型构建" class="headerlink" title="新模型构建"></a>新模型构建</h3><ul><li>使用attention机制进行end2end的建模，将siRNA序列和target gene序列进行拼接，并捕捉它们之间的相关模式。</li><li>利用现有的生物序列基础模型，生成siRNA和target gene序列的表征向量，并将其输入模型以提高预测效果。</li></ul><h3 id="外部数据集（官方未禁用）"><a href="#外部数据集（官方未禁用）" class="headerlink" title="外部数据集（官方未禁用）"></a>外部数据集（官方未禁用）</h3><h3 id="笔记发布前最新成绩"><a href="#笔记发布前最新成绩" class="headerlink" title="笔记发布前最新成绩"></a>笔记发布前最新成绩</h3><p><img src="/img/downloaded/aHR0cHM6_83ccd8a65a3f431cbbb97b21f3bd31a7.png" alt="在这里插入图片描述"></p><h2 id="引用文档"><a href="#引用文档" class="headerlink" title="引用文档"></a>引用文档</h2><blockquote><p>siRNA和shRNA:通过基因沉默抑制蛋白表达的工具<br><a href="http://www.labome.cn/method/siRNAs-and-shRNAs-Tools-for-Protein-Knockdown-by-Gene-Silencing.html">http://www.labome.cn/method/siRNAs-and-shRNAs-Tools-for-Protein-Knockdown-by-Gene-Silencing.html</a><br>Datawhale<br><a href="https://linklearner.com/activity/12/4/16">https://linklearner.com/activity/12/4/16</a><br>Datawhale<br><a href="https://linklearner.com/activity/12/4/11">https://linklearner.com/activity/12/4/11</a><br>Datawhale<br><a href="https://linklearner.com/activity/12/4/5">https://linklearner.com/activity/12/4/5</a><br>Datawhale<br><a href="https://linklearner.com/activity/12/4/4">https://linklearner.com/activity/12/4/4</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> AI4Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI4Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构部分</title>
      <link href="/2025/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%83%A8%E5%88%86/"/>
      <url>/2025/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构部分"><a href="#数据结构部分" class="headerlink" title="数据结构部分"></a>数据结构部分</h1><h2 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h2><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h3><ul><li>定义：连续内存空间存储同类型数据</li><li>特点：随机访问，固定大小</li><li>操作：插入、删除、查找、遍历、排序</li></ul><h3 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表(Linked List)"></a>链表(Linked List)</h3><ul><li>单向链表：每个节点存储数据和后继指针</li><li>双向链表：每个节点存储数据和前驱、后继指针</li><li>循环链表：尾节点指向头节点</li><li>操作：插入、删除、查找、遍历、排序</li></ul><h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h3><ul><li>定义：后进先出(LIFO)的线性表</li><li>操作：压栈(push)、出栈(pop)、获取栈顶(top)</li><li>应用：函数调用、表达式求值、括号匹配</li></ul><h3 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h3><ul><li>定义：先进先出(FIFO)的线性表</li><li>类型：普通队列、循环队列、双端队列</li><li>操作：入队(enqueue)、出队(dequeue)</li><li>应用：任务调度、缓冲区管理</li></ul><h2 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h2><h3 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树(Tree)"></a>树(Tree)</h3><h4 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h4><ul><li>完全二叉树</li><li>满二叉树</li><li>遍历：前序、中序、后序、层序</li></ul><h4 id="二叉搜索树-BST"><a href="#二叉搜索树-BST" class="headerlink" title="二叉搜索树(BST)"></a>二叉搜索树(BST)</h4><ul><li>定义：左子树小于根节点，右子树大于根节点</li><li>操作：插入、删除、查找</li><li>平均时间复杂度：O(log n)</li></ul><h4 id="平衡二叉树-AVL-Tree"><a href="#平衡二叉树-AVL-Tree" class="headerlink" title="平衡二叉树(AVL Tree)"></a>平衡二叉树(AVL Tree)</h4><ul><li>定义：任意节点的左右子树高度差不超过1</li><li>操作：左旋、右旋、插入、删除</li></ul><h4 id="红黑树-Red-Black-Tree"><a href="#红黑树-Red-Black-Tree" class="headerlink" title="红黑树(Red-Black Tree)"></a>红黑树(Red-Black Tree)</h4><ul><li>特点：自平衡的二叉搜索树</li><li>性质：根黑、叶黑、红子黑、黑高相等</li><li>应用：STL容器实现</li></ul><h4 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树(Trie)"></a>字典树(Trie)</h4><ul><li>特点：用于存储和检索字符串</li><li>应用：前缀匹配、自动补全</li></ul><h4 id="哈夫曼树-Huffman-Tree"><a href="#哈夫曼树-Huffman-Tree" class="headerlink" title="哈夫曼树(Huffman Tree)"></a>哈夫曼树(Huffman Tree)</h4><ul><li>特点：带权路径长度最小的二叉树</li><li>应用：数据压缩</li></ul><h3 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图(Graph)"></a>图(Graph)</h3><ul><li>表示：邻接矩阵、邻接表</li><li>类型：有向图、无向图、带权图</li><li>遍历：深度优先(DFS)、广度优先(BFS)</li><li>算法：最短路径、最小生成树</li></ul><h3 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆(Heap)"></a>堆(Heap)</h3><ul><li>类型：最大堆、最小堆</li><li>特点：完全二叉树</li><li>操作：插入、删除最值、建堆</li><li>应用：优先队列、堆排序</li></ul><h3 id="哈希表-Hash-Table"><a href="#哈希表-Hash-Table" class="headerlink" title="哈希表(Hash Table)"></a>哈希表(Hash Table)</h3><ul><li>定义：通过哈希函数将键映射到数组</li><li>冲突解决：链地址法、开放地址法</li><li>应用：快速查找、缓存系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与编程</title>
      <link href="/2025/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>今天是2023年3月10日，我是一名软件专业的学生，正在学习数据结构与算法。<br>数据结构是计算机科学中非常重要的一个分支，它研究的是数据的组织和存储方式，以及如何对数据进行操作和访问。算法是计算机科学中非常重要的一个分支，它研究的是如何解决问题的方法和步骤。<br>目前的学习目标是：蓝桥杯国奖</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/10/hello-world/"/>
      <url>/2025/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何创建GitHub个人网站</title>
      <link href="/2025/03/09/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAGitHub%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2025/03/09/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAGitHub%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="如何创建GitHub个人网站"><a href="#如何创建GitHub个人网站" class="headerlink" title="如何创建GitHub个人网站"></a>如何创建GitHub个人网站</h1><p>本文将详细介绍如何从零开始搭建一个基于GitHub Pages的个人网站，包括环境配置、仓库创建、Hexo框架安装以及主题配置等全过程。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始之前，请确保你的电脑已经安装以下工具：</p><ul><li><a href="https://nodejs.org/">Node.js</a> (建议选择LTS版本)</li><li><a href="https://git-scm.com/">Git</a></li></ul><h2 id="1-配置SSH密钥"><a href="#1-配置SSH密钥" class="headerlink" title="1. 配置SSH密钥"></a>1. 配置SSH密钥</h2><ol><li>生成SSH密钥：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看公钥内容：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub  <span class="token comment"># Windows系统使用: type C:\Users\用户名\.ssh\id_rsa.pub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>复制公钥内容，前往GitHub设置页面：</p><ul><li>访问 <a href="https://github.com/settings/keys">GitHub SSH设置</a></li><li>点击 “New SSH key”</li><li>填写标题（如：My PC）</li><li>粘贴公钥内容</li><li>点击 “Add SSH key”</li></ul></li><li><p>测试SSH连接：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-创建GitHub-Pages仓库"><a href="#2-创建GitHub-Pages仓库" class="headerlink" title="2. 创建GitHub Pages仓库"></a>2. 创建GitHub Pages仓库</h2><ol><li>登录GitHub，点击右上角 “+” 号，选择 “New repository”</li><li>仓库名称必须为：<code>你的用户名.github.io</code></li><li>选择 “Public”</li><li>点击 “Create repository”</li></ol><h2 id="3-安装Hexo框架"><a href="#3-安装Hexo框架" class="headerlink" title="3. 安装Hexo框架"></a>3. 安装Hexo框架</h2><ol><li>全局安装Hexo-CLI：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建博客项目：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装必要插件：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pug hexo-renderer-stylus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-配置Hexo"><a href="#4-配置Hexo" class="headerlink" title="4. 配置Hexo"></a>4. 配置Hexo</h2><ol><li>编辑根目录下的 <code>_config.yml</code>，修改以下配置：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 你的网站标题<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 副标题<span class="token key atrule">description</span><span class="token punctuation">:</span> 网站描述<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 关键词<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者名<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai<span class="token comment"># URL</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//你的用户名.github.io<span class="token comment"># Deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>你的用户名/你的用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-安装Butterfly主题"><a href="#5-安装Butterfly主题" class="headerlink" title="5. 安装Butterfly主题"></a>5. 安装Butterfly主题</h2><ol><li>下载主题：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改Hexo配置文件 <code>_config.yml</code>：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>创建主题配置文件：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在博客根目录创建文件：_config.butterfly.yml</span><span class="token comment"># 从主题目录复制配置</span><span class="token function">cp</span> themes/butterfly/_config.yml _config.butterfly.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-创建GitHub-Actions自动部署"><a href="#6-创建GitHub-Actions自动部署" class="headerlink" title="6. 创建GitHub Actions自动部署"></a>6. 创建GitHub Actions自动部署</h2><ol><li>在博客根目录创建 <code>.github/workflows/deploy.yml</code>：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'16'</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-本地预览与部署"><a href="#7-本地预览与部署" class="headerlink" title="7. 本地预览与部署"></a>7. 本地预览与部署</h2><ol><li>本地预览：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment"># 清除缓存</span>hexo server  <span class="token comment"># 启动本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 <code>http://localhost:4000</code> 预览效果</p><ol start="2"><li>部署到GitHub：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment"># 清除缓存</span>hexo deploy  <span class="token comment"># 部署到GitHub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-自定义域名（可选）"><a href="#8-自定义域名（可选）" class="headerlink" title="8. 自定义域名（可选）"></a>8. 自定义域名（可选）</h2><ol><li><p>在你的域名服务商处添加DNS记录：</p><ul><li>类型：CNAME</li><li>主机记录：www 或 @</li><li>记录值：你的用户名.github.io</li></ul></li><li><p>在博客的source目录下创建CNAME文件：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"你的域名"</span> <span class="token operator">></span> source/CNAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p>部署失败：</p><ul><li>检查SSH配置是否正确</li><li>确认仓库名称格式是否正确</li><li>验证GitHub Actions配置文件语法</li></ul></li><li><p>主题显示异常：</p><ul><li>检查主题依赖是否安装完整</li><li>确认配置文件格式是否正确</li><li>清除缓存后重新生成</li></ul></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，你的GitHub个人网站就搭建完成了。你可以通过 <code>https://你的用户名.github.io</code> 访问你的网站。接下来，你可以：</p><ul><li>开始写作你的第一篇博客</li><li>自定义主题样式</li><li>添加更多功能插件</li><li>优化网站性能</li></ul><p>记得经常备份你的博客源文件，建议创建一个单独的仓库来存储。</p><p>祝你使用愉快！</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库核心知识点详解</title>
      <link href="/2024/12/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/12/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库核心知识点详解"><a href="#数据库核心知识点详解" class="headerlink" title="数据库核心知识点详解"></a>数据库核心知识点详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库是现代应用系统的核心组件，掌握数据库原理和优化技术对于构建高性能、高可用的系统至关重要。本文将系统梳理数据库核心知识点，包括SQL语法、索引机制、事务管理、数据库优化、Redis应用、分库分表等，结合典型面试题型进行深入解析。</p><h2 id="第一章：SQL语法精讲"><a href="#第一章：SQL语法精讲" class="headerlink" title="第一章：SQL语法精讲"></a>第一章：SQL语法精讲</h2><h3 id="1-1-SQL基础语法"><a href="#1-1-SQL基础语法" class="headerlink" title="1.1 SQL基础语法"></a>1.1 SQL基础语法</h3><h4 id="1-1-1-数据定义语言-DDL"><a href="#1-1-1-数据定义语言-DDL" class="headerlink" title="1.1.1 数据定义语言(DDL)"></a>1.1.1 数据定义语言(DDL)</h4><p><strong>创建数据库和表：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> ecommerce <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">DEFAULT</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span><span class="token comment">-- 使用数据库</span><span class="token keyword">USE</span> ecommerce<span class="token punctuation">;</span><span class="token comment">-- 创建用户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>    phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">TINYINT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态：1正常，0禁用'</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_username <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_email <span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_status <span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户表'</span><span class="token punctuation">;</span><span class="token comment">-- 创建订单表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单ID'</span><span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>    order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单号'</span><span class="token punctuation">,</span>    amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单金额'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'PENDING'</span><span class="token punctuation">,</span> <span class="token string">'PAID'</span><span class="token punctuation">,</span> <span class="token string">'SHIPPED'</span><span class="token punctuation">,</span> <span class="token string">'COMPLETED'</span><span class="token punctuation">,</span> <span class="token string">'CANCELLED'</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'PENDING'</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态'</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_user_id <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_order_no <span class="token punctuation">(</span>order_no<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_status <span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_created_at <span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> users<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'订单表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-数据操作语言-DML"><a href="#1-1-2-数据操作语言-DML" class="headerlink" title="1.1.2 数据操作语言(DML)"></a>1.1.2 数据操作语言(DML)</h4><p><strong>插入数据：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 批量插入用户</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> phone<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'alice@example.com'</span><span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'password123'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'13800138001'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'bob@example.com'</span><span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'password456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'13800138002'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'charlie'</span><span class="token punctuation">,</span> <span class="token string">'charlie@example.com'</span><span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'password789'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'13800138003'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入订单</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> order_no<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'202412190001'</span><span class="token punctuation">,</span> <span class="token number">299.99</span><span class="token punctuation">,</span> <span class="token string">'PAID'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'202412190002'</span><span class="token punctuation">,</span> <span class="token number">199.50</span><span class="token punctuation">,</span> <span class="token string">'PENDING'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'202412190003'</span><span class="token punctuation">,</span> <span class="token number">599.99</span><span class="token punctuation">,</span> <span class="token string">'SHIPPED'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查询数据：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 基础查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 条件查询</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> created_at <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> created_at <span class="token operator">>=</span> <span class="token string">'2024-01-01'</span>   <span class="token operator">AND</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">DESC</span><span class="token keyword">LIMIT</span> <span class="token number">20</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 连接查询</span><span class="token keyword">SELECT</span>     u<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    u<span class="token punctuation">.</span>email<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>order_no<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>    o<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>    o<span class="token punctuation">.</span>created_at <span class="token keyword">AS</span> order_time<span class="token keyword">FROM</span> users u<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>amount <span class="token operator">></span> <span class="token number">100</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>created_at <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> user_id     <span class="token keyword">FROM</span> orders     <span class="token keyword">WHERE</span> amount <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更新和删除：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 更新用户信息</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> phone <span class="token operator">=</span> <span class="token string">'13900139001'</span><span class="token punctuation">,</span> updated_at <span class="token operator">=</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span><span class="token punctuation">;</span><span class="token comment">-- 批量更新订单状态</span><span class="token keyword">UPDATE</span> orders <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'COMPLETED'</span><span class="token punctuation">,</span> updated_at <span class="token operator">=</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'SHIPPED'</span>   <span class="token operator">AND</span> updated_at <span class="token operator">&lt;=</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">7</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除用户（谨慎使用）</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> updated_at <span class="token operator">&lt;=</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">30</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-高级SQL查询"><a href="#1-2-高级SQL查询" class="headerlink" title="1.2 高级SQL查询"></a>1.2 高级SQL查询</h3><h4 id="1-2-1-聚合函数和分组"><a href="#1-2-1-聚合函数和分组" class="headerlink" title="1.2.1 聚合函数和分组"></a>1.2.1 聚合函数和分组</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 统计用户注册数量</span><span class="token keyword">SELECT</span>     <span class="token keyword">DATE</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span> <span class="token keyword">AS</span> register_date<span class="token punctuation">,</span>    <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> user_count<span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> created_at <span class="token operator">>=</span> <span class="token string">'2024-01-01'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> register_date <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 订单金额统计</span><span class="token keyword">SELECT</span>     u<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    <span class="token function">COUNT</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> order_count<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_amount<span class="token punctuation">,</span>    <span class="token function">AVG</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_amount<span class="token punctuation">,</span>    <span class="token function">MAX</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_amount<span class="token punctuation">,</span>    <span class="token function">MIN</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_amount<span class="token keyword">FROM</span> users u<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orders o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>username<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total_amount <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-窗口函数"><a href="#1-2-2-窗口函数" class="headerlink" title="1.2.2 窗口函数"></a>1.2.2 窗口函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 用户订单排名</span><span class="token keyword">SELECT</span>     u<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>order_no<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>    RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>amount <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> user_rank<span class="token punctuation">,</span>    DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>amount <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> global_rank<span class="token punctuation">,</span>    LAG<span class="token punctuation">(</span>o<span class="token punctuation">.</span>amount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span> <span class="token keyword">AS</span> prev_amount<span class="token keyword">FROM</span> users u<span class="token keyword">JOIN</span> orders o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span><span class="token comment">-- 累计订单金额</span><span class="token keyword">SELECT</span>     user_id<span class="token punctuation">,</span>    order_no<span class="token punctuation">,</span>    amount<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> user_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at<span class="token punctuation">)</span> <span class="token keyword">AS</span> cumulative_amount<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_cumulative<span class="token keyword">FROM</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-递归查询"><a href="#1-2-3-递归查询" class="headerlink" title="1.2.3 递归查询"></a>1.2.3 递归查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 假设有部门表，查询部门层级</span><span class="token keyword">WITH</span> RECURSIVE dept_hierarchy <span class="token keyword">AS</span> <span class="token punctuation">(</span>    <span class="token comment">-- 基础查询：顶级部门</span>    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> parent_id<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">AS</span> <span class="token keyword">level</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span>name <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> path    <span class="token keyword">FROM</span> departments    <span class="token keyword">WHERE</span> parent_id <span class="token operator">IS</span> <span class="token boolean">NULL</span>        <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>        <span class="token comment">-- 递归查询：子部门</span>    <span class="token keyword">SELECT</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> dh<span class="token punctuation">.</span><span class="token keyword">level</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span>dh<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">' > '</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> departments d    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept_hierarchy dh <span class="token keyword">ON</span> d<span class="token punctuation">.</span>parent_id <span class="token operator">=</span> dh<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept_hierarchy<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> path<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二章：索引机制深度解析"><a href="#第二章：索引机制深度解析" class="headerlink" title="第二章：索引机制深度解析"></a>第二章：索引机制深度解析</h2><h3 id="2-1-索引基础概念"><a href="#2-1-索引基础概念" class="headerlink" title="2.1 索引基础概念"></a>2.1 索引基础概念</h3><h4 id="2-1-1-索引类型"><a href="#2-1-1-索引类型" class="headerlink" title="2.1.1 索引类型"></a>2.1.1 索引类型</h4><table><thead><tr><th>索引类型</th><th>描述</th><th>适用场景</th></tr></thead><tbody><tr><td>普通索引</td><td>最基本的索引类型</td><td>提高查询效率</td></tr><tr><td>唯一索引</td><td>索引列的值必须唯一</td><td>用户名、邮箱等</td></tr><tr><td>主键索引</td><td>特殊的唯一索引</td><td>表的主键</td></tr><tr><td>组合索引</td><td>多个列组成的索引</td><td>多条件查询</td></tr><tr><td>全文索引</td><td>用于全文搜索</td><td>文本搜索</td></tr><tr><td>空间索引</td><td>用于地理空间数据</td><td>GIS应用</td></tr></tbody></table><h3 id="2-2-B树与B-树详解"><a href="#2-2-B树与B-树详解" class="headerlink" title="2.2 B树与B+树详解"></a>2.2 B树与B+树详解</h3><h4 id="2-2-1-B树结构"><a href="#2-2-1-B树结构" class="headerlink" title="2.2.1 B树结构"></a>2.2.1 B树结构</h4><p><strong>B树特点：</strong></p><ul><li>多路平衡查找树</li><li>每个节点包含键值和指向数据的指针</li><li>所有节点都存储数据</li><li>查询效率不稳定（可能在非叶子节点找到数据）</li></ul><pre class="line-numbers language-none"><code class="language-none">       [15, 30]      &#x2F;    |    \  [5,10] [20,25] [35,40]  &#x2F;  |   |   |   |   |1  5  10 15 20 25 30 35 40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-B-树结构"><a href="#2-2-2-B-树结构" class="headerlink" title="2.2.2 B+树结构"></a>2.2.2 B+树结构</h4><p><strong>B+树特点：</strong></p><ul><li>B树的变种，所有数据存储在叶子节点</li><li>非叶子节点只存储键值，不存储数据</li><li>叶子节点通过指针连接，形成有序链表</li><li>查询效率稳定（必须到叶子节点）</li><li>更适合范围查询和磁盘存储</li></ul><pre class="line-numbers language-none"><code class="language-none">        [15, 30]       &#x2F;    |    \   [5,10] [20,25] [35,40]   &#x2F;  |   |   |   |   \[1,5,10,15,20,25,30,35,40] → 有序链表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-B树-vs-B-树对比"><a href="#2-2-3-B树-vs-B-树对比" class="headerlink" title="2.2.3 B树 vs B+树对比"></a>2.2.3 B树 vs B+树对比</h4><table><thead><tr><th>特性</th><th>B树</th><th>B+树</th></tr></thead><tbody><tr><td>数据存储</td><td>所有节点</td><td>仅叶子节点</td></tr><tr><td>查询效率</td><td>不稳定</td><td>稳定</td></tr><tr><td>范围查询</td><td>需要中序遍历</td><td>叶子节点链表</td></tr><tr><td>磁盘IO</td><td>较多</td><td>较少</td></tr><tr><td>节点大小</td><td>较小</td><td>较大（存储更多键）</td></tr></tbody></table><h3 id="2-3-MySQL索引实现"><a href="#2-3-MySQL索引实现" class="headerlink" title="2.3 MySQL索引实现"></a>2.3 MySQL索引实现</h3><h4 id="2-3-1-InnoDB索引结构"><a href="#2-3-1-InnoDB索引结构" class="headerlink" title="2.3.1 InnoDB索引结构"></a>2.3.1 InnoDB索引结构</h4><p><strong>聚簇索引（Clustered Index）：</strong></p><ul><li>数据行和主键一起存储</li><li>每个表只能有一个聚簇索引</li><li>主键查询性能极高</li><li>二级索引需要回表查询</li></ul><p><strong>二级索引（Secondary Index）：</strong></p><ul><li>存储主键值和索引列值</li><li>查询时需要回表获取完整数据</li><li>可以创建多个二级索引</li></ul><h4 id="2-3-2-索引创建和优化"><a href="#2-3-2-索引创建和优化" class="headerlink" title="2.3.2 索引创建和优化"></a>2.3.2 索引创建和优化</h4><p><strong>创建索引：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_username <span class="token keyword">ON</span> users<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建唯一索引</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_email <span class="token keyword">ON</span> users<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建组合索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_status <span class="token keyword">ON</span> users<span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">,</span> created_at<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建前缀索引（适用于长文本）</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_content_prefix <span class="token keyword">ON</span> articles<span class="token punctuation">(</span>content<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建函数索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_created_date <span class="token keyword">ON</span> users<span class="token punctuation">(</span><span class="token keyword">DATE</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看索引使用情况：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看表的索引</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span><span class="token comment">-- 分析查询执行计划</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span><span class="token punctuation">;</span><span class="token comment">-- 查看更详细的执行计划</span><span class="token keyword">EXPLAIN</span> FORMAT<span class="token operator">=</span>JSON <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-索引优化策略"><a href="#2-4-索引优化策略" class="headerlink" title="2.4 索引优化策略"></a>2.4 索引优化策略</h3><h4 id="2-4-1-索引设计原则"><a href="#2-4-1-索引设计原则" class="headerlink" title="2.4.1 索引设计原则"></a>2.4.1 索引设计原则</h4><p><strong>最左前缀原则：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 组合索引 (a, b, c) 可以用于以下查询：</span><span class="token comment">-- WHERE a = ?</span><span class="token comment">-- WHERE a = ? AND b = ?</span><span class="token comment">-- WHERE a = ? AND b = ? AND c = ?</span><span class="token comment">-- 但不能用于：WHERE b = ? 或 WHERE c = ?</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_a_b_c <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 有效查询</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 无效查询（不会使用索引）</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>覆盖索引：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询只需要索引列，不需要回表</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_username_email <span class="token keyword">ON</span> users<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 覆盖索引查询</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> email <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span><span class="token punctuation">;</span><span class="token comment">-- Extra: Using index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-索引失效场景"><a href="#2-4-2-索引失效场景" class="headerlink" title="2.4.2 索引失效场景"></a>2.4.2 索引失效场景</h4><p><strong>常见索引失效情况：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1. 使用函数或表达式</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'2024-01-01'</span><span class="token punctuation">;</span><span class="token comment">-- 解决方案：使用范围查询</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> created_at <span class="token operator">>=</span> <span class="token string">'2024-01-01'</span> <span class="token operator">AND</span> created_at <span class="token operator">&lt;</span> <span class="token string">'2024-01-02'</span><span class="token punctuation">;</span><span class="token comment">-- 2. 使用LIKE通配符在前</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">LIKE</span> <span class="token string">'%alice'</span><span class="token punctuation">;</span><span class="token comment">-- 解决方案：通配符在后或使用全文索引</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">LIKE</span> <span class="token string">'alice%'</span><span class="token punctuation">;</span><span class="token comment">-- 3. 数据类型不匹配</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> phone <span class="token operator">=</span> <span class="token number">13800138001</span><span class="token punctuation">;</span><span class="token comment">-- 解决方案：保持数据类型一致</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> phone <span class="token operator">=</span> <span class="token string">'13800138001'</span><span class="token punctuation">;</span><span class="token comment">-- 4. OR条件过多</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span> <span class="token operator">OR</span> email <span class="token operator">=</span> <span class="token string">'alice@example.com'</span> <span class="token operator">OR</span> phone <span class="token operator">=</span> <span class="token string">'13800138001'</span><span class="token punctuation">;</span><span class="token comment">-- 解决方案：使用UNION ALL</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'alice'</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> email <span class="token operator">=</span> <span class="token string">'alice@example.com'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三章：事务管理与并发控制"><a href="#第三章：事务管理与并发控制" class="headerlink" title="第三章：事务管理与并发控制"></a>第三章：事务管理与并发控制</h2><h3 id="3-1-事务ACID特性"><a href="#3-1-事务ACID特性" class="headerlink" title="3.1 事务ACID特性"></a>3.1 事务ACID特性</h3><h4 id="3-1-1-原子性（Atomicity）"><a href="#3-1-1-原子性（Atomicity）" class="headerlink" title="3.1.1 原子性（Atomicity）"></a>3.1.1 原子性（Atomicity）</h4><p><strong>事务的原子性保证：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 转账操作：从A账户扣款，向B账户加款</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 如果任何一步失败，整个事务回滚</span><span class="token comment">-- 模拟错误：账户余额不足</span><span class="token comment">-- UPDATE accounts SET balance = balance - 1000 WHERE id = 1; -- 会失败</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- 或 ROLLBACK;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MySQL事务日志：</strong></p><ul><li><strong>redo log</strong>：保证事务的持久性</li><li><strong>undo log</strong>：保证事务的原子性</li><li><strong>binlog</strong>：用于主从复制</li></ul><h4 id="3-1-2-一致性（Consistency）"><a href="#3-1-2-一致性（Consistency）" class="headerlink" title="3.1.2 一致性（Consistency）"></a>3.1.2 一致性（Consistency）</h4><p><strong>数据一致性约束：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 外键约束保证数据一致性</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> users<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 检查约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> accounts <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> chk_balance <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>balance <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 触发器保证业务一致性</span><span class="token keyword">DELIMITER</span> <span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> update_user_order_count<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> orders<span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span>    <span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> order_count <span class="token operator">=</span> order_count <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> NEW<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-隔离性（Isolation）"><a href="#3-1-3-隔离性（Isolation）" class="headerlink" title="3.1.3 隔离性（Isolation）"></a>3.1.3 隔离性（Isolation）</h4><h3 id="3-2-事务隔离级别"><a href="#3-2-事务隔离级别" class="headerlink" title="3.2 事务隔离级别"></a>3.2 事务隔离级别</h3><h4 id="3-2-1-四种隔离级别"><a href="#3-2-1-四种隔离级别" class="headerlink" title="3.2.1 四种隔离级别"></a>3.2.1 四种隔离级别</h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>并发性能</th></tr></thead><tbody><tr><td>读未提交</td><td>√</td><td>√</td><td>√</td><td>最高</td></tr><tr><td>读已提交</td><td>×</td><td>√</td><td>√</td><td>高</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td>√</td><td>中</td></tr><tr><td>串行化</td><td>×</td><td>×</td><td>×</td><td>最低</td></tr></tbody></table><h4 id="3-2-2-MySQL隔离级别设置"><a href="#3-2-2-MySQL隔离级别设置" class="headerlink" title="3.2.2 MySQL隔离级别设置"></a>3.2.2 MySQL隔离级别设置</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看当前隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 设置会话级隔离级别</span><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span><span class="token comment">-- 设置全局隔离级别</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token comment">-- 事务中设置隔离级别</span><span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-MVCC机制详解"><a href="#3-3-MVCC机制详解" class="headerlink" title="3.3 MVCC机制详解"></a>3.3 MVCC机制详解</h3><h4 id="3-3-1-MVCC实现原理"><a href="#3-3-1-MVCC实现原理" class="headerlink" title="3.3.1 MVCC实现原理"></a>3.3.1 MVCC实现原理</h4><p><strong>MVCC（多版本并发控制）：</strong></p><ul><li>通过保存数据的历史版本实现并发控制</li><li>读操作不加锁，提高并发性能</li><li>每个事务看到的数据版本不同</li></ul><p><strong>隐藏字段：</strong></p><ul><li><strong>DB_TRX_ID</strong>：创建或最后一次修改该记录的事务ID</li><li><strong>DB_ROLL_PTR</strong>：回滚指针，指向undo log</li><li><strong>DB_ROW_ID</strong>：行ID（无主键时）</li></ul><h4 id="3-3-2-Read-View机制"><a href="#3-3-2-Read-View机制" class="headerlink" title="3.3.2 Read View机制"></a>3.3.2 Read View机制</h4><p><strong>Read View创建时机：</strong></p><ul><li><strong>读已提交</strong>：每次执行SELECT时创建新的Read View</li><li><strong>可重复读</strong>：事务第一次执行SELECT时创建Read View，后续复用</li></ul><p><strong>Read View结构：</strong></p><pre class="line-numbers language-none"><code class="language-none">Read View &#123;    m_ids: 活跃事务ID列表    min_trx_id: 最小活跃事务ID    max_trx_id: 下一个事务ID    creator_trx_id: 创建该Read View的事务ID&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可见性判断：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 判断规则</span><span class="token keyword">IF</span> DB_TRX_ID <span class="token operator">&lt;</span> min_trx_id <span class="token keyword">THEN</span> 可见<span class="token keyword">ELSE</span> <span class="token keyword">IF</span> DB_TRX_ID <span class="token operator">>=</span> max_trx_id <span class="token keyword">THEN</span> 不可见<span class="token keyword">ELSE</span> <span class="token keyword">IF</span> DB_TRX_ID <span class="token operator">IN</span> m_ids <span class="token keyword">THEN</span> 不可见<span class="token keyword">ELSE</span> 可见<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-MVCC示例分析"><a href="#3-3-3-MVCC示例分析" class="headerlink" title="3.3.3 MVCC示例分析"></a>3.3.3 MVCC示例分析</h4><p><strong>模拟并发事务：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 会话1：事务A</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 创建Read View</span><span class="token comment">-- 会话2：事务B</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> username <span class="token operator">=</span> <span class="token string">'new_alice'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 会话1：事务A</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 仍然看到旧值</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-锁机制详解"><a href="#3-4-锁机制详解" class="headerlink" title="3.4 锁机制详解"></a>3.4 锁机制详解</h3><h4 id="3-4-1-锁类型"><a href="#3-4-1-锁类型" class="headerlink" title="3.4.1 锁类型"></a>3.4.1 锁类型</h4><p><strong>表级锁：</strong></p><ul><li><strong>表锁</strong>：LOCK TABLES … READ&#x2F;WRITE</li><li><strong>元数据锁</strong>：DDL操作自动加锁</li><li><strong>意向锁</strong>：表明事务稍后要对表加行锁</li></ul><p><strong>行级锁：</strong></p><ul><li><strong>记录锁（Record Lock）</strong>：锁定单个行记录</li><li><strong>间隙锁（Gap Lock）</strong>：锁定记录之间的间隙</li><li><strong>临键锁（Next-Key Lock）</strong>：记录锁 + 间隙锁</li></ul><h4 id="3-4-2-锁兼容性矩阵"><a href="#3-4-2-锁兼容性矩阵" class="headerlink" title="3.4.2 锁兼容性矩阵"></a>3.4.2 锁兼容性矩阵</h4><table><thead><tr><th>锁类型</th><th>共享锁(S)</th><th>排他锁(X)</th><th>意向共享锁(IS)</th><th>意向排他锁(IX)</th></tr></thead><tbody><tr><td>共享锁(S)</td><td>兼容</td><td>冲突</td><td>兼容</td><td>冲突</td></tr><tr><td>排他锁(X)</td><td>冲突</td><td>冲突</td><td>冲突</td><td>冲突</td></tr><tr><td>意向共享锁(IS)</td><td>兼容</td><td>冲突</td><td>兼容</td><td>兼容</td></tr><tr><td>意向排他锁(IX)</td><td>冲突</td><td>冲突</td><td>兼容</td><td>兼容</td></tr></tbody></table><h4 id="3-4-3-死锁检测与预防"><a href="#3-4-3-死锁检测与预防" class="headerlink" title="3.4.3 死锁检测与预防"></a>3.4.3 死锁检测与预防</h4><p><strong>死锁示例：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 事务1</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 此时事务1持有id=1的行锁</span><span class="token comment">-- 事务2</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">200</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 此时事务2持有id=2的行锁</span><span class="token comment">-- 事务1继续执行</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 事务1等待事务2释放id=2的行锁</span><span class="token comment">-- 事务2继续执行</span><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">200</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 事务2等待事务1释放id=1的行锁，形成死锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>死锁预防：</strong></p><ul><li>保持一致的加锁顺序</li><li>减少事务持有锁的时间</li><li>使用较低的隔离级别</li><li>合理设计索引，避免全表扫描</li></ul><h2 id="第四章：数据库性能优化"><a href="#第四章：数据库性能优化" class="headerlink" title="第四章：数据库性能优化"></a>第四章：数据库性能优化</h2><h3 id="4-1-SQL查询优化"><a href="#4-1-SQL查询优化" class="headerlink" title="4.1 SQL查询优化"></a>4.1 SQL查询优化</h3><h4 id="4-1-1-查询执行计划分析"><a href="#4-1-1-查询执行计划分析" class="headerlink" title="4.1.1 查询执行计划分析"></a>4.1.1 查询执行计划分析</h4><p><strong>EXPLAIN输出详解：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users u <span class="token keyword">JOIN</span> orders o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id <span class="token keyword">WHERE</span> u<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> o<span class="token punctuation">.</span>amount <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>关键字段说明：</strong></p><ul><li><strong>id</strong>：查询的序列号，表示执行顺序</li><li><strong>select_type</strong>：查询类型（SIMPLE、PRIMARY、SUBQUERY等）</li><li><strong>table</strong>：访问的表</li><li><strong>type</strong>：访问类型（ALL、index、range、ref、eq_ref、const）</li><li><strong>possible_keys</strong>：可能使用的索引</li><li><strong>key</strong>：实际使用的索引</li><li><strong>key_len</strong>：使用的索引长度</li><li><strong>rows</strong>：预计扫描的行数</li><li><strong>Extra</strong>：额外信息（Using index、Using where、Using filesort等）</li></ul><h4 id="4-1-2-慢查询优化"><a href="#4-1-2-慢查询优化" class="headerlink" title="4.1.2 慢查询优化"></a>4.1.2 慢查询优化</h4><p><strong>定位慢查询：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开启慢查询日志</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> slow_query_log <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> long_query_time <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">-- 超过2秒的查询记录</span><span class="token comment">-- 查看慢查询日志</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'slow_query_log_file'</span><span class="token punctuation">;</span><span class="token comment">-- 使用mysqldumpslow分析</span><span class="token comment">-- mysqldumpslow -s t -t 10 /var/log/mysql/mysql-slow.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化案例：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 原始慢查询（全表扫描）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'2024-01-01'</span><span class="token punctuation">;</span><span class="token comment">-- 优化后（使用索引）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> created_at <span class="token operator">>=</span> <span class="token string">'2024-01-01'</span>   <span class="token operator">AND</span> created_at <span class="token operator">&lt;</span> <span class="token string">'2024-01-02'</span><span class="token punctuation">;</span><span class="token comment">-- 添加索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_created_at <span class="token keyword">ON</span> orders<span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-索引优化策略"><a href="#4-2-索引优化策略" class="headerlink" title="4.2 索引优化策略"></a>4.2 索引优化策略</h3><h4 id="4-2-1-索引设计最佳实践"><a href="#4-2-1-索引设计最佳实践" class="headerlink" title="4.2.1 索引设计最佳实践"></a>4.2.1 索引设计最佳实践</h4><p><strong>复合索引设计：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据查询频率设计索引</span><span class="token comment">-- 高频查询：WHERE status = ? AND created_at > ?</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_status_created <span class="token keyword">ON</span> orders<span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">,</span> created_at<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 等值查询在前，范围查询在后</span><span class="token comment">-- 错误：CREATE INDEX idx_created_status ON orders(created_at, status);</span><span class="token comment">-- 正确：CREATE INDEX idx_status_created ON orders(status, created_at);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>覆盖索引优化：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询只需要索引列</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_amount <span class="token keyword">ON</span> orders<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 覆盖索引查询（不回表）</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id<span class="token punctuation">;</span><span class="token comment">-- Extra: Using index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-索引统计信息"><a href="#4-2-2-索引统计信息" class="headerlink" title="4.2.2 索引统计信息"></a>4.2.2 索引统计信息</h4><p><strong>更新统计信息：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看表统计信息</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'orders'</span><span class="token punctuation">;</span><span class="token comment">-- 手动更新统计信息</span><span class="token keyword">ANALYZE</span> <span class="token keyword">TABLE</span> orders<span class="token punctuation">;</span><span class="token comment">-- 查看索引使用情况</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span>innodb_index_stats <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'orders'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-表结构优化"><a href="#4-3-表结构优化" class="headerlink" title="4.3 表结构优化"></a>4.3 表结构优化</h3><h4 id="4-3-1-字段类型选择"><a href="#4-3-1-字段类型选择" class="headerlink" title="4.3.1 字段类型选择"></a>4.3.1 字段类型选择</h4><p><strong>数值类型优化：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 选择合适的整数类型</span><span class="token keyword">TINYINT</span>: <span class="token operator">-</span><span class="token number">128</span>到<span class="token number">127</span> <span class="token punctuation">(</span><span class="token number">1</span>字节<span class="token punctuation">)</span><span class="token keyword">SMALLINT</span>: <span class="token operator">-</span><span class="token number">32768</span>到<span class="token number">32767</span> <span class="token punctuation">(</span><span class="token number">2</span>字节<span class="token punctuation">)</span><span class="token keyword">MEDIUMINT</span>: <span class="token operator">-</span><span class="token number">8388608</span>到<span class="token number">8388607</span> <span class="token punctuation">(</span><span class="token number">3</span>字节<span class="token punctuation">)</span><span class="token keyword">INT</span>: <span class="token operator">-</span><span class="token number">2147483648</span>到<span class="token number">2147483647</span> <span class="token punctuation">(</span><span class="token number">4</span>字节<span class="token punctuation">)</span><span class="token keyword">BIGINT</span>: <span class="token operator">-</span><span class="token number">9223372036854775808</span>到<span class="token number">9223372036854775807</span> <span class="token punctuation">(</span><span class="token number">8</span>字节<span class="token punctuation">)</span><span class="token comment">-- 示例：状态字段使用TINYINT</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orders <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token keyword">status</span> <span class="token keyword">TINYINT</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">;</span><span class="token comment">-- 金额使用DECIMAL</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orders <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串类型优化：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- VARCHAR vs TEXT</span><span class="token comment">-- VARCHAR：可变长度，存储在行内，有长度限制</span><span class="token comment">-- TEXT：存储在行外，需要额外IO</span><span class="token comment">-- 优化前</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> articles <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    content <span class="token keyword">TEXT</span><span class="token punctuation">,</span>    summary <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 优化后</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> articles <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    summary <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 使用VARCHAR替代TEXT</span>    content <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-表分区优化"><a href="#4-3-2-表分区优化" class="headerlink" title="4.3.2 表分区优化"></a>4.3.2 表分区优化</h4><p><strong>范围分区：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders_history <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    created_at <span class="token keyword">DATE</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> created_at<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p2022 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2023 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2024 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p_future <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希分区：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users_hash <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> PARTITIONS <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-连接池优化"><a href="#4-4-连接池优化" class="headerlink" title="4.4 连接池优化"></a>4.4 连接池优化</h3><h4 id="4-4-1-HikariCP配置优化"><a href="#4-4-1-HikariCP配置优化" class="headerlink" title="4.4.1 HikariCP配置优化"></a>4.4.1 HikariCP配置优化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">HikariCP</span>配置示例spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>maximum<span class="token operator">-</span>pool<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">20</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>minimum<span class="token operator">-</span>idle<span class="token operator">=</span><span class="token number">5</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>idle<span class="token operator">-</span>timeout<span class="token operator">=</span><span class="token number">300000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>max<span class="token operator">-</span>lifetime<span class="token operator">=</span><span class="token number">1800000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>connection<span class="token operator">-</span>timeout<span class="token operator">=</span><span class="token number">30000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>leak<span class="token operator">-</span>detection<span class="token operator">-</span>threshold<span class="token operator">=</span><span class="token number">60000</span># 连接测试spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>connection<span class="token operator">-</span>test<span class="token operator">-</span>query<span class="token operator">=</span><span class="token constant">SELECT</span> <span class="token number">1</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>validation<span class="token operator">-</span>timeout<span class="token operator">=</span><span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-数据库连接监控"><a href="#4-4-2-数据库连接监控" class="headerlink" title="4.4.2 数据库连接监控"></a>4.4.2 数据库连接监控</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取连接池状态</span><span class="token class-name">HikariDataSource</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span><span class="token class-name">HikariPoolMXBean</span> poolMXBean <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getHikariPoolMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"活跃连接数: "</span> <span class="token operator">+</span> poolMXBean<span class="token punctuation">.</span><span class="token function">getActiveConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空闲连接数: "</span> <span class="token operator">+</span> poolMXBean<span class="token punctuation">.</span><span class="token function">getIdleConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待连接数: "</span> <span class="token operator">+</span> poolMXBean<span class="token punctuation">.</span><span class="token function">getThreadsAwaitingConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五章：Redis应用与优化"><a href="#第五章：Redis应用与优化" class="headerlink" title="第五章：Redis应用与优化"></a>第五章：Redis应用与优化</h2><h3 id="5-1-Redis基础架构"><a href="#5-1-Redis基础架构" class="headerlink" title="5.1 Redis基础架构"></a>5.1 Redis基础架构</h3><h4 id="5-1-1-Redis数据结构"><a href="#5-1-1-Redis数据结构" class="headerlink" title="5.1.1 Redis数据结构"></a>5.1.1 Redis数据结构</h4><p><strong>基本数据结构：</strong></p><pre class="line-numbers language-redis" data-language="redis"><code class="language-redis"># 字符串操作SET user:1:name &quot;Alice&quot;GET user:1:name# 哈希操作HSET user:1 name &quot;Alice&quot; email &quot;alice@example.com&quot; age 25HGETALL user:1# 列表操作LPUSH recent_users 1 2 3LRANGE recent_users 0 9# 集合操作SADD online_users 1 2 3SMEMBERS online_users# 有序集合ZADD user_scores 100 user1 200 user2 300 user3ZRANGE user_scores 0 -1 WITHSCORES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-Redis性能优势"><a href="#5-1-2-Redis性能优势" class="headerlink" title="5.1.2 Redis性能优势"></a>5.1.2 Redis性能优势</h4><p><strong>Redis为什么快：</strong></p><ol><li><strong>内存存储</strong>：数据存储在内存中，读写速度极快</li><li><strong>单线程模型</strong>：避免多线程上下文切换开销</li><li><strong>I&#x2F;O多路复用</strong>：基于epoll的事件驱动模型</li><li><strong>高效数据结构</strong>：优化的数据结构实现</li><li><strong>RESP协议</strong>：简单高效的通信协议</li></ol><h3 id="5-2-Redis持久化机制"><a href="#5-2-Redis持久化机制" class="headerlink" title="5.2 Redis持久化机制"></a>5.2 Redis持久化机制</h3><h4 id="5-2-1-RDB持久化"><a href="#5-2-1-RDB持久化" class="headerlink" title="5.2.1 RDB持久化"></a>5.2.1 RDB持久化</h4><p><strong>RDB配置：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># redis.conf</span>save <span class="token number">900</span> <span class="token number">1</span>      <span class="token comment"># 900秒内至少1个key变化</span>save <span class="token number">300</span> <span class="token number">10</span>     <span class="token comment"># 300秒内至少10个key变化</span>save <span class="token number">60</span> <span class="token number">10000</span>   <span class="token comment"># 60秒内至少10000个key变化</span>rdbcompression <span class="token function">yes</span>rdbchecksum <span class="token function">yes</span>dbfilename dump.rdb<span class="token function">dir</span> /var/lib/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>RDB优缺点：</strong></p><ul><li><strong>优点</strong>：文件紧凑，恢复速度快，适合备份</li><li><strong>缺点</strong>：可能丢失数据，fork子进程可能影响性能</li></ul><h4 id="5-2-2-AOF持久化"><a href="#5-2-2-AOF持久化" class="headerlink" title="5.2.2 AOF持久化"></a>5.2.2 AOF持久化</h4><p><strong>AOF配置：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># redis.conf</span>appendonly <span class="token function">yes</span>appendfilename <span class="token string">"appendonly.aof"</span>appendfsync everysec  <span class="token comment"># 每秒同步一次</span><span class="token comment"># AOF重写配置</span>auto-aof-rewrite-percentage <span class="token number">100</span>auto-aof-rewrite-min-size 64mb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AOF重写过程：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 手动触发AOF重写</span>BGREWRITEAOF<span class="token comment"># 查看AOF重写状态</span>INFO persistence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-Redis高级应用"><a href="#5-3-Redis高级应用" class="headerlink" title="5.3 Redis高级应用"></a>5.3 Redis高级应用</h3><h4 id="5-3-1-分布式锁"><a href="#5-3-1-分布式锁" class="headerlink" title="5.3.1 分布式锁"></a>5.3.1 分布式锁</h4><p><strong>Redisson分布式锁：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取分布式锁</span><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"order_lock:"</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试获取锁，最多等待10秒，锁持有30秒</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理订单业务逻辑</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-缓存策略"><a href="#5-3-2-缓存策略" class="headerlink" title="5.3.2 缓存策略"></a>5.3.2 缓存策略</h4><p><strong>缓存雪崩防护：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 缓存预热</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preloadCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 缓存击穿防护（互斥锁）</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserWithMutex</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"user:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:user:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-Redis性能优化"><a href="#5-4-Redis性能优化" class="headerlink" title="5.4 Redis性能优化"></a>5.4 Redis性能优化</h3><h4 id="5-4-1-内存优化"><a href="#5-4-1-内存优化" class="headerlink" title="5.4.1 内存优化"></a>5.4.1 内存优化</h4><p><strong>内存配置：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置最大内存</span>maxmemory 2gb<span class="token comment"># 内存淘汰策略</span>maxmemory-policy allkeys-lru<span class="token comment"># 内存碎片整理</span>activedefrag <span class="token function">yes</span>active-defrag-ignore-bytes 100mbactive-defrag-threshold-lower <span class="token number">10</span>active-defrag-threshold-upper <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-连接池优化"><a href="#5-4-2-连接池优化" class="headerlink" title="5.4.2 连接池优化"></a>5.4.2 连接池优化</h4><p><strong>Lettuce连接池配置：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 1000ms        <span class="token key atrule">time-between-eviction-runs</span><span class="token punctuation">:</span> 60s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六章：分库分表策略"><a href="#第六章：分库分表策略" class="headerlink" title="第六章：分库分表策略"></a>第六章：分库分表策略</h2><h3 id="6-1-分库分表基础"><a href="#6-1-分库分表基础" class="headerlink" title="6.1 分库分表基础"></a>6.1 分库分表基础</h3><h4 id="6-1-1-分库分表场景"><a href="#6-1-1-分库分表场景" class="headerlink" title="6.1.1 分库分表场景"></a>6.1.1 分库分表场景</h4><p><strong>分库分表触发条件：</strong></p><ul><li>单表数据量超过500万行</li><li>单表大小超过2GB</li><li>数据库QPS超过1000</li><li>磁盘IO成为瓶颈</li></ul><h4 id="6-1-2-分库分表方式"><a href="#6-1-2-分库分表方式" class="headerlink" title="6.1.2 分库分表方式"></a>6.1.2 分库分表方式</h4><p><strong>水平分表：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 按用户ID分表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders_0 <span class="token operator">LIKE</span> orders<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders_1 <span class="token operator">LIKE</span> orders<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders_2 <span class="token operator">LIKE</span> orders<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders_3 <span class="token operator">LIKE</span> orders<span class="token punctuation">;</span><span class="token comment">-- 分表路由规则：user_id % 4</span><span class="token comment">-- 用户ID为1 → orders_1</span><span class="token comment">-- 用户ID为2 → orders_2</span><span class="token comment">-- 用户ID为3 → orders_3</span><span class="token comment">-- 用户ID为4 → orders_0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>垂直分表：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 将大字段分离到单独表</span><span class="token comment">-- 原始表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> articles <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    content <span class="token keyword">TEXT</span><span class="token punctuation">,</span>    summary <span class="token keyword">TEXT</span><span class="token punctuation">,</span>    author <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 垂直分表后</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> articles_basic <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    author <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> articles_content <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    content <span class="token keyword">TEXT</span><span class="token punctuation">,</span>    summary <span class="token keyword">TEXT</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> articles_basic<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-分库分表中间件"><a href="#6-2-分库分表中间件" class="headerlink" title="6.2 分库分表中间件"></a>6.2 分库分表中间件</h3><h4 id="6-2-1-ShardingSphere配置"><a href="#6-2-1-ShardingSphere配置" class="headerlink" title="6.2.1 ShardingSphere配置"></a>6.2.1 ShardingSphere配置</h4><p><strong>分片配置：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0<span class="token punctuation">,</span>ds1      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db0        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> password      <span class="token key atrule">ds1</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db1        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> password        <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token key atrule">sharding</span><span class="token punctuation">:</span>        <span class="token key atrule">tables</span><span class="token punctuation">:</span>          <span class="token key atrule">orders</span><span class="token punctuation">:</span>            <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">&#123;</span>0..1<span class="token punctuation">&#125;</span>.orders_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">&#123;</span>0..3<span class="token punctuation">&#125;</span>            <span class="token key atrule">table-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> user_id                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> table<span class="token punctuation">-</span>inline            <span class="token key atrule">database-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> user_id                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> database<span class="token punctuation">-</span>inline                <span class="token key atrule">sharding-algorithms</span><span class="token punctuation">:</span>          <span class="token key atrule">table-inline</span><span class="token punctuation">:</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> orders_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">&#123;</span>user_id % 4<span class="token punctuation">&#125;</span>          <span class="token key atrule">database-inline</span><span class="token punctuation">:</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">&#123;</span>user_id % 2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-分布式主键生成"><a href="#6-2-2-分布式主键生成" class="headerlink" title="6.2.2 分布式主键生成"></a>6.2.2 分布式主键生成</h4><p><strong>雪花算法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1288834974657L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token operator">|</span>                <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>                <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>                sequence<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-分库分表问题与解决方案"><a href="#6-3-分库分表问题与解决方案" class="headerlink" title="6.3 分库分表问题与解决方案"></a>6.3 分库分表问题与解决方案</h3><h4 id="6-3-1-分布式事务"><a href="#6-3-1-分布式事务" class="headerlink" title="6.3.1 分布式事务"></a>6.3.1 分布式事务</h4><p><strong>Seata分布式事务：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderDTO</span> orderDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 扣减库存</span>        stockService<span class="token punctuation">.</span><span class="token function">deductStock</span><span class="token punctuation">(</span>orderDTO<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderDTO<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建订单</span>        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orderDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 扣减用户余额</span>        userService<span class="token punctuation">.</span><span class="token function">deductBalance</span><span class="token punctuation">(</span>orderDTO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderDTO<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-跨表查询"><a href="#6-3-2-跨表查询" class="headerlink" title="6.3.2 跨表查询"></a>6.3.2 跨表查询</h4><p><strong>聚合查询解决方案：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 应用层聚合</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderVO</span><span class="token punctuation">></span></span> <span class="token function">getUserOrders</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> orders <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 批量查询用户信息</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> userIds <span class="token operator">=</span> orders<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> userMap <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">batchGetUsers</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orders<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>order <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OrderVO</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vo<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>            vo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> vo<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七章：实战案例分析"><a href="#第七章：实战案例分析" class="headerlink" title="第七章：实战案例分析"></a>第七章：实战案例分析</h2><h3 id="7-1-电商数据库设计"><a href="#7-1-电商数据库设计" class="headerlink" title="7.1 电商数据库设计"></a>7.1 电商数据库设计</h3><h4 id="7-1-1-完整表结构设计"><a href="#7-1-1-完整表结构设计" class="headerlink" title="7.1.1 完整表结构设计"></a>7.1.1 完整表结构设计</h4><p><strong>商品表设计：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> products <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span>    description <span class="token keyword">TEXT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品描述'</span><span class="token punctuation">,</span>    price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品价格'</span><span class="token punctuation">,</span>    stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'库存数量'</span><span class="token punctuation">,</span>    category_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类ID'</span><span class="token punctuation">,</span>    brand_id <span class="token keyword">BIGINT</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌ID'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">TINYINT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态：1上架，0下架'</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_category <span class="token punctuation">(</span>category_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_brand <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_status <span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_price <span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>    FULLTEXT idx_name_desc <span class="token punctuation">(</span>name<span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_images <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    image_url <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sort_order <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    is_primary <span class="token keyword">TINYINT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_product <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> products<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>购物车表设计：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> shopping_cart <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    quantity <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span>    selected <span class="token keyword">TINYINT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uk_user_product <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> product_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_user <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_product <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> users<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> products<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-高并发优化案例"><a href="#7-2-高并发优化案例" class="headerlink" title="7.2 高并发优化案例"></a>7.2 高并发优化案例</h3><h4 id="7-2-1-秒杀活动优化"><a href="#7-2-1-秒杀活动优化" class="headerlink" title="7.2.1 秒杀活动优化"></a>7.2.1 秒杀活动优化</h4><p><strong>数据库优化：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建库存表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_stock <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    total_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    available_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    locked_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    version <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_product <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token comment">-- 创建订单流水表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_flow <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    quantity <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">TINYINT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_order_no <span class="token punctuation">(</span>order_no<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_user <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_product <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> idx_created <span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Redis缓存优化：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecKillService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductStockMapper</span> stockMapper<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">secKill</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> stockKey <span class="token operator">=</span> <span class="token string">"seckill:stock:"</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>        <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token string">"seckill:user:"</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>                <span class="token comment">// 使用Redis原子操作</span>        <span class="token class-name">Long</span> stock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 库存不足，恢复库存</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 检查用户是否已购买</span>        <span class="token class-name">Boolean</span> hasBought <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasBought<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>stockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加到用户购买集合</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 发送消息到队列异步处理</span>        <span class="token function">sendSecKillMessage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-性能监控与诊断"><a href="#7-3-性能监控与诊断" class="headerlink" title="7.3 性能监控与诊断"></a>7.3 性能监控与诊断</h3><h4 id="7-3-1-数据库监控"><a href="#7-3-1-数据库监控" class="headerlink" title="7.3.1 数据库监控"></a>7.3.1 数据库监控</h4><p><strong>Prometheus + Grafana监控：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># docker-compose.yml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqld-exporter</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/mysqld<span class="token punctuation">-</span>exporter    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">DATA_SOURCE_NAME</span><span class="token punctuation">:</span> <span class="token string">"user:password@(mysql:3306)/"</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9104:9104"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql    <span class="token key atrule">prometheus</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/prometheus    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9090:9090"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./prometheus.yml<span class="token punctuation">:</span>/etc/prometheus/prometheus.yml    <span class="token key atrule">grafana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">GF_SECURITY_ADMIN_PASSWORD</span><span class="token punctuation">:</span> admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-2-慢查询分析"><a href="#7-3-2-慢查询分析" class="headerlink" title="7.3.2 慢查询分析"></a>7.3.2 慢查询分析</h4><p><strong>使用pt-query-digest：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 分析慢查询日志</span>pt-query-digest /var/log/mysql/mysql-slow.log <span class="token operator">></span> slow_report.txt<span class="token comment"># 分析特定时间段</span>pt-query-digest <span class="token parameter variable">--since</span> <span class="token string">"2024-12-19 00:00:00"</span> /var/log/mysql/mysql-slow.log<span class="token comment"># 输出到数据库</span>pt-query-digest <span class="token parameter variable">--review</span> <span class="token assign-left variable">h</span><span class="token operator">=</span>localhost,D<span class="token operator">=</span>slow_query_log,t<span class="token operator">=</span>global_query_review /var/log/mysql/mysql-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第八章：面试真题解析"><a href="#第八章：面试真题解析" class="headerlink" title="第八章：面试真题解析"></a>第八章：面试真题解析</h2><h3 id="8-1-索引相关面试题"><a href="#8-1-索引相关面试题" class="headerlink" title="8.1 索引相关面试题"></a>8.1 索引相关面试题</h3><h4 id="8-1-1-B树和B-树的区别"><a href="#8-1-1-B树和B-树的区别" class="headerlink" title="8.1.1 B树和B+树的区别"></a>8.1.1 B树和B+树的区别</h4><p><strong>标准答案：</strong></p><ol><li><p><strong>数据存储位置</strong>：</p><ul><li>B树：所有节点都存储数据</li><li>B+树：只有叶子节点存储数据</li></ul></li><li><p><strong>查询效率</strong>：</p><ul><li>B树：查询效率不稳定，可能在非叶子节点找到</li><li>B+树：查询效率稳定，必须到叶子节点</li></ul></li><li><p><strong>范围查询</strong>：</p><ul><li>B树：需要中序遍历</li><li>B+树：叶子节点形成有序链表，范围查询更高效</li></ul></li><li><p><strong>磁盘IO</strong>：</p><ul><li>B树：节点存储数据，扇出小，IO次数多</li><li>B+树：节点只存储键值，扇出大，IO次数少</li></ul></li></ol><h4 id="8-1-2-索引失效的场景"><a href="#8-1-2-索引失效的场景" class="headerlink" title="8.1.2 索引失效的场景"></a>8.1.2 索引失效的场景</h4><p><strong>常见失效场景：</strong></p><ol><li><strong>使用函数或表达式</strong>：<code>WHERE DATE(create_time) = &#39;2024-01-01&#39;</code></li><li><strong>LIKE通配符在前</strong>：<code>WHERE name LIKE &#39;%abc&#39;</code></li><li><strong>数据类型不匹配</strong>：<code>WHERE phone = 13800138001</code>（phone是varchar）</li><li><strong>OR条件过多</strong>：导致优化器放弃索引</li><li><strong>不等于操作</strong>：<code>WHERE status != 1</code></li><li><strong>IS NULL&#x2F;IS NOT NULL</strong>：某些情况下失效</li><li><strong>范围查询后的列</strong>：组合索引中范围查询后的列失效</li></ol><h3 id="8-2-事务相关面试题"><a href="#8-2-事务相关面试题" class="headerlink" title="8.2 事务相关面试题"></a>8.2 事务相关面试题</h3><h4 id="8-2-1-MySQL的四种隔离级别"><a href="#8-2-1-MySQL的四种隔离级别" class="headerlink" title="8.2.1 MySQL的四种隔离级别"></a>8.2.1 MySQL的四种隔离级别</h4><p><strong>隔离级别详解：</strong></p><ol><li><p><strong>读未提交（Read Uncommitted）</strong>：</p><ul><li>允许读取未提交的数据，可能导致脏读</li><li>并发性能最高，但数据一致性最差</li></ul></li><li><p><strong>读已提交（Read Committed）</strong>：</p><ul><li>只能读取已提交的数据，避免脏读</li><li>可能出现不可重复读</li><li>Oracle、PostgreSQL默认隔离级别</li></ul></li><li><p><strong>可重复读（Repeatable Read）</strong>：</p><ul><li>同一事务内多次读取结果一致</li><li>可能出现幻读（MySQL通过间隙锁解决）</li><li>MySQL默认隔离级别</li></ul></li><li><p><strong>串行化（Serializable）</strong>：</p><ul><li>完全串行执行，避免所有并发问题</li><li>并发性能最低，数据一致性最高</li></ul></li></ol><h4 id="8-2-2-MVCC机制详解"><a href="#8-2-2-MVCC机制详解" class="headerlink" title="8.2.2 MVCC机制详解"></a>8.2.2 MVCC机制详解</h4><p><strong>MVCC实现原理：</strong></p><ol><li><p><strong>隐藏字段</strong>：</p><ul><li><code>DB_TRX_ID</code>：创建&#x2F;修改记录的事务ID</li><li><code>DB_ROLL_PTR</code>：回滚指针，指向undo log</li><li><code>DB_ROW_ID</code>：行ID（无主键时）</li></ul></li><li><p><strong>Read View</strong>：</p><ul><li>读已提交：每次SELECT创建新的Read View</li><li>可重复读：事务第一次SELECT时创建，后续复用</li></ul></li><li><p><strong>可见性判断</strong>：</p><ul><li>事务ID &lt; min_trx_id：可见</li><li>事务ID &gt;&#x3D; max_trx_id：不可见</li><li>在活跃事务列表中：不可见</li><li>否则：可见</li></ul></li></ol><h3 id="8-3-Redis相关面试题"><a href="#8-3-Redis相关面试题" class="headerlink" title="8.3 Redis相关面试题"></a>8.3 Redis相关面试题</h3><h4 id="8-3-1-Redis为什么快"><a href="#8-3-1-Redis为什么快" class="headerlink" title="8.3.1 Redis为什么快"></a>8.3.1 Redis为什么快</h4><p><strong>性能优势：</strong></p><ol><li><strong>内存存储</strong>：数据存储在内存，读写速度极快</li><li><strong>单线程模型</strong>：避免多线程上下文切换和锁竞争</li><li><strong>I&#x2F;O多路复用</strong>：基于epoll的事件驱动模型</li><li><strong>高效数据结构</strong>：优化的SDS、跳表、压缩列表等</li><li><strong>RESP协议</strong>：简单高效的二进制协议</li><li><strong>避免系统调用</strong>：大部分操作在用户空间完成</li></ol><h4 id="8-3-2-Redis持久化机制"><a href="#8-3-2-Redis持久化机制" class="headerlink" title="8.3.2 Redis持久化机制"></a>8.3.2 Redis持久化机制</h4><p><strong>RDB vs AOF对比：</strong></p><table><thead><tr><th>特性</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>持久化方式</td><td>快照</td><td>追加日志</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>可能丢失数据</td><td>更安全</td></tr><tr><td>文件大小</td><td>小</td><td>大</td></tr><tr><td>性能影响</td><td>大（fork）</td><td>小</td></tr></tbody></table><p><strong>混合持久化（Redis 4.0+）：</strong></p><ul><li>结合RDB和AOF的优点</li><li>AOF重写时保存RDB格式</li><li>恢复时先加载RDB，再重放AOF</li></ul><h3 id="8-4-分库分表面试题"><a href="#8-4-分库分表面试题" class="headerlink" title="8.4 分库分表面试题"></a>8.4 分库分表面试题</h3><h4 id="8-4-1-分库分表的策略"><a href="#8-4-1-分库分表的策略" class="headerlink" title="8.4.1 分库分表的策略"></a>8.4.1 分库分表的策略</h4><p><strong>水平分表策略：</strong></p><ol><li><strong>范围分片</strong>：按ID范围分片，如1-100万、100万-200万</li><li><strong>哈希分片</strong>：按ID取模分片，如ID % 4</li><li><strong>一致性哈希</strong>：解决节点增减时的数据迁移问题</li><li><strong>地理位置分片</strong>：按用户地理位置分片</li><li><strong>时间分片</strong>：按时间维度分片，如按月分表</li></ol><h4 id="8-4-2-分布式主键生成方案"><a href="#8-4-2-分布式主键生成方案" class="headerlink" title="8.4.2 分布式主键生成方案"></a>8.4.2 分布式主键生成方案</h4><p><strong>常见方案对比：</strong></p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>UUID</td><td>简单、全局唯一</td><td>无序、占用空间大</td></tr><tr><td>雪花算法</td><td>有序、高性能</td><td>依赖系统时钟</td></tr><tr><td>数据库自增</td><td>简单、有序</td><td>单点瓶颈</td></tr><tr><td>Redis自增</td><td>高性能</td><td>Redis单点故障</td></tr><tr><td>号段模式</td><td>高性能、有序</td><td>需要预分配</td></tr></tbody></table><h3 id="8-5-SQL优化面试题"><a href="#8-5-SQL优化面试题" class="headerlink" title="8.5 SQL优化面试题"></a>8.5 SQL优化面试题</h3><h4 id="8-5-1-慢查询优化步骤"><a href="#8-5-1-慢查询优化步骤" class="headerlink" title="8.5.1 慢查询优化步骤"></a>8.5.1 慢查询优化步骤</h4><p><strong>优化流程：</strong></p><ol><li><p><strong>定位慢查询</strong>：</p><ul><li>开启慢查询日志</li><li>使用EXPLAIN分析执行计划</li><li>使用SHOW PROCESSLIST查看当前查询</li></ul></li><li><p><strong>分析执行计划</strong>：</p><ul><li>查看type字段：ALL表示全表扫描</li><li>查看rows字段：预估扫描行数</li><li>查看Extra字段：Using filesort、Using temporary</li></ul></li><li><p><strong>优化措施</strong>：</p><ul><li>添加合适索引</li><li>优化SQL语句结构</li><li>调整表结构</li><li>使用覆盖索引</li><li>分页优化（延迟关联）</li></ul></li></ol><h4 id="8-5-2-分页查询优化"><a href="#8-5-2-分页查询优化" class="headerlink" title="8.5.2 分页查询优化"></a>8.5.2 分页查询优化</h4><p><strong>传统分页问题：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 深分页查询，性能差</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>优化方案：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方案1：延迟关联</span><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> orders o<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> t <span class="token keyword">ON</span> o<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 方案2：记录上一页最大ID</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token comment">#&#123;lastId&#125; </span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 方案3：游标分页（推荐）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> created_at <span class="token operator">&lt;</span> <span class="token comment">#&#123;lastCreateTime&#125; </span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数据库作为系统的核心组件，其性能直接影响整个应用的响应速度和稳定性。本文系统梳理了：</p><ol><li><strong>SQL语法</strong>：从基础查询到高级窗口函数，涵盖实际开发中的各种场景</li><li><strong>索引机制</strong>：深入B+树原理，掌握索引设计和优化策略</li><li><strong>事务管理</strong>：理解ACID特性，掌握MVCC机制和锁原理</li><li><strong>性能优化</strong>：从SQL优化到架构设计，全方位提升数据库性能</li><li><strong>Redis应用</strong>：缓存策略、分布式锁、性能优化等实战技巧</li><li><strong>分库分表</strong>：解决大数据量场景下的水平扩展问题</li></ol><p>掌握这些知识点不仅有助于技术面试，更重要的是能够构建高性能、高可用的数据库系统。建议结合实际项目进行实践，通过性能测试和监控工具持续优化数据库性能。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《高性能MySQL》- Baron Schwartz等</li><li>《MySQL技术内幕：InnoDB存储引擎》- 姜承尧</li><li>《Redis设计与实现》- 黄健宏</li><li>《MySQL运维内参》- 周彦伟</li><li>《数据库系统实现》- Garcia-Molina等</li><li>MySQL官方文档</li><li>Redis官方文档</li><li>ShardingSphere官方文档</li></ol><hr><p><em>本文档持续更新，如有错误或建议，欢迎指正。</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 事务 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
            <tag> 优化 </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔试核心知识点详解</title>
      <link href="/2024/12/19/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AF%95%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/12/19/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AF%95%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础笔试核心知识点详解"><a href="#Java基础笔试核心知识点详解" class="headerlink" title="Java基础笔试核心知识点详解"></a>Java基础笔试核心知识点详解</h1><p>Java基础是技术笔试的首要考察内容，涵盖了集合框架、反射机制、字符串操作、异常处理、设计模式等核心领域。本文将深入剖析这些知识点，帮助读者系统掌握Java基础的核心内容。</p><h2 id="1-集合框架深度解析"><a href="#1-集合框架深度解析" class="headerlink" title="1. 集合框架深度解析"></a>1. 集合框架深度解析</h2><h3 id="1-1-HashMap与ConcurrentHashMap的实现原理"><a href="#1-1-HashMap与ConcurrentHashMap的实现原理" class="headerlink" title="1.1 HashMap与ConcurrentHashMap的实现原理"></a>1.1 HashMap与ConcurrentHashMap的实现原理</h3><h4 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h4><p>HashMap基于哈希表实现，采用数组+链表+红黑树的复合结构：</p><ul><li><strong>存储结构</strong>：使用Node数组存储键值对，每个Node包含key、value、hash、next四个字段</li><li><strong>哈希计算</strong>：通过key的hashCode()计算哈希值，然后通过<code>(n-1) &amp; hash</code>确定数组索引</li><li><strong>冲突处理</strong>：采用链地址法解决哈希冲突，当链表长度≥8且数组长度≥64时转为红黑树</li><li><strong>扩容机制</strong>：当元素数量超过阈值（容量×负载因子0.75）时触发扩容，容量变为原来的2倍</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// HashMap核心源码分析</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理哈希冲突</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ConcurrentHashMap线程安全机制"><a href="#ConcurrentHashMap线程安全机制" class="headerlink" title="ConcurrentHashMap线程安全机制"></a>ConcurrentHashMap线程安全机制</h4><p>ConcurrentHashMap在JDK1.8中采用CAS+synchronized保证线程安全：</p><ul><li><strong>存储结构</strong>：与HashMap类似，但Node的val和next字段使用volatile修饰保证可见性</li><li><strong>并发控制</strong>：<ul><li>插入时使用CAS操作保证原子性</li><li>当发生哈希冲突时，使用synchronized锁住链表头节点</li><li>扩容时支持多线程协助扩容（ForwardingNode机制）</li></ul></li><li><strong>size计算</strong>：使用baseCount和CounterCell数组来统计元素数量，避免全局锁</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ConcurrentHashMap的put方法核心逻辑</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 使用CAS操作插入新节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 锁住链表头节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 处理链表或红黑树插入</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-Vector与ArrayList的线程安全比较"><a href="#1-2-Vector与ArrayList的线程安全比较" class="headerlink" title="1.2 Vector与ArrayList的线程安全比较"></a>1.2 Vector与ArrayList的线程安全比较</h3><table><thead><tr><th>特性</th><th>Vector</th><th>ArrayList</th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>是，所有方法使用synchronized修饰</td><td>否，非线程安全</td></tr><tr><td><strong>扩容策略</strong></td><td>扩容为原来的2倍</td><td>扩容为原来的1.5倍</td></tr><tr><td><strong>性能</strong></td><td>较低，方法级同步开销大</td><td>较高，无同步开销</td></tr><tr><td><strong>初始容量</strong></td><td>10</td><td>10</td></tr><tr><td><strong>遍历方式</strong></td><td>支持Enumeration和Iterator</td><td>仅支持Iterator</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Vector的线程安全实现</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ArrayList的非线程安全实现</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-LinkedList的实现机制与适用场景"><a href="#1-3-LinkedList的实现机制与适用场景" class="headerlink" title="1.3 LinkedList的实现机制与适用场景"></a>1.3 LinkedList的实现机制与适用场景</h3><h4 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h4><p>LinkedList基于双向链表实现：</p><ul><li><strong>节点结构</strong>：每个节点包含prev、next、item三个字段</li><li><strong>头尾指针</strong>：维护first和last指针，支持快速头尾操作</li><li><strong>队列特性</strong>：实现了Deque接口，支持队列和栈的操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// LinkedList节点定义</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">E</span> item<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 头插法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li><strong>频繁插入删除</strong>：在中间位置插入删除元素时性能优于ArrayList</li><li><strong>队列&#x2F;栈实现</strong>：作为队列或栈使用时效率很高</li><li><strong>内存敏感</strong>：不需要连续的内存空间</li></ul><h2 id="2-反射机制详解"><a href="#2-反射机制详解" class="headerlink" title="2. 反射机制详解"></a>2. 反射机制详解</h2><h3 id="2-1-反射基本原理"><a href="#2-1-反射基本原理" class="headerlink" title="2.1 反射基本原理"></a>2.1 反射基本原理</h3><p>反射机制允许程序在运行时获取类的信息并操作类或对象的属性、方法等：</p><ul><li><strong>Class对象</strong>：每个类在JVM中都有对应的Class对象，包含了类的完整结构信息</li><li><strong>获取方式</strong>：<ul><li><code>Class.forName(&quot;全限定类名&quot;)</code></li><li><code>类名.class</code></li><li><code>对象.getClass()</code></li></ul></li></ul><h3 id="2-2-反射的应用场景"><a href="#2-2-反射的应用场景" class="headerlink" title="2.2 反射的应用场景"></a>2.2 反射的应用场景</h3><h4 id="获取类信息"><a href="#获取类信息" class="headerlink" title="获取类信息"></a>获取类信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取Class对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取类名</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名："</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单类名："</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取包信息</span><span class="token class-name">Package</span> pkg <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包名："</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取父类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> superClass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类："</span> <span class="token operator">+</span> superClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取接口</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> iface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口："</span> <span class="token operator">+</span> iface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用无参构造创建对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 已过时</span><span class="token comment">// 使用指定构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取方法</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> list <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取add方法</span><span class="token class-name">Method</span> addMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>addMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取size方法</span><span class="token class-name">Method</span> sizeMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> sizeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取私有字段</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Field</span> nameField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置可访问私有字段</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-反射的性能优化"><a href="#2-3-反射的性能优化" class="headerlink" title="2.3 反射的性能优化"></a>2.3 反射的性能优化</h3><ul><li><strong>缓存Class对象</strong>：避免重复获取Class对象</li><li><strong>setAccessible(true)</strong>：关闭安全检查提高性能</li><li><strong>MethodHandle</strong>：JDK7引入的轻量级反射机制</li></ul><h2 id="3-字符串操作深度分析"><a href="#3-字符串操作深度分析" class="headerlink" title="3. 字符串操作深度分析"></a>3. 字符串操作深度分析</h2><h3 id="3-1-String、StringBuilder、StringBuffer区别"><a href="#3-1-String、StringBuilder、StringBuffer区别" class="headerlink" title="3.1 String、StringBuilder、StringBuffer区别"></a>3.1 String、StringBuilder、StringBuffer区别</h3><table><thead><tr><th>特性</th><th>String</th><th>StringBuilder</th><th>StringBuffer</th></tr></thead><tbody><tr><td><strong>可变性</strong></td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td><strong>线程安全</strong></td><td>是（不可变天然线程安全）</td><td>否</td><td>是</td></tr><tr><td><strong>性能</strong></td><td>低（频繁修改时）</td><td>高</td><td>中等</td></tr><tr><td><strong>使用场景</strong></td><td>字符串常量</td><td>单线程字符串操作</td><td>多线程字符串操作</td></tr></tbody></table><h4 id="String不可变性原理"><a href="#String不可变性原理" class="headerlink" title="String不可变性原理"></a>String不可变性原理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 使用final修饰，不可修改</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token comment">// 缓存hash值</span>        <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StringBuilder实现原理"><a href="#StringBuilder实现原理" class="headerlink" title="StringBuilder实现原理"></a>StringBuilder实现原理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// StringBuilder继承自AbstractStringBuilder</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>  <span class="token comment">// 非final，可扩容</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> str <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-字符串常量池机制"><a href="#3-2-字符串常量池机制" class="headerlink" title="3.2 字符串常量池机制"></a>3.2 字符串常量池机制</h3><p>JVM为了提升性能和减少内存消耗，维护了一块特殊的内存区域——字符串常量池：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符串常量池示例</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 创建在常量池</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 复用常量池中的对象</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建在堆内存</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true，指向同一个常量池对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false，一个在常量池，一个在堆内存</span><span class="token comment">// intern()方法</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将字符串放入常量池并返回引用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-异常处理体系"><a href="#4-异常处理体系" class="headerlink" title="4. 异常处理体系"></a>4. 异常处理体系</h2><h3 id="4-1-Java异常体系结构"><a href="#4-1-Java异常体系结构" class="headerlink" title="4.1 Java异常体系结构"></a>4.1 Java异常体系结构</h3><pre class="line-numbers language-none"><code class="language-none">Throwable├── Error（系统级错误，程序无法处理）│   ├── OutOfMemoryError│   ├── StackOverflowError│   └── VirtualMachineError└── Exception（程序可处理的异常）    ├── RuntimeException（运行时异常，非受检异常）    │   ├── NullPointerException    │   ├── ArrayIndexOutOfBoundsException    │   ├── ClassCastException    │   └── IllegalArgumentException    └── 非RuntimeException（受检异常）        ├── IOException        ├── SQLException        └── ClassNotFoundException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-自定义异常实现"><a href="#4-2-自定义异常实现" class="headerlink" title="4.2 自定义异常实现"></a>4.2 自定义异常实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义受检异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义运行时异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-异常处理最佳实践"><a href="#4-3-异常处理最佳实践" class="headerlink" title="4.3 异常处理最佳实践"></a>4.3 异常处理最佳实践</h3><h4 id="try-with-resources语法"><a href="#try-with-resources语法" class="headerlink" title="try-with-resources语法"></a>try-with-resources语法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 传统方式</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// try-with-resources（推荐）</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常捕获顺序"><a href="#异常捕获顺序" class="headerlink" title="异常捕获顺序"></a>异常捕获顺序</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 可能抛出多种异常的代码</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 子类异常在前</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件未找到"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 父类异常在后</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通用异常处理在最后</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"未知异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-设计模式精讲"><a href="#5-设计模式精讲" class="headerlink" title="5. 设计模式精讲"></a>5. 设计模式精讲</h2><h3 id="5-1-单例模式详解"><a href="#5-1-单例模式详解" class="headerlink" title="5.1 单例模式详解"></a>5.1 单例模式详解</h3><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程安全，类加载时就初始化</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HungrySingleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="懒汉式单例（双重检查锁）"><a href="#懒汉式单例（双重检查锁）" class="headerlink" title="懒汉式单例（双重检查锁）"></a>懒汉式单例（双重检查锁）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程安全，延迟加载</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LazySingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态内部类单例（推荐）"><a href="#静态内部类单例（推荐）" class="headerlink" title="静态内部类单例（推荐）"></a>静态内部类单例（推荐）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程安全，延迟加载，无锁机制</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StaticInnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">StaticInnerSingleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StaticInnerSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="枚举单例（最推荐）"><a href="#枚举单例（最推荐）" class="headerlink" title="枚举单例（最推荐）"></a>枚举单例（最推荐）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程安全，防止反序列化破坏单例</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 单例方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-工厂模式"><a href="#5-2-工厂模式" class="headerlink" title="5.2 工厂模式"></a>5.2 工厂模式</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 产品接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体产品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benz</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奔驰在跑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bmw</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宝马在跑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 简单工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Car</span> <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"benz"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"bmw"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bmw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"未知车型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 工厂接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Car</span> <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BenzFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BmwFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bmw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-观察者模式"><a href="#5-3-观察者模式" class="headerlink" title="5.3 观察者模式"></a>5.3 观察者模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主题接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 观察者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体主题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> observers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-高频面试题总结"><a href="#6-高频面试题总结" class="headerlink" title="6. 高频面试题总结"></a>6. 高频面试题总结</h2><h3 id="6-1-集合框架相关"><a href="#6-1-集合框架相关" class="headerlink" title="6.1 集合框架相关"></a>6.1 集合框架相关</h3><ol><li><p><strong>HashMap的put过程是怎样的？</strong></p><ul><li>计算key的hash值</li><li>通过(n-1)&amp;hash计算索引位置</li><li>如果位置为空，直接插入</li><li>如果位置不为空，判断key是否相同，相同则覆盖</li><li>不同则判断是否为树节点，是则插入红黑树</li><li>否则插入链表，链表长度≥8时转为红黑树</li></ul></li><li><p><strong>HashMap为什么线程不安全？</strong></p><ul><li>多线程put可能导致数据丢失</li><li>扩容时可能导致链表成环（JDK1.7）</li><li>非原子操作导致的数据不一致</li></ul></li><li><p><strong>ConcurrentHashMap如何实现线程安全？</strong></p><ul><li>使用CAS操作保证原子性</li><li>synchronized只锁定链表头节点</li><li>使用volatile保证可见性</li><li>扩容时支持多线程协助</li></ul></li></ol><h3 id="6-2-反射机制相关"><a href="#6-2-反射机制相关" class="headerlink" title="6.2 反射机制相关"></a>6.2 反射机制相关</h3><ol><li><p><strong>反射的优缺点？</strong></p><ul><li>优点：动态性、灵活性、框架设计基础</li><li>缺点：性能开销、安全限制、代码复杂</li></ul></li><li><p><strong>如何防止反射破坏单例？</strong></p><ul><li>在构造方法中检查实例是否已存在</li><li>使用枚举实现单例</li><li>使用SecurityManager检查权限</li></ul></li></ol><h3 id="6-3-字符串相关"><a href="#6-3-字符串相关" class="headerlink" title="6.3 字符串相关"></a>6.3 字符串相关</h3><ol><li><p><strong>String为什么设计成不可变？</strong></p><ul><li>线程安全</li><li>支持字符串常量池</li><li>作为HashMap的key安全</li><li>避免被恶意修改</li></ul></li><li><p><strong>StringBuilder和StringBuffer的区别？</strong></p><ul><li>StringBuilder非线程安全，性能高</li><li>StringBuffer线程安全，方法使用synchronized</li></ul></li></ol><h3 id="6-4-异常处理相关"><a href="#6-4-异常处理相关" class="headerlink" title="6.4 异常处理相关"></a>6.4 异常处理相关</h3><ol><li><p><strong>finally块一定会执行吗？</strong></p><ul><li>正常情况下会执行</li><li>System.exit()时不会执行</li><li>JVM崩溃时不会执行</li><li>线程被中断时可能不执行</li></ul></li><li><p><strong>try-with-resources原理？</strong></p><ul><li>编译器自动生成close方法调用</li><li>要求资源实现AutoCloseable接口</li><li>异常抑制机制</li></ul></li></ol><h3 id="6-5-设计模式相关"><a href="#6-5-设计模式相关" class="headerlink" title="6.5 设计模式相关"></a>6.5 设计模式相关</h3><ol><li><p><strong>单例模式的实现方式？</strong></p><ul><li>饿汉式、懒汉式、双重检查锁、静态内部类、枚举</li></ul></li><li><p><strong>工厂模式的作用？</strong></p><ul><li>解耦对象的创建和使用</li><li>统一管理对象的创建</li><li>符合开闭原则</li></ul></li></ol><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>《Java编程思想》</li><li>《Effective Java》</li><li>《Java并发编程实战》</li><li>JDK 1.8源码</li><li>《设计模式：可复用面向对象软件的基础》</li></ol><blockquote><p>本文档会持续更新，如有疑问或建议，欢迎留言讨论！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔试 </tag>
            
            <tag> 集合框架 </tag>
            
            <tag> 反射机制 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制的Commit命名规范</title>
      <link href="/2024/01/09/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84commit%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2024/01/09/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84commit%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要Commit命名规范"><a href="#为什么需要Commit命名规范" class="headerlink" title="为什么需要Commit命名规范"></a>为什么需要Commit命名规范</h2><p>在团队协作开发中，规范的Git提交信息（Commit Message）对于项目的维护和管理至关重要。良好的提交信息可以：</p><ul><li>提高代码review的效率</li><li>帮助生成更好的变更日志（CHANGELOG）</li><li>方便追踪项目历史和问题定位</li><li>促进团队协作和沟通</li></ul><h2 id="Commit-Message的格式规范"><a href="#Commit-Message的格式规范" class="headerlink" title="Commit Message的格式规范"></a>Commit Message的格式规范</h2><p>一个标准的Commit Message包含三个部分：Header、Body和Footer，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;body&gt;&lt;footer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header是必需的，包含三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>用于说明commit的类型，必须是以下类型之一：</p><ul><li><code>feat</code>: 新功能（feature）</li><li><code>fix</code>: 修复bug</li><li><code>docs</code>: 文档变更</li><li><code>style</code>: 代码格式修改，不影响代码逻辑（空格、格式化、缺少分号等）</li><li><code>refactor</code>: 代码重构，既不修复bug也不添加新功能</li><li><code>perf</code>: 性能优化</li><li><code>test</code>: 添加或修改测试用例</li><li><code>chore</code>: 构建过程或辅助工具的变动</li><li><code>revert</code>: 回滚之前的提交</li></ul><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>用于说明commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。如果没有合适的范围，可以省略。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject是commit的简短描述，不超过50个字符，遵循以下规则：</p><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Body部分是对本次commit的详细描述，可以分成多行。需要注意：</p><ul><li>使用第一人称现在时</li><li>说明代码变动的动机，以及与以前行为的对比</li><li>可以使用markdown格式的列表</li></ul><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>Footer部分只用于两种情况：</p><ol><li><p>不兼容变动（Breaking Changes）</p><ul><li>以<code>BREAKING CHANGE:</code>开头，后面是对变动的描述、理由和迁移方法</li></ul></li><li><p>关闭Issue</p><ul><li>可以是<code>Closes #123, #245, #992</code>这样的形式</li></ul></li></ol><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><h3 id="1-添加新功能"><a href="#1-添加新功能" class="headerlink" title="1. 添加新功能"></a>1. 添加新功能</h3><pre class="line-numbers language-none"><code class="language-none">feat(auth): 添加用户登录功能实现了基于JWT的用户认证系统：- 添加登录接口- 实现token生成和验证- 添加登录状态持久化Closes #123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修复Bug"><a href="#2-修复Bug" class="headerlink" title="2. 修复Bug"></a>2. 修复Bug</h3><pre class="line-numbers language-none"><code class="language-none">fix(database): 修复用户查询缓存问题修复了在高并发情况下用户数据查询缓存失效的问题。通过添加分布式锁机制解决了数据不一致的问题。Closes #456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文档更新"><a href="#3-文档更新" class="headerlink" title="3. 文档更新"></a>3. 文档更新</h3><pre class="line-numbers language-none"><code class="language-none">docs: 更新API文档- 添加新接口的使用说明- 更新认证流程文档- 修正错误的示例代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-代码重构"><a href="#4-代码重构" class="headerlink" title="4. 代码重构"></a>4. 代码重构</h3><pre class="line-numbers language-none"><code class="language-none">refactor(user): 重构用户管理模块- 将用户相关的业务逻辑抽取到独立的服务层- 优化数据库查询逻辑- 统一错误处理方式BREAKING CHANGE: 用户API的返回格式发生变化，请参考新的API文档进行适配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>保持简洁性</strong></p><ul><li>commit信息要清晰明了</li><li>一个commit只做一件事</li><li>避免过大的commit</li></ul></li><li><p><strong>使用工具辅助</strong></p><ul><li>使用commitlint等工具强制执行提交规范</li><li>配置git commit template模板</li><li>使用commitizen等工具生成规范的提交信息</li></ul></li><li><p><strong>分支管理策略</strong></p><ul><li>在开发分支上进行提交</li><li>合并到主分支前进行commit信息的检查</li><li>适当使用rebase保持提交历史的整洁</li></ul></li><li><p><strong>定期Review</strong></p><ul><li>定期检查团队的commit记录</li><li>及时纠正不规范的提交信息</li><li>总结和完善规范</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>提交信息过于笼统</strong></p><ul><li>错误示例：<code>fix: bug修复</code></li><li>正确示例：<code>fix(login): 修复登录验证码校验失败问题</code></li></ul></li><li><p><strong>提交粒度过大</strong></p><ul><li>错误示例：一次提交包含多个功能的修改</li><li>正确做法：将大的修改拆分成多个小的、相关的提交</li></ul></li><li><p><strong>type使用不当</strong></p><ul><li>错误示例：使用<code>feat</code>提交bug修复</li><li>正确做法：根据实际修改类型选择合适的type</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>规范的Commit命名不仅能够提高项目的可维护性，还能帮助团队更好地协作。通过遵循以上规范和最佳实践，我们可以：</p><ul><li>更容易理解代码变更的历史</li><li>自动生成规范的CHANGELOG</li><li>提高代码review的效率</li><li>方便进行版本控制和回滚操作</li></ul><p>建议团队在项目初期就建立并执行这些规范，养成良好的提交习惯，这将在项目后期带来巨大的便利。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> 开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8核心特性详解</title>
      <link href="/2023/11/15/Java8%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/11/15/Java8%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8核心特性详解"><a href="#Java8核心特性详解" class="headerlink" title="Java8核心特性详解"></a>Java8核心特性详解</h1><h2 id="1-Java8概述"><a href="#1-Java8概述" class="headerlink" title="1. Java8概述"></a>1. Java8概述</h2><p>Java 8是Java语言发展史上的一个重要里程碑，于2014年3月发布。它引入了许多革命性的新特性，极大地提升了开发效率和代码可读性。本文将详细介绍Java 8的四大核心特性：</p><ol><li><strong>Lambda表达式</strong> - 函数式编程支持</li><li><strong>Stream API</strong> - 集合处理新方式</li><li><strong>新日期时间API</strong> - 解决旧Date&#x2F;Calendar的问题</li><li><strong>接口默认方法</strong> - 接口的演进能力</li></ol><h2 id="2-Lambda表达式"><a href="#2-Lambda表达式" class="headerlink" title="2. Lambda表达式"></a>2. Lambda表达式</h2><h3 id="2-1-什么是Lambda表达式"><a href="#2-1-什么是Lambda表达式" class="headerlink" title="2.1 什么是Lambda表达式"></a>2.1 什么是Lambda表达式</h3><p>Lambda表达式是Java 8中最重要的新特性之一，它允许把函数作为一个方法的参数（函数作为参数传递进方法中），使代码更加简洁紧凑。</p><h3 id="2-2-Lambda语法"><a href="#2-2-Lambda语法" class="headerlink" title="2.2 Lambda语法"></a>2.2 Lambda语法</h3><p>基本语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span> expression或<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> statements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Lambda示例"><a href="#2-3-Lambda示例" class="headerlink" title="2.3 Lambda示例"></a>2.3 Lambda示例</h3><h4 id="示例1：无参数"><a href="#示例1：无参数" class="headerlink" title="示例1：无参数"></a>示例1：无参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例2：一个参数"><a href="#示例2：一个参数" class="headerlink" title="示例2：一个参数"></a>示例2：一个参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">str <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例3：多个参数"><a href="#示例3：多个参数" class="headerlink" title="示例3：多个参数"></a>示例3：多个参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例4：带返回值"><a href="#示例4：带返回值" class="headerlink" title="示例4：带返回值"></a>示例4：带返回值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Comparing "</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-函数式接口"><a href="#2-4-函数式接口" class="headerlink" title="2.4 函数式接口"></a>2.4 函数式接口</h3><p>Lambda表达式需要函数式接口的支持。函数式接口是指仅包含一个抽象方法的接口。Java 8提供了<code>@FunctionalInterface</code>注解来标识函数式接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">MyFunctionalInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyFunctionalInterface</span> fi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Executing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fi<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Java内置函数式接口"><a href="#2-5-Java内置函数式接口" class="headerlink" title="2.5 Java内置函数式接口"></a>2.5 Java内置函数式接口</h3><p>Java 8在<code>java.util.function</code>包中提供了许多内置函数式接口：</p><ul><li><strong>Consumer<T></strong> - 接受一个输入参数，无返回值</li><li><strong>Supplier<T></strong> - 无参数，返回一个结果</li><li><strong>Function&lt;T,R&gt;</strong> - 接受一个输入参数，返回一个结果</li><li><strong>Predicate<T></strong> - 接受一个输入参数，返回布尔值</li><li><strong>BiFunction&lt;T,U,R&gt;</strong> - 接受两个输入参数，返回一个结果</li></ul><h2 id="3-Stream-API"><a href="#3-Stream-API" class="headerlink" title="3. Stream API"></a>3. Stream API</h2><h3 id="3-1-什么是Stream"><a href="#3-1-什么是Stream" class="headerlink" title="3.1 什么是Stream"></a>3.1 什么是Stream</h3><p>Stream是Java 8中处理集合的关键抽象概念，它可以对集合进行非常复杂的查找、过滤和映射数据等操作。</p><h3 id="3-2-Stream特点"><a href="#3-2-Stream特点" class="headerlink" title="3.2 Stream特点"></a>3.2 Stream特点</h3><ol><li><strong>不是数据结构</strong>：不存储数据</li><li><strong>不修改源数据</strong>：对Stream的操作会产生新Stream</li><li><strong>惰性执行</strong>：中间操作是惰性的</li><li><strong>可消费性</strong>：Stream只能被消费一次</li></ol><h3 id="3-3-创建Stream"><a href="#3-3-创建Stream" class="headerlink" title="3.3 创建Stream"></a>3.3 创建Stream</h3><h4 id="从集合创建"><a href="#从集合创建" class="headerlink" title="从集合创建"></a>从集合创建</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="从数组创建"><a href="#从数组创建" class="headerlink" title="从数组创建"></a>从数组创建</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用Stream-of"><a href="#使用Stream-of" class="headerlink" title="使用Stream.of()"></a>使用Stream.of()</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成无限流"><a href="#生成无限流" class="headerlink" title="生成无限流"></a>生成无限流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> infiniteStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-></span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-中间操作"><a href="#3-4-中间操作" class="headerlink" title="3.4 中间操作"></a>3.4 中间操作</h3><h4 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter() - 过滤"></a>filter() - 过滤</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="map-映射"><a href="#map-映射" class="headerlink" title="map() - 映射"></a>map() - 映射</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted() - 排序"></a>sorted() - 排序</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct() - 去重"></a>distinct() - 去重</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="limit-限制数量"><a href="#limit-限制数量" class="headerlink" title="limit() - 限制数量"></a>limit() - 限制数量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-终止操作"><a href="#3-5-终止操作" class="headerlink" title="3.5 终止操作"></a>3.5 终止操作</h3><h4 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach() - 遍历"></a>forEach() - 遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="collect-收集"><a href="#collect-收集" class="headerlink" title="collect() - 收集"></a>collect() - 收集</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="count-计数"><a href="#count-计数" class="headerlink" title="count() - 计数"></a>count() - 计数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce() - 归约"></a>reduce() - 归约</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> reduced <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1 <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="anyMatch-allMatch-noneMatch-匹配"><a href="#anyMatch-allMatch-noneMatch-匹配" class="headerlink" title="anyMatch()&#x2F;allMatch()&#x2F;noneMatch() - 匹配"></a>anyMatch()&#x2F;allMatch()&#x2F;noneMatch() - 匹配</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6-并行流"><a href="#3-6-并行流" class="headerlink" title="3.6 并行流"></a>3.6 并行流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新日期时间API"><a href="#4-新日期时间API" class="headerlink" title="4. 新日期时间API"></a>4. 新日期时间API</h2><h3 id="4-1-旧API的问题"><a href="#4-1-旧API的问题" class="headerlink" title="4.1 旧API的问题"></a>4.1 旧API的问题</h3><p>Java 8之前的日期时间API存在以下问题：</p><ol><li><strong>非线程安全</strong> - Date和Calendar不是线程安全的</li><li><strong>设计差</strong> - 日期和时间类没有明确区分</li><li><strong>时区处理麻烦</strong></li></ol><h3 id="4-2-新API核心类"><a href="#4-2-新API核心类" class="headerlink" title="4.2 新API核心类"></a>4.2 新API核心类</h3><p>Java 8在<code>java.time</code>包中提供了新的日期时间API：</p><ul><li><strong>LocalDate</strong> - 日期（年月日）</li><li><strong>LocalTime</strong> - 时间（时分秒）</li><li><strong>LocalDateTime</strong> - 日期时间</li><li><strong>ZonedDateTime</strong> - 带时区的日期时间</li><li><strong>Instant</strong> - 时间戳</li><li><strong>Duration</strong> - 时间段</li><li><strong>Period</strong> - 日期段</li><li><strong>DateTimeFormatter</strong> - 日期时间格式化</li></ul><h3 id="4-3-基本使用"><a href="#4-3-基本使用" class="headerlink" title="4.3 基本使用"></a>4.3 基本使用</h3><h4 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建指定日期"><a href="#创建指定日期" class="headerlink" title="创建指定日期"></a>创建指定日期</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">NOVEMBER</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="日期运算"><a href="#日期运算" class="headerlink" title="日期运算"></a>日期运算</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> nextWeek <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> previousYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isAfter <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> formattedDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> parsedDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2023-11-15"</span><span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-接口默认方法"><a href="#5-接口默认方法" class="headerlink" title="5. 接口默认方法"></a>5. 接口默认方法</h2><h3 id="5-1-什么是默认方法"><a href="#5-1-什么是默认方法" class="headerlink" title="5.1 什么是默认方法"></a>5.1 什么是默认方法</h3><p>Java 8允许在接口中定义具有实现的方法，称为默认方法，使用<code>default</code>关键字修饰。</p><h3 id="5-2-默认方法示例"><a href="#5-2-默认方法示例" class="headerlink" title="5.2 默认方法示例"></a>5.2 默认方法示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 抽象方法</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vehicle stopped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实现的方法</span>        car<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 默认方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-默认方法的作用"><a href="#5-3-默认方法的作用" class="headerlink" title="5.3 默认方法的作用"></a>5.3 默认方法的作用</h3><ol><li><strong>接口演进</strong>：可以向现有接口添加新方法而不破坏现有实现</li><li><strong>多继承</strong>：解决Java中多继承的问题</li><li><strong>提供通用功能</strong>：为所有实现类提供默认实现</li></ol><h3 id="5-4-默认方法冲突"><a href="#5-4-默认方法冲突" class="headerlink" title="5.4 默认方法冲突"></a>5.4 默认方法冲突</h3><p>当一个类实现多个接口，且这些接口有相同的默认方法时，需要解决冲突：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 显式调用A的默认方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-其他新特性"><a href="#6-其他新特性" class="headerlink" title="6. 其他新特性"></a>6. 其他新特性</h2><h3 id="6-1-Optional类"><a href="#6-1-Optional类" class="headerlink" title="6.1 Optional类"></a>6.1 Optional类</h3><p>用于避免NullPointerException：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-2-方法引用"><a href="#6-2-方法引用" class="headerlink" title="6.2 方法引用"></a>6.2 方法引用</h3><p>简化Lambda表达式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-3-重复注解"><a href="#6-3-重复注解" class="headerlink" title="6.3 重复注解"></a>6.3 重复注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Authorities</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Authority</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Authorities</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Authority</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Java 8通过引入Lambda表达式、Stream API、新日期时间API和接口默认方法等特性，极大地提升了Java语言的表达能力和开发效率。这些特性使得Java能够更好地适应现代编程需求，特别是在函数式编程和大数据处理方面。</p><p>掌握这些核心特性，可以帮助开发者编写更简洁、更易读、更高效的Java代码。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://docs.oracle.com/javase/8/docs/">Java 8官方文档</a></li><li><a href="https://www.oracle.com/java/technologies/javase/8-whats-new.html">Java 8新特性教程</a></li><li><a href="https://book.douban.com/subject/26772632/">Java 8实战</a></li><li><a href="https://www.baeldung.com/java-8-streams">Java 8 Stream API指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream API </tag>
            
            <tag> Lambda </tag>
            
            <tag> 新日期时间API </tag>
            
            <tag> 默认方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot详细配置与启动指南</title>
      <link href="/2023/11/15/SpringBoot%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/11/15/SpringBoot%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot详细配置与启动指南"><a href="#SpringBoot详细配置与启动指南" class="headerlink" title="SpringBoot详细配置与启动指南"></a>SpringBoot详细配置与启动指南</h1><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1. SpringBoot简介"></a>1. SpringBoot简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域成为领导者。</p><h3 id="1-1-SpringBoot的核心特性"><a href="#1-1-SpringBoot的核心特性" class="headerlink" title="1.1 SpringBoot的核心特性"></a>1.1 SpringBoot的核心特性</h3><ul><li><strong>自动配置</strong>：SpringBoot会根据类路径中的jar包、类，为jar包里的类自动配置Bean</li><li><strong>起步依赖</strong>：告诉SpringBoot需要什么功能，它就会引入需要的库</li><li><strong>命令行界面</strong>：这是SpringBoot的可选特性，主要针对Groovy语言</li><li><strong>Actuator</strong>：让你能够深入运行中的SpringBoot应用程序，一探究竟</li></ul><h3 id="1-2-为什么选择SpringBoot"><a href="#1-2-为什么选择SpringBoot" class="headerlink" title="1.2 为什么选择SpringBoot"></a>1.2 为什么选择SpringBoot</h3><ul><li>简化配置，专注于业务</li><li>内嵌服务器，无需部署WAR文件</li><li>提供生产级别的监控、健康检查及外部化配置</li><li>无代码生成和XML配置要求</li></ul><h2 id="2-SpringBoot项目结构"><a href="#2-SpringBoot项目结构" class="headerlink" title="2. SpringBoot项目结构"></a>2. SpringBoot项目结构</h2><p>一个标准的SpringBoot项目结构如下：</p><pre class="line-numbers language-none"><code class="language-none">myproject&#x2F;├── src&#x2F;│   ├── main&#x2F;│   │   ├── java&#x2F;│   │   │   └── com&#x2F;│   │   │       └── example&#x2F;│   │   │           └── myproject&#x2F;│   │   │               ├── MyprojectApplication.java│   │   │               ├── controller&#x2F;│   │   │               ├── service&#x2F;│   │   │               ├── repository&#x2F;│   │   │               └── model&#x2F;│   │   └── resources&#x2F;│   │       ├── application.properties (或 application.yml)│   │       ├── static&#x2F;│   │       └── templates&#x2F;│   └── test&#x2F;│       └── java&#x2F;│           └── com&#x2F;│               └── example&#x2F;│                   └── myproject&#x2F;│                       └── MyprojectApplicationTests.java├── pom.xml (Maven项目) 或 build.gradle (Gradle项目)└── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-SpringBoot项目创建"><a href="#3-SpringBoot项目创建" class="headerlink" title="3. SpringBoot项目创建"></a>3. SpringBoot项目创建</h2><h3 id="3-1-使用Spring-Initializr创建"><a href="#3-1-使用Spring-Initializr创建" class="headerlink" title="3.1 使用Spring Initializr创建"></a>3.1 使用Spring Initializr创建</h3><ol><li>访问 <a href="https://start.spring.io/">Spring Initializr</a></li><li>选择构建工具（Maven&#x2F;Gradle）</li><li>选择语言（Java&#x2F;Kotlin&#x2F;Groovy）</li><li>选择Spring Boot版本</li><li>填写项目元数据（Group、Artifact等）</li><li>选择依赖（如Web、JPA、Security等）</li><li>点击”Generate”下载项目压缩包</li><li>解压并导入IDE</li></ol><h3 id="3-2-使用IDE创建"><a href="#3-2-使用IDE创建" class="headerlink" title="3.2 使用IDE创建"></a>3.2 使用IDE创建</h3><h4 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h4><ol><li>点击 File -&gt; New -&gt; Project</li><li>选择 Spring Initializr</li><li>配置项目信息</li><li>选择依赖</li><li>点击 Finish</li></ol><h4 id="Eclipse-STS"><a href="#Eclipse-STS" class="headerlink" title="Eclipse&#x2F;STS"></a>Eclipse&#x2F;STS</h4><ol><li>点击 File -&gt; New -&gt; Spring Starter Project</li><li>配置项目信息</li><li>选择依赖</li><li>点击 Finish</li></ol><h3 id="3-3-使用命令行创建"><a href="#3-3-使用命令行创建" class="headerlink" title="3.3 使用命令行创建"></a>3.3 使用命令行创建</h3><p>使用Spring Boot CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring init <span class="token parameter variable">--dependencies</span><span class="token operator">=</span>web,data-jpa myproject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-SpringBoot核心配置"><a href="#4-SpringBoot核心配置" class="headerlink" title="4. SpringBoot核心配置"></a>4. SpringBoot核心配置</h2><h3 id="4-1-配置文件类型"><a href="#4-1-配置文件类型" class="headerlink" title="4.1 配置文件类型"></a>4.1 配置文件类型</h3><p>SpringBoot支持多种配置文件格式：</p><ul><li><strong>application.properties</strong>：键值对形式</li><li><strong>application.yml</strong>：YAML格式，层次结构更清晰</li><li><strong>application.yaml</strong>：同上，扩展名不同</li></ul><p>配置文件默认位置：</p><ul><li>src&#x2F;main&#x2F;resources&#x2F;application.properties</li><li>src&#x2F;main&#x2F;resources&#x2F;application.yml</li></ul><h3 id="4-2-配置文件优先级"><a href="#4-2-配置文件优先级" class="headerlink" title="4.2 配置文件优先级"></a>4.2 配置文件优先级</h3><ol><li>命令行参数</li><li>java:comp&#x2F;env里的JNDI属性</li><li>JVM系统属性</li><li>操作系统环境变量</li><li>RandomValuePropertySource配置的random.*属性值</li><li>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li><li>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li><li>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</li><li>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</li></ol><h3 id="4-3-YAML配置示例"><a href="#4-3-YAML配置示例" class="headerlink" title="4.3 YAML配置示例"></a>4.3 YAML配置示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /api<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mydb    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> password    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> INFO    <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">com.example.myproject</span><span class="token punctuation">:</span> DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-Properties配置示例"><a href="#4-4-Properties配置示例" class="headerlink" title="4.4 Properties配置示例"></a>4.4 Properties配置示例</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 服务器配置</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/api</span><span class="token comment"># 数据源配置</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/mydb</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment"># JPA配置</span><span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span><span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># 日志配置</span><span class="token key attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span><span class="token key attr-name">logging.level.org.springframework.web</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span><span class="token key attr-name">logging.level.com.example.myproject</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-多环境配置"><a href="#4-5-多环境配置" class="headerlink" title="4.5 多环境配置"></a>4.5 多环境配置</h3><p>SpringBoot支持不同环境下使用不同的配置文件，通过<code>spring.profiles.active</code>属性来激活。</p><h4 id="4-5-1-创建多环境配置文件"><a href="#4-5-1-创建多环境配置文件" class="headerlink" title="4.5.1 创建多环境配置文件"></a>4.5.1 创建多环境配置文件</h4><ul><li>application-dev.yml：开发环境</li><li>application-test.yml：测试环境</li><li>application-prod.yml：生产环境</li></ul><h4 id="4-5-2-激活指定环境"><a href="#4-5-2-激活指定环境" class="headerlink" title="4.5.2 激活指定环境"></a>4.5.2 激活指定环境</h4><p>在application.yml中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者通过命令行参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-SpringBoot常用配置详解"><a href="#5-SpringBoot常用配置详解" class="headerlink" title="5. SpringBoot常用配置详解"></a>5. SpringBoot常用配置详解</h2><h3 id="5-1-服务器配置"><a href="#5-1-服务器配置" class="headerlink" title="5.1 服务器配置"></a>5.1 服务器配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>                      <span class="token comment"># 服务端口</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /api            <span class="token comment"># 应用上下文路径</span>    <span class="token key atrule">session</span><span class="token punctuation">:</span>      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 30m                <span class="token comment"># Session超时时间</span>  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">max-threads</span><span class="token punctuation">:</span> <span class="token number">200</span>              <span class="token comment"># 最大工作线程数</span>    <span class="token key atrule">min-spare-threads</span><span class="token punctuation">:</span> <span class="token number">10</span>         <span class="token comment"># 最小工作线程数</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">10000</span>        <span class="token comment"># 最大连接数</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>      <span class="token comment"># 连接超时时间(ms)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-数据源配置"><a href="#5-2-数据源配置" class="headerlink" title="5.2 数据源配置"></a>5.2 数据源配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mydb<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;serverTimezone=UTC</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> password    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource  <span class="token comment"># 使用Hikari连接池</span>    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span>       <span class="token comment"># 最大连接数</span>      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>             <span class="token comment"># 最小空闲连接</span>      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>         <span class="token comment"># 空闲连接超时时间(ms)</span>      <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>   <span class="token comment"># 连接超时时间(ms)</span>      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span>       <span class="token comment"># 连接最大生命周期(ms)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-JPA配置"><a href="#5-3-JPA配置" class="headerlink" title="5.3 JPA配置"></a>5.3 JPA配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">database-platform</span><span class="token punctuation">:</span> org.hibernate.dialect.MySQL8Dialect    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update            <span class="token comment"># 数据库schema更新策略</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                <span class="token comment"># 显示SQL语句</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment"># 格式化SQL</span>        <span class="token key atrule">use_sql_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 使用SQL注释</span>    <span class="token key atrule">open-in-view</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 禁用Open Session in View</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-Redis配置"><a href="#5-4-Redis配置" class="headerlink" title="5.4 Redis配置"></a>5.4 Redis配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span>     <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>                   <span class="token comment"># 使用的数据库索引</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>                <span class="token comment"># 连接超时时间(ms)</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>                      <span class="token comment"># 使用Lettuce客户端</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>             <span class="token comment"># 最大连接数</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>               <span class="token comment"># 最大空闲连接</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>               <span class="token comment"># 最小空闲连接</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>              <span class="token comment"># 连接等待时间(ms)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-缓存配置"><a href="#5-5-缓存配置" class="headerlink" title="5.5 缓存配置"></a>5.5 缓存配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> caffeine                <span class="token comment"># 缓存类型</span>    <span class="token key atrule">caffeine</span><span class="token punctuation">:</span>      <span class="token key atrule">spec</span><span class="token punctuation">:</span> maximumSize=500<span class="token punctuation">,</span>expireAfterAccess=600s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-消息队列配置-RabbitMQ"><a href="#5-6-消息队列配置-RabbitMQ" class="headerlink" title="5.6 消息队列配置(RabbitMQ)"></a>5.6 消息队列配置(RabbitMQ)</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span>        <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token comment"># 最小消费者数量</span>        <span class="token key atrule">max-concurrency</span><span class="token punctuation">:</span> <span class="token number">10</span>       <span class="token comment"># 最大消费者数量</span>        <span class="token key atrule">prefetch</span><span class="token punctuation">:</span> <span class="token number">1</span>               <span class="token comment"># 每次从队列获取的消息数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-日志配置"><a href="#5-7-日志配置" class="headerlink" title="5.7 日志配置"></a>5.7 日志配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> INFO                                <span class="token comment"># 根日志级别</span>    <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> DEBUG            <span class="token comment"># Spring Web日志级别</span>    <span class="token key atrule">org.hibernate</span><span class="token punctuation">:</span> ERROR                      <span class="token comment"># Hibernate日志级别</span>    <span class="token key atrule">com.example.myproject</span><span class="token punctuation">:</span> DEBUG              <span class="token comment"># 应用日志级别</span>  <span class="token key atrule">file</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> logs/application.log                <span class="token comment"># 日志文件名</span>  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">"%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n"</span>    <span class="token key atrule">file</span><span class="token punctuation">:</span> <span class="token string">"%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-安全配置"><a href="#5-8-安全配置" class="headerlink" title="5.8 安全配置"></a>5.8 安全配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> admin                 <span class="token comment"># 默认用户名</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> admin             <span class="token comment"># 默认密码</span>      <span class="token key atrule">roles</span><span class="token punctuation">:</span> ADMIN                <span class="token comment"># 默认角色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-9-文件上传配置"><a href="#5-9-文件上传配置" class="headerlink" title="5.9 文件上传配置"></a>5.9 文件上传配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">multipart</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># 启用文件上传</span>      <span class="token key atrule">file-size-threshold</span><span class="token punctuation">:</span> 2KB    <span class="token comment"># 文件写入磁盘的阈值</span>      <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 200MB        <span class="token comment"># 最大文件大小</span>      <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 215MB     <span class="token comment"># 最大请求大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-10-国际化配置"><a href="#5-10-国际化配置" class="headerlink" title="5.10 国际化配置"></a>5.10 国际化配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">messages</span><span class="token punctuation">:</span>    <span class="token key atrule">basename</span><span class="token punctuation">:</span> i18n/messages       <span class="token comment"># 国际化资源文件基础名</span>    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>               <span class="token comment"># 编码</span>    <span class="token key atrule">cache-duration</span><span class="token punctuation">:</span> <span class="token number">3600</span>          <span class="token comment"># 缓存时间(秒)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-SpringBoot启动原理"><a href="#6-SpringBoot启动原理" class="headerlink" title="6. SpringBoot启动原理"></a>6. SpringBoot启动原理</h2><h3 id="6-1-启动流程"><a href="#6-1-启动流程" class="headerlink" title="6.1 启动流程"></a>6.1 启动流程</h3><ol><li><p><strong>创建SpringApplication对象</strong></p><ul><li>推断应用类型（SERVLET、REACTIVE、NONE）</li><li>查找并加载所有可用的初始化器</li><li>查找所有的应用程序监听器</li><li>推断并设置main方法的定义类</li></ul></li><li><p><strong>运行SpringApplication</strong></p><ul><li>启动计时器</li><li>发布应用启动事件</li><li>准备环境</li><li>创建上下文对象</li><li>预处理上下文</li><li>刷新上下文</li><li>后置处理上下文</li><li>发布应用已启动事件</li><li>执行runners</li></ul></li></ol><h3 id="6-2-自动配置原理"><a href="#6-2-自动配置原理" class="headerlink" title="6.2 自动配置原理"></a>6.2 自动配置原理</h3><p>SpringBoot自动配置是通过<code>@EnableAutoConfiguration</code>注解实现的，其核心步骤如下：</p><ol><li><strong>@SpringBootApplication</strong>：包含了@EnableAutoConfiguration</li><li><strong>@EnableAutoConfiguration</strong>：导入AutoConfigurationImportSelector</li><li><strong>AutoConfigurationImportSelector</strong>：<ul><li>加载META-INF&#x2F;spring.factories中的配置类</li><li>过滤不符合条件的配置类</li><li>将符合条件的配置类导入Spring容器</li></ul></li></ol><h3 id="6-3-条件注解"><a href="#6-3-条件注解" class="headerlink" title="6.3 条件注解"></a>6.3 条件注解</h3><p>SpringBoot通过条件注解来决定是否创建某个Bean：</p><ul><li><strong>@ConditionalOnClass</strong>：当类路径下有指定的类时</li><li><strong>@ConditionalOnMissingClass</strong>：当类路径下没有指定的类时</li><li><strong>@ConditionalOnBean</strong>：当容器中有指定的Bean时</li><li><strong>@ConditionalOnMissingBean</strong>：当容器中没有指定的Bean时</li><li><strong>@ConditionalOnProperty</strong>：当指定的属性有指定的值时</li><li><strong>@ConditionalOnResource</strong>：当类路径下有指定的资源时</li><li><strong>@ConditionalOnWebApplication</strong>：当前项目是Web项目时</li><li><strong>@ConditionalOnNotWebApplication</strong>：当前项目不是Web项目时</li><li><strong>@ConditionalOnExpression</strong>：基于SpEL表达式的条件判断</li></ul><h2 id="7-SpringBoot启动类详解"><a href="#7-SpringBoot启动类详解" class="headerlink" title="7. SpringBoot启动类详解"></a>7. SpringBoot启动类详解</h2><h3 id="7-1-基本启动类"><a href="#7-1-基本启动类" class="headerlink" title="7.1 基本启动类"></a>7.1 基本启动类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-自定义SpringApplication"><a href="#7-2-自定义SpringApplication" class="headerlink" title="7.2 自定义SpringApplication"></a>7.2 自定义SpringApplication</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 禁用banner</span>        application<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置为非web环境</span>        application<span class="token punctuation">.</span><span class="token function">setWebApplicationType</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加监听器</span>        application<span class="token punctuation">.</span><span class="token function">addListeners</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationStartingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置额外的配置文件</span>        application<span class="token punctuation">.</span><span class="token function">setAdditionalProfiles</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 运行应用</span>        application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-使用Builder-API"><a href="#7-3-使用Builder-API" class="headerlink" title="7.3 使用Builder API"></a>7.3 使用Builder API</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">bannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">profiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-命令行参数"><a href="#7-4-命令行参数" class="headerlink" title="7.4 命令行参数"></a>7.4 命令行参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将命令行参数转换为属性</span>        <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">setAddCommandLineProperties</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-ApplicationRunner和CommandLineRunner"><a href="#7-5-ApplicationRunner和CommandLineRunner" class="headerlink" title="7.5 ApplicationRunner和CommandLineRunner"></a>7.5 ApplicationRunner和CommandLineRunner</h3><p>这两个接口可以在SpringBoot启动后执行特定的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">commandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> args <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用启动后执行CommandLineRunner..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 可以访问命令行参数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">applicationRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> args <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用启动后执行ApplicationRunner..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 可以访问选项和非选项参数</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选项参数: "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非选项参数: "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">getNonOptionArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-SpringBoot常用注解"><a href="#8-SpringBoot常用注解" class="headerlink" title="8. SpringBoot常用注解"></a>8. SpringBoot常用注解</h2><h3 id="8-1-核心注解"><a href="#8-1-核心注解" class="headerlink" title="8.1 核心注解"></a>8.1 核心注解</h3><ul><li><strong>@SpringBootApplication</strong>：组合注解，包含@Configuration、@EnableAutoConfiguration和@ComponentScan</li><li><strong>@EnableAutoConfiguration</strong>：启用SpringBoot的自动配置机制</li><li><strong>@Configuration</strong>：标记类为配置类</li><li><strong>@ComponentScan</strong>：指定要扫描的包</li></ul><h3 id="8-2-Web相关注解"><a href="#8-2-Web相关注解" class="headerlink" title="8.2 Web相关注解"></a>8.2 Web相关注解</h3><ul><li><strong>@Controller</strong>：标记类为控制器</li><li><strong>@RestController</strong>：@Controller + @ResponseBody</li><li><strong>@RequestMapping</strong>：映射请求路径</li><li><strong>@GetMapping</strong>：映射GET请求</li><li><strong>@PostMapping</strong>：映射POST请求</li><li><strong>@PutMapping</strong>：映射PUT请求</li><li><strong>@DeleteMapping</strong>：映射DELETE请求</li><li><strong>@RequestParam</strong>：绑定请求参数</li><li><strong>@PathVariable</strong>：绑定路径变量</li><li><strong>@RequestBody</strong>：绑定请求体</li><li><strong>@ResponseBody</strong>：将返回值序列化为响应体</li></ul><h3 id="8-3-数据访问注解"><a href="#8-3-数据访问注解" class="headerlink" title="8.3 数据访问注解"></a>8.3 数据访问注解</h3><ul><li><strong>@Repository</strong>：标记类为数据访问组件</li><li><strong>@Entity</strong>：标记类为JPA实体</li><li><strong>@Table</strong>：指定实体对应的表</li><li><strong>@Id</strong>：标记字段为主键</li><li><strong>@GeneratedValue</strong>：指定主键生成策略</li><li><strong>@Column</strong>：指定字段对应的列</li><li><strong>@Transactional</strong>：声明事务</li></ul><h3 id="8-4-服务层注解"><a href="#8-4-服务层注解" class="headerlink" title="8.4 服务层注解"></a>8.4 服务层注解</h3><ul><li><strong>@Service</strong>：标记类为服务组件</li><li><strong>@Autowired</strong>：自动装配依赖</li><li><strong>@Qualifier</strong>：指定要装配的Bean</li><li><strong>@Value</strong>：注入配置属性</li><li><strong>@ConfigurationProperties</strong>：绑定配置属性到类</li></ul><h3 id="8-5-条件注解"><a href="#8-5-条件注解" class="headerlink" title="8.5 条件注解"></a>8.5 条件注解</h3><ul><li><strong>@Conditional</strong>：基于条件创建Bean</li><li><strong>@ConditionalOnBean</strong>：当存在指定Bean时</li><li><strong>@ConditionalOnMissingBean</strong>：当不存在指定Bean时</li><li><strong>@ConditionalOnClass</strong>：当存在指定类时</li><li><strong>@ConditionalOnMissingClass</strong>：当不存在指定类时</li><li><strong>@ConditionalOnProperty</strong>：当存在指定属性时</li><li><strong>@ConditionalOnWebApplication</strong>：当是Web应用时</li><li><strong>@ConditionalOnNotWebApplication</strong>：当不是Web应用时</li></ul><h2 id="9-SpringBoot启动方式"><a href="#9-SpringBoot启动方式" class="headerlink" title="9. SpringBoot启动方式"></a>9. SpringBoot启动方式</h2><h3 id="9-1-IDE中启动"><a href="#9-1-IDE中启动" class="headerlink" title="9.1 IDE中启动"></a>9.1 IDE中启动</h3><p>在IDE中直接运行主类的main方法。</p><h3 id="9-2-命令行启动"><a href="#9-2-命令行启动" class="headerlink" title="9.2 命令行启动"></a>9.2 命令行启动</h3><h4 id="使用Maven"><a href="#使用Maven" class="headerlink" title="使用Maven"></a>使用Maven</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用Maven插件启动</span>mvn spring-boot:run<span class="token comment"># 指定配置文件</span>mvn spring-boot:run <span class="token parameter variable">-Dspring.profiles.active</span><span class="token operator">=</span>prod<span class="token comment"># 指定JVM参数</span>mvn spring-boot:run -Dspring-boot.run.jvmArguments<span class="token operator">=</span><span class="token string">"-Xms512m -Xmx1024m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用Gradle"><a href="#使用Gradle" class="headerlink" title="使用Gradle"></a>使用Gradle</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用Gradle插件启动</span>gradle bootRun<span class="token comment"># 指定配置文件</span>gradle bootRun <span class="token parameter variable">--args</span><span class="token operator">=</span><span class="token string">'--spring.profiles.active=prod'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用打包后的JAR"><a href="#使用打包后的JAR" class="headerlink" title="使用打包后的JAR"></a>使用打包后的JAR</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打包</span>mvn clean package<span class="token comment"># 运行JAR</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> target/myapp-0.0.1-SNAPSHOT.jar<span class="token comment"># 指定配置文件</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> target/myapp-0.0.1-SNAPSHOT.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>prod<span class="token comment"># 指定JVM参数</span><span class="token function">java</span> <span class="token parameter variable">-Xms512m</span> <span class="token parameter variable">-Xmx1024m</span> <span class="token parameter variable">-jar</span> target/myapp-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-使用Spring-Boot-CLI"><a href="#9-3-使用Spring-Boot-CLI" class="headerlink" title="9.3 使用Spring Boot CLI"></a>9.3 使用Spring Boot CLI</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Spring Boot CLI</span><span class="token comment"># 运行Groovy脚本</span>spring run app.groovy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-4-作为系统服务"><a href="#9-4-作为系统服务" class="headerlink" title="9.4 作为系统服务"></a>9.4 作为系统服务</h3><h4 id="Linux-systemd"><a href="#Linux-systemd" class="headerlink" title="Linux (systemd)"></a>Linux (systemd)</h4><p>创建服务文件 <code>/etc/systemd/system/myapp.service</code>：</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;My Spring Boot ApplicationAfter&#x3D;syslog.target[Service]User&#x3D;myappExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;java -jar &#x2F;path&#x2F;to&#x2F;myapp.jarSuccessExitStatus&#x3D;143[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> myapp.service<span class="token function">sudo</span> systemctl start myapp.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>使用winsw将应用注册为Windows服务。</p><h2 id="10-SpringBoot应用监控与管理"><a href="#10-SpringBoot应用监控与管理" class="headerlink" title="10. SpringBoot应用监控与管理"></a>10. SpringBoot应用监控与管理</h2><h3 id="10-1-Actuator"><a href="#10-1-Actuator" class="headerlink" title="10.1 Actuator"></a>10.1 Actuator</h3><p>Spring Boot Actuator提供了生产级别的监控和管理功能。</p><h4 id="10-1-1-添加依赖"><a href="#10-1-1-添加依赖" class="headerlink" title="10.1.1 添加依赖"></a>10.1.1 添加依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-2-配置Actuator"><a href="#10-1-2-配置Actuator" class="headerlink" title="10.1.2 配置Actuator"></a>10.1.2 配置Actuator</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>        <span class="token comment"># 暴露所有端点</span>      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /actuator  <span class="token comment"># 端点基础路径</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always  <span class="token comment"># 显示详细健康信息</span>    <span class="token key atrule">shutdown</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># 启用关闭端点</span>  <span class="token key atrule">info</span><span class="token punctuation">:</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># 启用环境信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-3-常用端点"><a href="#10-1-3-常用端点" class="headerlink" title="10.1.3 常用端点"></a>10.1.3 常用端点</h4><ul><li><strong>&#x2F;actuator&#x2F;health</strong>：应用健康状态</li><li><strong>&#x2F;actuator&#x2F;info</strong>：应用信息</li><li><strong>&#x2F;actuator&#x2F;metrics</strong>：应用指标</li><li><strong>&#x2F;actuator&#x2F;env</strong>：环境变量</li><li><strong>&#x2F;actuator&#x2F;loggers</strong>：日志配置</li><li><strong>&#x2F;actuator&#x2F;mappings</strong>：请求映射</li><li><strong>&#x2F;actuator&#x2F;beans</strong>：Spring Bean信息</li><li><strong>&#x2F;actuator&#x2F;shutdown</strong>：关闭应用(POST请求)</li></ul><h3 id="10-2-Spring-Boot-Admin"><a href="#10-2-Spring-Boot-Admin" class="headerlink" title="10.2 Spring Boot Admin"></a>10.2 Spring Boot Admin</h3><p>Spring Boot Admin是一个Web应用，用于管理和监控Spring Boot应用。</p><h4 id="10-2-1-创建Admin-Server"><a href="#10-2-1-创建Admin-Server" class="headerlink" title="10.2.1 创建Admin Server"></a>10.2.1 创建Admin Server</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAdminServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AdminServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-2-配置客户端"><a href="#10-2-2-配置客户端" class="headerlink" title="10.2.2 配置客户端"></a>10.2.2 配置客户端</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    <span class="token key atrule">admin</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8080</span>  <span class="token comment"># Admin Server地址</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>          <span class="token key atrule">metadata</span><span class="token punctuation">:</span>            <span class="token key atrule">tags</span><span class="token punctuation">:</span>              <span class="token key atrule">environment</span><span class="token punctuation">:</span> production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-SpringBoot最佳实践"><a href="#11-SpringBoot最佳实践" class="headerlink" title="11. SpringBoot最佳实践"></a>11. SpringBoot最佳实践</h2><h3 id="11-1-项目结构"><a href="#11-1-项目结构" class="headerlink" title="11.1 项目结构"></a>11.1 项目结构</h3><pre class="line-numbers language-none"><code class="language-none">com.example.myproject├── config        # 配置类├── controller    # 控制器├── dto           # 数据传输对象├── entity        # 实体类├── repository    # 数据访问层├── service       # 服务层│   ├── impl      # 服务实现├── exception     # 自定义异常├── util          # 工具类└── Application.java  # 启动类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-配置管理"><a href="#11-2-配置管理" class="headerlink" title="11.2 配置管理"></a>11.2 配置管理</h3><ul><li>使用YAML格式配置文件，层次结构更清晰</li><li>使用@ConfigurationProperties绑定配置到类</li><li>敏感信息使用环境变量或外部配置</li></ul><h3 id="11-3-异常处理"><a href="#11-3-异常处理" class="headerlink" title="11.3 异常处理"></a>11.3 异常处理</h3><p>使用全局异常处理器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">></span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ErrorResponse</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorResponse</span><span class="token punctuation">(</span>            <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"服务器内部错误"</span><span class="token punctuation">,</span>            ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">></span></span> <span class="token function">handleResourceNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ErrorResponse</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorResponse</span><span class="token punctuation">(</span>            <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"资源不存在"</span><span class="token punctuation">,</span>            ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-API文档"><a href="#11-4-API文档" class="headerlink" title="11.4 API文档"></a>11.4 API文档</h3><p>使用Springfox Swagger：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.myproject.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"My API Documentation"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"API documentation for My Project"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-测试"><a href="#11-5-测试" class="headerlink" title="11.5 测试"></a>11.5 测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MyServiceTest</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@MockBean</span>    <span class="token keyword">private</span> <span class="token class-name">MyRepository</span> myRepository<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 准备测试数据</span>        <span class="token class-name">MyEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 模拟repository行为</span>        <span class="token function">when</span><span class="token punctuation">(</span>myRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行测试</span>        <span class="token class-name">MyDto</span> result <span class="token operator">=</span> myService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 验证结果</span>        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 验证repository方法被调用</span>        <span class="token function">verify</span><span class="token punctuation">(</span>myRepository<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-总结"><a href="#12-总结" class="headerlink" title="12. 总结"></a>12. 总结</h2><p>SpringBoot通过约定大于配置的理念，大大简化了Spring应用的开发。本文详细介绍了SpringBoot的配置和启动方式，包括：</p><ol><li>SpringBoot的核心特性和优势</li><li>项目结构和创建方式</li><li>核心配置文件和常用配置项</li><li>启动原理和自动配置机制</li><li>启动类详解和启动方式</li><li>常用注解和最佳实践</li></ol><p>通过掌握这些知识，开发者可以更高效地使用SpringBoot开发企业级应用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">Spring Boot官方文档</a></li><li><a href="https://github.com/spring-projects/spring-boot">Spring Boot GitHub仓库</a></li><li><a href="https://start.spring.io/">Spring Initializr</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html">Spring Boot Actuator文档</a></li><li><a href="https://github.com/codecentric/spring-boot-admin">Spring Boot Admin</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 配置 </tag>
            
            <tag> 启动 </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
